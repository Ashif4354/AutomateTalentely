{"Number system_Level_2_Test 1": {"1": "42", "2": "1", "3": "1023", "4": "n+2", "5": "50", "6": "7/4", "7": "Farther from the origin than -3.4", "8": "4/3", "9": "56 1/4", "10": "11", "11": "627000", "12": "12", "13": "72.9", "14": "Distance between the two new numbers is equal to the distances between 4.28 and -3.28", "15": "3/4", "16": "99", "17": "3", "18": "12", "19": "194", "20": "4", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_1_Test 1": {"1": "5", "2": "20", "3": "5", "4": "23", "5": "224.623", "6": "73/7", "7": "1001/250", "8": "8,800", "9": "1154", "10": "5/9", "11": "21", "12": "50", "13": "a+n/b+n", "14": "415624", "15": "None of these", "16": "14/15>37/40", "17": "30", "18": "42", "19": "1", "20": "1023", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_3_Test 1": {"1": "81", "2": "181", "3": "2,16,000", "4": "20", "5": "71", "6": "a. 61", "7": "27", "8": "9.0", "9": "108", "10": "1", "11": "400", "12": "253", "13": "400", "14": "24", "15": "11", "16": "12", "17": "987", "18": "3/11", "19": "50", "20": "62", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_2_Test 2": {"1": "10", "2": "0.2", "3": "0.08", "4": "2.", "5": "101124", "6": "970", "7": "0.1", "8": "19", "9": "25", "10": "-1", "11": "4", "12": "970", "13": "0.1 and 0.3", "14": "33", "15": "1161", "16": "270", "17": "p sqrt(k) (q)^2=1/sqrt(r)", "18": "1.865", "19": "60", "20": "10", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_2_Test 3": {"1": "27", "2": "1023", "3": "2", "4": "15", "5": "0.1 and 0.3", "6": "4", "7": "-3", "8": "27", "9": "0.84", "10": "4", "11": "\u221a77 - \u221a76", "12": "c", "13": "108", "14": "4", "15": "5", "16": "69", "17": "109", "18": "65", "19": "67", "20": "738", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_1_Test 2": {"1": "1023", "2": "Whole numbers", "3": "None of the above", "4": "(xy + yx + 1) is an even number", "5": "49 (1/4)", "6": "12", "7": "19", "8": "X = 1", "9": "4096", "10": "2", "11": "12", "12": "625", "13": "33", "14": "3^6 x 7^3", "15": "3/4", "16": "2", "17": "22", "18": "99", "19": "0.3", "20": "2^10", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_1_Test 3": {"1": "{1, 2, 3, 4, ....)", "2": "It is less than 1", "3": "4", "4": "5400", "5": "{1,2,3,4,\u2026}", "6": "12", "7": "2", "8": "360", "9": "1", "10": "None of the above", "11": "9", "12": "12", "13": "3600", "14": "1", "15": "2", "16": "2", "17": "", "18": "10", "19": "1001", "20": "-11", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Number system_Level_2_Test 4": {"1": "991", "2": "1,0,4", "3": "4", "4": "7", "5": "15", "6": "0", "7": "3.6", "8": "650", "9": "1", "10": "2", "11": "555681", "12": "1,92,2000.", "13": "140", "14": "2", "15": "476", "16": "4x - 9y", "17": "4", "18": "3/7", "19": "1/2", "20": "2/3", "21": "", "22": "", "23": "", "24": "", "25": ""}, "HCF and LCM_Level_1_Test 1": {"1": "156", "2": "15", "3": "14 litres", "4": "2, 3, 5, 11", "5": "504", "6": "757", "7": "4", "8": "110", "9": "10", "10": "576", "11": "2x3x13x13", "12": "4", "13": "2", "14": "3/20", "15": "9240, 840", "16": "458", "17": "99", "18": "4", "19": "11774", "20": "23", "21": "", "22": "", "23": "", "24": "", "25": ""}, "HCF and LCM_Level_1_Test 2": {"1": "9240, 840", "2": "458", "3": "156", "4": "2", "5": "4200", "6": "213", "7": "2/63", "8": "84,96", "9": "29,145", "10": "34cm", "11": "2", "12": "216", "13": "3600", "14": "11cm", "15": "220", "16": "9828", "17": "720", "18": "23", "19": "14", "20": "713", "21": "", "22": "", "23": "", "24": "", "25": ""}, "HCF and LCM_Level_1_Test 3": {"1": "2, 3, 5, 11", "2": "99", "3": "4", "4": "144/5", "5": "12/1350", "6": "13", "7": "155", "8": "1/100", "9": "296, 148", "10": "505", "11": "1683", "12": "1078", "13": "1:63", "14": "14496", "15": "5", "16": "7", "17": "120", "18": "29", "19": "6", "20": "182", "21": "", "22": "", "23": "", "24": "", "25": ""}, "HCF and LCM_Level_2_Test 1": {"1": "B) 7", "2": "1240", "3": "119", "4": "962", "5": "420", "6": "24", "7": "b. 253", "8": "d. 99", "9": "7", "10": "1240", "11": "119", "12": "120 and 130", "13": "120", "14": "5346", "15": "10", "16": "1475/126", "17": "132", "18": "12", "19": "40", "20": "11/120", "21": "", "22": "", "23": "", "24": "", "25": ""}, "HCF and LCM_Level_3_Test 1": {"1": "27, 189", "2": "12 minutes", "3": "-56", "4": "10080", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Percentage_Level_1_Test_1": {"1": "16", "2": "23.07%", "3": "5000", "4": "150", "5": "16 2/3", "6": "Rs. 800", "7": "28.15%", "8": "2,300", "9": "loss of 15.52%", "10": "20%", "11": "3/ 25.", "12": "70%.", "13": "116656", "14": "260100", "15": "795", "16": "1054", "17": "Rs. 7000", "18": "13800", "19": "8", "20": "20%", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Percentage_Level_1_Test_2": {"1": "116656", "2": "260100", "3": "120", "4": "23.07%", "5": "3.27% gain", "6": "5000", "7": "150", "8": "3.20% gain", "9": "80%", "10": "5:4", "11": "0.49% decrease", "12": "78%", "13": "63.60%", "14": "33 1/3%", "15": "16800", "16": "854", "17": "Rs.6814", "18": "8", "19": "300%", "20": "400", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Percentage_Level_2_Test_1": {"1": "1.52%", "2": "44%", "3": "900%", "4": "Decreased by 10 percent", "5": "650", "6": "5", "7": "45 5/11%", "8": "42, 33", "9": "0.1", "10": "16", "11": "Rs 38,100", "12": "16", "13": "Rs. 4,54,410", "14": "Rs. 3,09,825", "15": "75%", "16": "27.75% decrease", "17": "", "18": "", "19": "", "20": "", "21": ""}, "Percentage_Lvel_2_Test_2": {"1": "53", "2": "3/25", "3": "40", "4": "53", "5": "0.1", "6": "16%", "7": "7500", "8": "44%", "9": "900%", "10": "650", "11": "18 B = 25 C", "12": "75%", "13": "decreases by 4%", "14": "27.75% decrease", "15": "14.26%", "16": "60%", "17": "8%", "18": "600", "19": "25%", "20": "67%", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Profit_Loss_Level_1_Test 1": {"1": "Rs.900", "2": "176.90", "3": "Rs.1850", "4": "0.25", "5": "22.65%", "6": "Rs.13,800", "7": "Rs. 5000", "8": "0.25", "9": "Rs.40", "10": "Rs.450", "11": "3) 10000", "12": "B. Rs.605", "13": "A. 49. 67%", "14": "C. 0.2", "15": "10", "16": "Rs. 750", "17": "0.14", "18": "Rs 350", "19": "Rs. 6,75,000", "20": "Rs. 1", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Profit_Loss_Level_1_Test_2": {"1": "0.2", "2": "33% profit", "3": "22.22%", "4": "900", "5": "28.09%", "6": "26", "7": "rs.900", "8": "3.27% gain", "9": "Rs.10", "10": "20%", "11": "102", "12": "229.50", "13": "gain1.60", "14": "10%decrese", "15": "200", "16": "0.2", "17": "0%", "18": "300", "19": "6", "20": "150", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Profit_Loss_Level_1_Test_3": {"1": "33% profit", "2": "22.22%", "3": "900", "4": "", "5": "", "6": "", "7": "", "8": ""}, "Profit_Loss_Level_3_Test 1": {"1": "B. 20:3", "2": "b) 25.0", "3": "c) 550.0", "4": "", "5": "", "6": "", "7": "", "8": ""}, "Profit_Loss_Level_1_Test_4": {"1": "176.90", "2": "Rs. 5,000", "3": "20", "4": "25", "5": "0.2", "6": "49.67%", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Profit_Loss_Level_2_Test_1": {"1": "10% gain", "2": "4% loss", "3": "D. 2.4", "4": "23", "5": "13.33%", "6": "14% gain", "7": "15", "8": "40", "9": "Rs 36960", "10": "8", "11": "Rs.10", "12": "Rs.1400", "13": "6 (1/4)%", "14": "25", "15": "profit 5%", "16": "5% loss", "17": "833 1/3 grams", "18": "11 1/9%", "19": "120", "20": "c", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Profit_Loss_Level_2_Test_2": {"1": "", "2": "rs 600", "3": "16 : 13", "4": "350", "5": "5940", "6": "8 : 11", "7": "Rs. 1.5", "8": "4% loss", "9": "10% gain", "10": "2.4", "11": "Rs.1400", "12": "500", "13": "23.53%", "14": "36960", "15": "6 1/4", "16": "Rs. 1.5", "17": "13.33%", "18": "Rs. 70,000", "19": "0.2632% profit", "20": "16.65%", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Simple Interest and Compound Interest_Level_1_Test 1": {"1": "Rs.1,34,316", "2": "Rs. 1,250", "3": "Rs. 5,000", "4": "Rs. 8000", "5": "22%", "6": "b\u00b2 = ac", "7": "13.33%", "8": "Rs. 605", "9": "\u221a(bc)", "10": "5187.50", "11": "15%", "12": "", "13": "", "14": "", "15": "", "16": ""}, "Simple Interest and Compound Interest_Level_2_Test 1": {"1": "12.5", "2": "3075", "3": "Rs.50000", "4": "250", "5": "1240", "6": "2500", "7": "180000", "8": "3870", "9": "12", "10": "6205", "11": "10%", "12": "1089", "13": "61051", "14": "3000", "15": "20.82", "16": "875", "17": "15%", "18": "", "19": "", "20": "", "21": "", "22": ""}, "Simple Interest and Compound Interest_Level_2_Test 2": {"1": "5.2%", "2": "875", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Time and Work_Level_1_Test 2": {"1": "Less than", "2": "About 22 minutes", "3": "Rs. 342.85", "4": "7 times", "5": "3", "6": "3", "7": "About 22 minutes", "8": "21", "9": "22(2/3)", "10": "7.5", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Time and Work_Level_1_Test 1": {"1": "45", "2": "20", "3": "10", "4": "3", "5": "15", "6": "Rs. 350", "7": "Jagdish and Sumit", "8": "14", "9": "8 hours 15 minutes", "10": "Less than", "11": "About 22 minutes", "12": "10 days", "13": "60, 120, 40", "14": "10", "15": "1:1", "16": "30", "17": "14.33 days", "18": "3.73", "19": "21", "20": "10", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Time and Work_Level_2_Test 1": {"1": "40", "2": "16", "3": "75", "4": "10 days", "5": "D) 9", "6": "7 days.", "7": "6(2/3) days", "8": "15", "9": "3 days", "10": "1:4", "11": "4", "12": "150 days", "13": "120 days", "14": "120 days", "15": "6(2/3) days", "16": "4", "17": "24", "18": "10", "19": "4", "20": "45 days", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Time and Work_Level_2_Test 2": {"1": "20 days", "2": "", "3": "2", "4": "12 days", "5": "40", "6": "75%", "7": "5:4", "8": "16 DAYS", "9": "22", "10": "6 DAYS", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pipes and Cistern_Level_1_Test 1": {"1": "120 gallons", "2": "6/11", "3": "3 9/17hours", "4": "14 hours", "5": "9 min.", "6": "15 hours", "7": "35 hours", "8": "6 hours", "9": "12 min", "10": "14 min. 40 sec.", "11": "144 min.", "12": "30 min", "13": "3 hrs 45 min", "14": "7 hours", "15": "14", "16": "2 hour 12 minutes", "17": "42 hours", "18": "6", "19": "24 hours", "20": "Never be filled", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Pipes and Cistern_Level_1_Test 2": {"1": "(9,12)", "2": "5 5/11 minutes", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Pipes and Cistern_Level_2_Test 1": {"1": "8.50 am", "2": "44", "3": "51 3/7", "4": "4.5", "5": "49 1/2", "6": "4.8", "7": "3:5", "8": "30 hours", "9": "", "10": "", "11": "", "12": "", "13": ""}, "Time_Speed_Distance_Level_3_Test_1": {"1": "240 km/hr", "2": "0", "3": "36m", "4": "1320.", "5": "Between I and J, closer to J", "6": "230.", "7": "33.33%.", "8": "6 km", "9": "A) 20.52 min", "10": "", "11": "", "12": "", "13": "", "14": ""}, "Time_Speed_Distance_Level_1_Test_1": {"1": "60 m/s", "2": "9:5", "3": "72 seconds", "4": "75 minutes", "5": "75 km", "6": "6 m", "7": "-2 m/s^2", "8": "8.30 pm", "9": "5 miles", "10": "165 min", "11": "9 km", "12": "32 km", "13": "48.72 km/hr", "14": "300 km", "15": "24", "16": "6 : 1", "17": "15 min", "18": "7.5 km", "19": "3", "20": "12 m/s", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Time_Speed_Distance_Level_2_Test_1": {"1": "1.8", "2": "1 hr 15 min", "3": "10", "4": "240 km", "5": "19", "6": "4", "7": "22.857 kmph", "8": "7 times", "9": "30", "10": "30Km", "11": "12 km", "12": "12", "13": "11X/Y", "14": "d", "15": "8", "16": "18 min", "17": "8.30p.m", "18": "26.250 kmph", "19": "1.8", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Problems on Trains_Level_1_test 1": {"1": "105 kmph", "2": "5:4", "3": "2 hours", "4": "75 km", "5": "1:00 pm", "6": "630m", "7": "7:56 a:m", "8": "7.4", "9": "112.5m", "10": "160m", "11": "160", "12": "245", "13": "3:2", "14": "300", "15": "89", "16": "3000 m", "17": "5:36 PM", "18": "400 km", "19": "11:00 AM", "20": "3:2", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Problems on Trains_Level_1_test 2": {"1": "105 kmph", "2": "840 m", "3": "2 hours", "4": "3000 m", "5": "2 hours", "6": "", "7": "", "8": "", "9": "", "10": ""}, "Problems on Trains_Level_2_test 1": {"1": "4.4", "2": "40sec", "3": "60km/hr", "4": "82km/hr", "5": "50kmph", "6": "4:36 PM", "7": "7.4", "8": "1 minute 6 seconds", "9": "300", "10": "4:36 PM", "11": "5:6", "12": "4500", "13": "3:2", "14": "120", "15": "1450 km", "16": "34", "17": "78", "18": "270", "19": "480 km", "20": "307.25km", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Boats and Streams_Level_1_test 2": {"1": "5mph", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Boats and Streams_Level_2_test 1": {"1": "-2 m/s^2", "2": "3:1", "3": "24", "4": "10 kmph", "5": "24", "6": "4.5 km", "7": "14 1/2", "8": "10 km/hr", "9": "5:3", "10": "3 h 12 min", "11": "22 km/hr", "12": "2 km/hr", "13": "2.4 hrs", "14": "", "15": "", "16": "", "17": "", "18": ""}, "Averages_Level_3_Test 1": {"1": "45", "2": "7500", "3": "(30,20)", "4": "-0.5", "5": "C", "6": "B. 4000", "7": "c. Rs 100 /-", "8": "d. 120 years", "9": "d. Rs. 40000", "10": "c. 25 years", "11": "6", "12": "C)85", "13": "C) 40", "14": "B)6 Years", "15": "B)30", "16": "A) 30", "17": "290", "18": "45", "19": "180", "20": "46200", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Averages_Level_2_Test 1": {"1": "80", "2": "45.04", "3": "48", "4": "40.5", "5": "4(1/18)", "6": "42.5", "7": "152", "8": "90", "9": "92", "10": "4800", "11": "84", "12": "9.367", "13": "68", "14": "250", "15": "5", "16": "90", "17": "", "18": "", "19": "", "20": "", "21": ""}, "Permutation and Combination_Level_2_test 1": {"1": "200", "2": "4320", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Permutation and Combination_Level_1_test 1": {"1": "72", "2": "600", "3": "10", "4": "120 ways", "5": "24", "6": "13C6", "7": "840", "8": "(3c1)^6", "9": "26!", "10": "74", "11": "1440", "12": "2300", "13": "720", "14": "1080", "15": "56", "16": "280.", "17": "18! x 2!", "18": "11! / [(2!)^2 * 3!]", "19": "1260.", "20": "210", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Permutation_Combination_Level_1_Test_2": {"1": "24,4", "2": "119988", "3": "5040", "4": "0", "5": "26^4*21", "6": "20", "7": "60", "8": "720", "9": "10", "10": "1365", "11": "[7! * 5! * 3! * 2! ]* 4!", "12": "24, 4", "13": "", "14": "", "15": "", "16": "", "17": ""}, "Permutation_and_Combination_Level_1_Test_3": {"1": "24", "2": "8C4 x 8C4 + 8C5 x 8C3 + 8C6 x 8C2 + 8C7 x 8C1 + 8C8", "3": "72", "4": "13^2*50C2", "5": "34", "6": "18! * 1440.", "7": "108", "8": "72 ways.", "9": "18 * 19!", "10": "100.", "11": "31.", "12": "14.", "13": "32.", "14": "64.", "15": "12", "16": "", "17": "", "18": "", "19": "", "20": ""}, "Permutation_and_Combination_Level_3_Test_1": {"1": "1440", "2": "11.", "3": "120960", "4": "25200", "5": "4!*5!", "6": "272160.0", "7": "2(15!/10!)", "8": "210", "9": "10!-7!*4!", "10": "", "11": "", "12": "", "13": "", "14": ""}, "Permutation_and_Combination_Level_2_Test_2": {"1": "24", "2": "3", "3": "66", "4": "5050", "5": "3600", "6": "40, 45", "7": "200", "8": "6720", "9": "630", "10": "51", "11": "455", "12": "462", "13": "2880", "14": "25", "15": "756", "16": "70", "17": "23", "18": "1680", "19": "485", "20": "b", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Permutation_Combination_Level_1_Test_4": {"1": "20", "2": "2880", "3": "720", "4": "20", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Probability_Level_1_test 1": {"1": "1/12", "2": "5/9", "3": "3/15", "4": "1/5", "5": "((0.8)^10)* ((0.7)^15)", "6": "2/7", "7": "2/7", "8": "1/3", "9": "0", "10": "x/(x+y)", "11": "1/5", "12": "1/3", "13": "1/2", "14": "1/15", "15": "1/(2^20)", "16": "27/ 216.", "17": "11/ 50.", "18": "30/61, 31/61.", "19": "19/21", "20": "1/33.", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Probability_Level_1_test 2": {"1": "1/ 10.", "2": "5/9", "3": "1/32.", "4": "0.", "5": "23/56", "6": "8", "7": "6", "8": "1/1000", "9": "18! *1440", "10": "3/4", "11": "7/15", "12": "55/221", "13": "2/7", "14": "1/9", "15": "1/2", "16": "", "17": "", "18": "", "19": "", "20": ""}, "Probability_Level_1_test 3": {"1": "19/21", "2": "316/435", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Probability_Level_3_test 1": {"1": "0.", "2": "19/ 64.", "3": "1/33", "4": "1 is to 17", "5": "5/9", "6": "1/32.", "7": "3/4", "8": "2/5", "9": "21/46", "10": "1/26", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Probability_Level_2_test 1": {"1": "1/8", "2": "19/90", "3": "32/55", "4": "1/3", "5": "2/5", "6": "24/29", "7": "2/49", "8": "3/14", "9": "1/18", "10": "0.0103", "11": "1/8", "12": "", "13": "", "14": "", "15": "", "16": ""}, "Logarithm_Level_1_test 1": {"1": "-(a+1)", "2": "1000/301", "3": "1.9030", "4": "x=3", "5": "1", "6": "20", "7": "256/81", "8": "log a = ylog b/x", "9": "2^1000", "10": "4", "11": "3.876", "12": "log (2 + 3) = log (2 x 3)", "13": "d)    1.9", "14": "b)    50", "15": "d)    None of these", "16": "a)    x=-27 and 3", "17": "a)    a^2+b^2 = 7ab", "18": "d)    z will grow linearly, while y will not", "19": "a)    12", "20": "a < b", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Logarithm_Level_2_test 1": {"1": "none of them", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Problems on Ages_Level_1_test 1": {"1": "18", "2": "18", "3": "61", "4": "53", "5": "44", "6": "4 more than four times Raju\u2019s age", "7": "98", "8": "d-16 m-32", "9": "2", "10": "None Of the above", "11": "7", "12": "f=30, s=10", "13": "3", "14": "16", "15": "22", "16": "12 and 18", "17": "28 and 20", "18": "10", "19": "22", "20": "16", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Problems on Ages_Level_1_test 2": {"1": "50", "2": "50", "3": "18 years", "4": "50", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Problems on Ages_Level_2_test 1": {"1": "14:16:19", "2": "45 years", "3": "61.", "4": "36", "5": "92", "6": "45", "7": "17 years", "8": "13:15", "9": "40", "10": "62", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Partnership_Level_1_test 1": {"1": "4", "2": "Rs. 1500", "3": "Rs. 2660", "4": "Rs. 4000", "5": "Rs. 14,700", "6": "20 : 49 : 64", "7": "Rs. 9000", "8": "Rs. 330", "9": "6 : 10 : 5", "10": "Rs. 45", "11": "8 months", "12": "12 : 15 : 16", "13": "Rs. 890", "14": "Rs. 10,500", "15": "Rs. 500", "16": "Rs. 4000", "17": "144", "18": "3600", "19": "Ram - Rs. 800, Raj - Rs. 900, Rakesh - Rs. 840", "20": "Rs. 1,80,000", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Partnership_Level_3_test 1": {"1": "4", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Partnership_Level_2_test 1": {"1": "360000", "2": "5500", "3": "35000", "4": "141.1", "5": "8400", "6": "\u20b9 7500", "7": "\u20b9 2300", "8": "None of the above", "9": "\u20b9 6000", "10": "Rs. 4000", "11": "Rs. 500", "12": "8 months", "13": "\u20b9 6400", "14": "Ram - Rs. 800, Raj - Rs. 900, Rakesh - Rs. 840", "15": "360", "16": "3 months", "17": "\u20b9 4000", "18": "3600", "19": "5600", "20": "\u20b9 3937", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Algebra_Level_2_test 1": {"1": "4", "2": "1/225", "3": "1", "4": "5(11/20)", "5": "y >-1", "6": "a", "7": "5x-4y =22", "8": "y= 2/3x+5", "9": "36", "10": "2 1/3", "11": "13", "12": "3root3", "13": "", "14": "", "15": "", "16": "", "17": ""}, "Clocks_Level_1_test 1": {"1": "180\u00b0", "2": "155\u00b0", "3": "197 1/2\u00b0", "4": "4 p.m.", "5": "32 8/11min.", "6": "5 5/11 min. past 7", "7": "43 7/11min. past 5", "8": "10\u00b0", "9": "67 1/2\u00b0", "10": "130\u00b0", "11": "44", "12": "75\u00b0", "13": "22", "14": "54 6/11min. past 4", "15": "491/11min. past 9", "16": "16 4/11\"", "17": "11", "18": "44", "19": "2 p.m. on Wednesday", "20": "2 : 36 am on Thursday", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Calendar_Level_1_test 1": {"1": "1999.", "2": "Sunday", "3": "4th, 11th, 18th, 25th", "4": "Tuesday", "5": "Sunday", "6": "2007", "7": "Friday", "8": "Thursday", "9": "Tuesday", "10": "Friday", "11": "Sunday", "12": "Wednesday", "13": "Sunday", "14": "Saturday", "15": "Wednesday", "16": "Monday", "17": "Wednesday", "18": "Thursday", "19": "8X", "20": "8", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Heights and distance_Level_1_test 1": {"1": "16m.", "2": "30\u00b0.", "3": "273 m", "4": "Data inadequate", "5": "9.2 m", "6": "21.6 m", "7": "173 m", "8": "30\u00b0", "9": "16 m/sec", "10": "7.5 min", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Heights and distance_Level_2_test 1": {"1": "24", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Surds and Indices_Level_1_test 1": {"1": "iv.", "2": "2", "3": "-1", "4": "None", "5": "a^7", "6": "X=12\u221a625", "7": "19", "8": "10000", "9": "4", "10": "13", "11": "125", "12": "1000", "13": "4.5", "14": "2.9", "15": "25", "16": "4", "17": "2", "18": "1", "19": "\u00b12", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Surds and Indices_Level_1_test 2": {"1": "12(21)^1/2", "2": "10\u221a10", "3": "4096", "4": "3/4", "5": "1", "6": "625", "7": "24.5", "8": "None of the above", "9": "1/2", "10": "", "11": "", "12": "", "13": "", "14": ""}, "Races and Games_Level_1_test 1": {"1": "8, 10.", "2": "100 sec.", "3": "2480", "4": "25 m", "5": "20 m", "6": "10 points", "7": "33 sec", "8": "100 m", "9": "80 sec", "10": "200 m", "11": "28 m", "12": "20 m", "13": "4.14 kmph", "14": "20 m", "15": "6 m", "16": "10 points", "17": "77 1/3 m", "18": "4.5 km/hr", "19": "Thrice", "20": "chinmay, 1/16 mile", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Chain Rule_Level_1_test 1": {"1": "12", "2": "Rs(yd/x)", "3": "1800", "4": "42", "5": "13", "6": "6", "7": "48 paise", "8": "40", "9": "9", "10": "7", "11": "12.5 m", "12": "30", "13": "195", "14": "24", "15": "16", "16": "300", "17": "45 days", "18": "25 m", "19": "45.61 sec", "20": "22", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Chain Rule_Level_1_test 2": {"1": "14", "2": "45", "3": "10", "4": "3", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Sequence and Series_Level_1_test 1": {"1": "71", "2": "149", "3": "149", "4": "28", "5": "41", "6": "20", "7": "100", "8": "13", "9": "15", "10": "61", "11": "181", "12": "1944", "13": "13", "14": "1440", "15": "143", "16": "43", "17": "149", "18": "1944", "19": "350", "20": "30", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Trigonometry_Level_1_test 1": {"1": "60.", "2": "b.", "3": "-1.", "4": "Sin 26\u00b0", "5": "0", "6": "1", "7": "1", "8": "0", "9": "x", "10": "root 2", "11": "135\u00b0", "12": "1", "13": "8/15", "14": "14/15", "15": "2", "16": "2 + \u221a3", "17": "(2 + \u221a3)/2\u221a3", "18": "17/15", "19": "0", "20": "42", "21": "P^2 + Q^2 = P^2*Q^2", "22": "", "23": "", "24": "", "25": "", "26": ""}, "Mixture and Alligation_Level_1_test 1": {"1": "50", "2": "Rs.3.00", "3": "29/ 73.", "4": "6 L", "5": "(9,12)", "6": "1 gallon", "7": "200 litres", "8": "12", "9": "27%", "10": "18 : 2", "11": "21", "12": "1/12", "13": "10:17", "14": "316", "15": "24 lit", "16": "24 kg", "17": "28 kg", "18": "54.25 Rs", "19": "20 kg", "20": "20 L", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Mixture and Alligation_Level_1_test 2": {"1": "Rs.3.00", "2": "Rs.1850", "3": "22%", "4": "22%", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Mixture and Alligation_Level_3_test 1": {"1": "50 litres.", "2": "12 percent", "3": "B.50 litres", "4": "4:1", "5": "Rs. 18 per kg", "6": "600 kg", "7": "50 kg", "8": "a)12 percent", "9": "", "10": "", "11": "", "12": "", "13": ""}, "Mixture and Alligation_Level_2_test 1": {"1": "48(A), 72(B)", "2": "1: 1\\r\\n\\r\\n", "3": "391:239 \\r\\n\\r\\n", "4": "316\\r\\n", "5": "Rs.0.75 \\r\\n", "6": "1/135", "7": "2:3", "8": "250ml", "9": "48(A), 72(B)", "10": "580", "11": "1:1", "12": "391:239", "13": "59 kg", "14": "7:18", "15": "24%", "16": "9/16", "17": "1/135", "18": "690 litres", "19": "28", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Mensuration_Level_1_test 1": {"1": "1260cm2", "2": "8 cm2", "3": "7\u221a3 cm2", "4": "2 \u03c0 /3", "5": "8 cm2", "6": "31/16 a^2", "7": "3(2+\u221a3)R", "8": "64 cm", "9": "120\u221a3 cm2", "10": "176", "11": "(2+3\u221a2)", "12": "20 cm3", "13": "2304 pi cu. ft", "14": "132 cm2", "15": "28.73 cm2", "16": "82 cm", "17": "Isosceles triangle", "18": "66 sq cm", "19": "25 m", "20": "30.54 cu cm", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Mensuration_Level_3_test 1": {"1": "14.", "2": "2880.0", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Mensuration_Level_2_test 1": {"1": "60", "2": "1.2", "3": "B) 2.45", "4": "247", "5": "Cube root of 3", "6": "2", "7": "3542 cm2", "8": "21", "9": "144 m", "10": "10 m", "11": "22cm", "12": "90", "13": "12", "14": "2816 cm^2", "15": "450", "16": "999.39 kg", "17": "34", "18": "c", "19": "d", "20": "Decrease by 30%", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Mensuration_Level_2_test 2": {"1": "1016.14", "2": "b", "3": "1065", "4": "136 m2", "5": "1:27", "6": "136 m^2", "7": "144 m", "8": "60", "9": "2.4", "10": "2.45", "11": "83.39 cm", "12": "15 cm", "13": "247", "14": "cube root 3", "15": "2", "16": "1 hr 15 min", "17": "1.2", "18": "15 cm", "19": "r<s", "20": "4.32", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Geometry_Level_1_test 1": {"1": "27", "2": "y= 2/3x+5", "3": "none of (a,(b,(c)", "4": "x + 8y + 4 = 0", "5": "720\u00b0", "6": "(A)", "7": "(D)", "8": "(C)", "9": "5x-4y =22", "10": "3x-2y+1=0", "11": "4 and 3", "12": "3x+y-17=0", "13": "5x-2y+13=0", "14": "x-y=3", "15": "both (a) and (b)", "16": "3x+2y=6", "17": "28 and 15", "18": "172\u00b0", "19": "18", "20": "3/2", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Geometry_Level_1_test 2": {"1": "6", "2": "6 cm", "3": "(7/2, 13/2) or (-3/2, 3/2)", "4": "2:1:3", "5": "Equilateral triangle", "6": "40o", "7": "Sq rt(w^2-3y^2)", "8": "38.5 sq.cm", "9": "50", "10": "10 sides", "11": "3", "12": "20.5", "13": "50x(sqrt(3)+4", "14": "29 ft", "15": "50% of the size of the original square", "16": "(s \u2013 a) (s \u2013 b) < s (s \u2013 c)", "17": "lw/2", "18": "138\u00b0", "19": "1:8", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Ratio and Proportion_Level_1_Test 2": {"1": "2 : 3 : 4", "2": "B. 300", "3": "D.Rs. 204", "4": "C.23 : 33 : 60", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Ratio and Proportion_Level_1_Test 1": {"1": "$192", "2": "90 beats per minute", "3": "50", "4": "10", "5": "50", "6": "1 kg", "7": "24", "8": "B.Rs. 484", "9": "4 : 5", "10": "Rs. 2000", "11": "D.Rs. 38,000", "12": "A.60 Litres", "13": "D. 36", "14": "C.21 : 22", "15": "B.1.2", "16": "24", "17": "C. 5 : 3", "18": "30", "19": "150", "20": "33", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Ratio and Proportion_Level_3_Test 1": {"1": "40", "2": "20:3", "3": "21:20", "4": "2:3", "5": "7000", "6": "76", "7": "12", "8": "6000", "9": "108", "10": "192", "11": "27", "12": "50", "13": "D. 36", "14": "B.1.2", "15": "C.21 : 22", "16": "C. 5 : 3", "17": "30", "18": "16,24,32", "19": "162,108,72", "20": "200,300,400", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Ratio and Proportion_Level_2_Test 1": {"1": "180000", "2": "40", "3": "8:12:15\\r\\n", "4": "25020", "5": "5000", "6": "14 \\r\\n\\r\\n", "7": "5:4", "8": "104:230:625 \\r\\n", "9": "120", "10": "7:8:15", "11": "5:8", "12": "b", "13": "156", "14": "243000", "15": "7000", "16": "11", "17": "5400,7500", "18": "7000", "19": "2:3", "20": "21:20", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Equations level-2_test_1": {"1": "4", "2": "(- \u221e, 1/3][-1/27,\u221e)", "3": "x+y+3=0", "4": "p=1 or 0", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Equations level-1_test_1": {"1": "2m = a + b + c", "2": "21.14", "3": "0", "4": "x2 - 13x - 140 = 0", "5": "x2 - 4x + 4 = 0", "6": "20", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Statistics_level_2_test_1": {"1": "9", "2": "S = R/2", "3": "1.41", "4": "12.0", "5": "7.0", "6": "8", "7": "14", "8": "8", "9": "2 sqrt(21)", "10": "16", "11": "4600", "12": "63", "13": "33.571", "14": "31", "15": "S = R/2", "16": "6.4%", "17": "8750000", "18": "13.71", "19": "10", "20": "33.33%", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Statistcs_level_1_test 1": {"1": "23", "2": "75.83", "3": "41", "4": "3.94", "5": "49.4", "6": "mean and median", "7": "40", "8": "C", "9": "35", "10": "A is more consistent than B", "11": "15", "12": "37.75", "13": "34.6", "14": "33.33", "15": "16.3", "16": "28.88", "17": "5.2", "18": "-1", "19": "4", "20": "172", "21": "", "22": "", "23": "", "24": "", "25": ""}, "True Discount_level_2_test_1": {"1": "5940", "2": "8 : 11", "3": "", "4": "", "5": "", "6": "", "7": ""}, "True Discount_level_1_test_1": {"1": "1680", "2": "108", "3": "768", "4": "15%", "5": "10MONTHS", "6": "1764", "7": "14%", "8": "1360", "9": "18.33", "10": "` 12,000 in cash", "11": "1325", "12": "9200", "13": "GAIN RS.50", "14": "0%", "15": "B, ` 50", "16": "A gains ` 7.34", "17": "` 10.40", "18": "12 1/2 %", "19": "` 10.40", "20": "8 MONTHS", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Puzzle_Level_3_Test 1": {"1": "D teaches Verbal", "2": "David, Brody, Fabia, Gavin, Avery, Elsa, Cade", "3": "France and South Africa", "4": "David climbs first.", "5": "Red colour pencil, Yellow colour pencil", "6": "3", "7": "Keyboard", "8": "Siddu and Shahbaaz get same number of colour pencils", "9": "Paul", "10": "Siddu gets exactly three colour pencils", "11": "Siddu does not get Yellow colour pencil", "12": "40 SOCKS", "13": "FRIDAY", "14": "THURSDAY", "15": "15 mins", "16": "11", "17": "5 mins", "18": "2 Out of 3", "19": "Black", "20": "O", "21": "", "22": "", "23": "", "24": "", "25": ""}, "number puzzle_level_2_test 1": {"1": "13", "2": "63", "3": "43", "4": "63", "5": "7", "6": "45", "7": "6", "8": "26", "9": "", "10": "", "11": "", "12": "", "13": ""}, "character puzzle_level_2_test 1": {"1": "R", "2": "18", "3": "46", "4": "125", "5": "2", "6": "9", "7": "6", "8": "11", "9": "108", "10": "37", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Data Sufficiency_Level_3_Test 1": {"1": "D", "2": "C", "3": "E", "4": "E", "5": "B", "6": "B", "7": "C", "8": "D", "9": "D", "10": "A", "11": "E", "12": "I and II together or I and III together", "13": "I, II, and III required", "14": "C", "15": "I, II, III together are not sufficient", "16": "E", "17": "C", "18": "C", "19": "Question can\u2019t be answered even with the help of all three statements", "20": "D", "21": "d", "22": "b", "23": "C", "24": "A", "25": "", "26": "", "27": "", "28": "", "29": ""}, "Data Sufficiency_Level_1_Test 1": {"1": "Both the statements even put together are not sufficient.", "2": "Both I and II together are sufficient", "3": "Both statements put together are sufficient", "4": "Both I and II together are sufficient", "5": "", "6": "Statement I alone is sufficient", "7": "Both the statements put together are sufficient", "8": "I alone is sufficient while II alone is not sufficient", "9": "Statement II alone is sufficient in answering the problem question", "10": "Both statements put together are sufficient.", "11": "Both the statements even put together are not sufficient.", "12": "Both the statements even put together are not sufficient in answering the problem question", "13": "Both the statements put together are sufficient in answering the problem question", "14": "Both the statements even put together are not sufficient.", "15": "Both the statements put together are sufficient.", "16": "Both the statements even put together are not sufficient.", "17": "Statement I alone is sufficient.", "18": "Both the statements even put together are not sufficient in answering the problem question.", "19": "Either of the statements is sufficient in answering the problem question.", "20": "Statement I alone is sufficient", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Data Sufficiency_Level_2_Test 1": {"1": "Statement I alone is sufficient.", "2": "Statement I alone if sufficient", "3": "D", "4": "If the data either in statement I alone or in statement II alone is sufficient to answer the question.", "5": "Statements 1 and 2 are not sufficient to answer the question asked and additional data is needed to answer the statements", "6": "Each statement alone is sufficient to answer the question.", "7": "Each statement alone is sufficient to answer the question.", "8": "Both the statements I and II together are necessary", "9": "Statement II alone is sufficient", "10": "both statements I and II together are necessary.", "11": "The combination of both the statements I and II are necessary.", "12": "Both statements I and II are necessary", "13": "Statement II alone is sufficient", "14": "The combination of the statements I and II are necessary", "15": "Both statements put together are not sufficient in answering the problem question.", "16": "The data in both statements l and ll is insufficient to answer the question", "17": "D", "18": "D", "19": "The combination of both the statements I and II are necessary", "20": "The combination of both the statement are necessary", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Data Sufficiency_Level_2_Test 2": {"1": "Both statements I and II are together sufficient", "2": "The data of both statements I alone and statement II alone are sufficient to answer the questions", "3": "Neither statement 1 nor statement 2 is sufficient", "4": "D", "5": "A", "6": "Neither statement 1 nor statement 2 is sufficient", "7": "Data is sufficient for both Statement 1 and 2", "8": "Both statements 1 and 2 are required", "9": "The combination of both the statement are necessary", "10": "", "11": "Both the statement I and II together are not sufficient", "12": "The combination of both the statements I and II are necessary", "13": "The data of both statements I alone and statement II alone are sufficient to answer the questions", "14": "", "15": "\u2022 The combination of both statements I and II are necessary", "16": "Statement I alone is sufficient.", "17": "Statement I alone if sufficient", "18": "D", "19": "Statement l alone is sufficient.", "20": "The question can be answered with the help of both the statements together.", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Data Sufficiency_level_3_test_2": {"1": "C", "2": "The question cannot be answered with the information provided.", "3": "The question can be answered with the help of both the statements together.", "4": "The question can be answered with the help of either of statements.", "5": "The question can be answered with the help of any one statement but not both.", "6": "The question can be answered with the help of both the statement together", "7": "c)the question cannot be answered with the information provided.", "8": "the question can be answered with the help of both the statements together.", "9": "the question cannot be answered with the information provided.", "10": "a)the question can be answered with the help of both the statements together.", "11": "1. The question can be answered with the help of any one statement but not both.", "12": "The question cannot be answered with the information provided.", "13": "The question can be answered with the help of both the statements together.", "14": "C", "15": "The question can be answered with the help of any one statement but not both", "16": "The question can be answered with the help of both the statements together", "17": "", "18": "", "19": "", "20": "", "21": ""}, "Syllogisms_Level_2_Test 1": {"1": "Only III", "2": "Neither (1) nor(2) follows", "3": "I and II and either III or IV follows", "4": "I and III follows", "5": "II and III", "6": "I and III", "7": "Only I follows", "8": "Only II and IV follows", "9": "Only (1) conclusion follows", "10": "Only II and III follow", "11": "I and either III or IV follows", "12": "None of these", "13": "I, II and III follows", "14": "II and IV follows", "15": "I, IV and either II or III follow", "16": "CAD", "17": "II and III", "18": "FAD", "19": "None of these", "20": "I and either II or III follows", "21": "", "22": "", "23": "", "24": "", "25": ""}, "syllogism_level_1_test 1": {"1": "Only conclusions I & III follows.", "2": "Only III follows", "3": "Only conclusion II follows", "4": "Only conclusion I and III follow", "5": "Only conclusion I follow.", "6": "Only conclusion I and II follow", "7": "Only conclusion II follows", "8": "Only conclusion I & III follows.", "9": "If only conclusion II follows.", "10": "If only conclusion II follows.", "11": "Only I and II follow", "12": "Only either I or II follows", "13": "None follows", "14": "All gems being stones is a possibility.", "15": "If only conclusions II follows.", "16": "Only Statements \u2013 III", "17": "Only Statements \u2013 V", "18": "All chairs are covers.", "19": "None of these", "20": "Only I follows", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Syllogism_Level_3_Test_1": {"1": "ACE", "2": "I and either Ill or IV follows", "3": "I and III follows", "4": "I, II and III follow", "5": "Only Ill", "6": "All follows", "7": "All follow", "8": "D) I and II follows", "9": "A", "10": "B and C", "11": "CDB", "12": "If I and III follows", "13": "If conclusion I and II follows", "14": "I and either Ill or IV follows", "15": "I and III follows", "16": "CDB", "17": "CDA", "18": "ABE", "19": "ABF", "20": "Only I & II follow", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Assertion and Reason_Level_1_Test 1": {"1": "Both A and R are false.", "2": "Both A and R are true and R is the correct explanation of A.", "3": "Both A and R are true and R is the correct explanation of A", "4": "Both A and R are true and R is the correct explanation of A.", "5": "Both A and R are true but R is NOT the correct explanation of A.", "6": "A is true but R is false.", "7": "Both A and R are true and R is the correct explanation of A.", "8": "A is false but R is true.", "9": "Both A and R are true and R is the correct explanation of A.", "10": "Both A and R are true and R is the correct explanation of A.", "11": "A is true but R is false.", "12": "A is false but R is true.", "13": "Both A and R are true and R is the correct explanation of A.", "14": "Both A and R are true and R is the correct explanation of A.", "15": "A is true but R is false.", "16": "Both A and R are true but R is NOT the correct explanation of A.", "17": "Both A and R are true and R is the correct explanation of A.", "18": "A is true but R is false.", "19": "A is true but R is false.", "20": "Both A and R are true. R is the correct explanation of A.", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Image Analysis_Level_1_Test 1": {"1": "1", "2": "3", "3": "2", "4": "3", "5": "3", "6": "1", "7": "1", "8": "3", "9": "2", "10": "2", "11": "3", "12": "3", "13": "4", "14": "2", "15": "3", "16": "1", "17": "2", "18": "2", "19": "1", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Dot situations_Level_1_Test 1": {"1": "4", "2": "4", "3": "3", "4": "1", "5": "2", "6": "1", "7": "4", "8": "3", "9": "4", "10": "1", "11": "1", "12": "3", "13": "1", "14": "2", "15": "4", "16": "5", "17": "1", "18": "5", "19": "2", "20": "3", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Embedded Image_Level_1_Test 1": {"1": "1", "2": "4", "3": "4", "4": "3", "5": "4", "6": "4", "7": "2", "8": "4", "9": "4", "10": "2", "11": "2", "12": "4", "13": "4", "14": "1", "15": "2", "16": "2", "17": "4", "18": "4", "19": "A", "20": "2", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Team formation_Level_1_Test 1": {"1": "GEA", "2": "All are correct", "3": "Four", "4": "B or D", "5": "F", "6": "Peter, Shyam, Rahim", "7": "None of these", "8": "Shyam, Rahim, Fiza, David", "9": "Bikram, Charlie and David", "10": "3 or 4", "11": "SQT", "12": "NT", "13": "Personnel", "14": "5", "15": "F and E", "16": "J, C & F", "17": "D", "18": "Aparajita, Akansha and Geetika", "19": "Engineer", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Critical Reasoning_Level_1_Test 1": {"1": "The company has been making huge losses for the past five years and is unable to pay salary to its employees in time.", "2": "A very small student population does not by itself ensure a low faculty / student ratio.", "3": "Some students who labelled themselves conservative endorsed what is defined as a liberal position on that set of issues.", "4": "The company has been making huge losses for the past five years and is unable to pay salary to its employees in time.", "5": "Other methods of agriculture are not as destructive to the environment in tropical regions as the slash and burn method is.", "6": "Whether the majority of the users will be willing to pay a premium to continue to use the drugs", "7": "Comparing past performance of astrologers and economists in terms of accuracy of their predictions", "8": "The total amount spent on cataract surgery has increased because the increased number of people choosing to have the surgery more than offsets the decrease in cost per operation.", "9": "The age cut-off for kids to try out for a team in most European countries is calculated as on December 31 of any year and older the kid during trials, greater the chances of getting the right opportunities.", "10": "Not willing to deal with the issues of workplace discrimination of the differently-abled, several companies recruited fewer of them in the first place", "11": "While the applicants may be willing to accept that they don't have certain things, they felt embarrassed having to accept that they don't have most things", "12": "The manner in which Anand always plays up", "13": "The first is an interpretation made by researchers that the author contends against and the second provides an alternative explanation for statistical data", "14": "USA has trade deficit with Iran.", "15": "Argument from analogy", "16": "It is a proven fact that success in any career is determined more by skill and practice rather than by genetic makeup", "17": "", "18": "painters draw their inspiration? Would move poets to write their verse, composers to craft their symphonies and philosophers to contemplate the meaning of God", "19": "B", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Critical Reasoning_Level_2_Test 1": {"1": "\u2022\\tMalini", "2": "B is a Lawer and from pune", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Figure Matrix_Level_1_Test 1": {"1": "4", "2": "2", "3": "1", "4": "3", "5": "3", "6": "2", "7": "1", "8": "1", "9": "3", "10": "1", "11": "1", "12": "2", "13": "3", "14": "4", "15": "3", "16": "2", "17": "3", "18": "1", "19": "", "20": "2", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Grouping Of Images_Level_1_Test 1": {"1": "1,4 ; 2,3 ; 5,6", "2": "1,3,9 ; 2,5,6 ; 4,7,8", "3": "1,6,9 ; 3,4,7 ; 2,5,8", "4": "1,2,3 ; 4,5,6 ; 7,8,9", "5": "1,4,7 ; 2,5,8 ; 3,6,9", "6": "1,5,7 ; 2,4,8 ; 3,6,9", "7": "1,3 ; 2,4,5 ; 6,7", "8": "1,2,5 ; 3,7,8 ; 4,6,9", "9": "2,6,9 ; 1,5,7 ; 3,4,8", "10": "1,3,5 ; 2,6,8 ; 4,7,9", "11": "1,2,7 ; 3,5,9 ; 4,6,8", "12": "1,3,6 ; 2,5,7 ; 4,8,9", "13": "1,6,8 ; 3,7,9 ; 2,4,5", "14": "1,7,8 ; 3,5,6 ; 2,4,9", "15": "1,4,8 ; 2,5,6 ; 3,7,9", "16": "1,4,7; 2,6,9; 3,5,8", "17": "1,8,9 ; 2,5,6; 3, 4,7", "18": "1,5,7; 2,6,8 ; 3,4,9", "19": "2,7,9 ; 1,4,6 ; 3,5,8", "20": "1,5,8 ; 2,4,7 ; 3,6,9", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Pattern Completion_Level_1_Test 1": {"1": "4", "2": "3", "3": "3", "4": "4", "5": "2", "6": "4", "7": "4", "8": "4", "9": "4", "10": "", "11": "", "12": "", "13": "", "14": ""}, "pattern completion_level_2_test 1": {"1": "C", "2": "C", "3": "D", "4": "A", "5": "B", "6": "1", "7": "A", "8": "", "9": "", "10": "", "11": "", "12": ""}, "Shape Construction_Level_1_Test 1": {"1": "135", "2": "125", "3": "145", "4": "234", "5": "235", "6": "135", "7": "345", "8": "235", "9": "135", "10": "234", "11": "234", "12": "134", "13": "245", "14": "135", "15": "234", "16": "234", "17": "123", "18": "125", "19": "134", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Direction Sense_Level_1_Test 1": {"1": "10 km", "2": "North-West", "3": "North-West", "4": "None of these", "5": "10 m", "6": "7 km, south", "7": "5 meters", "8": "30 km", "9": "20 km", "10": "50 km", "11": "North east", "12": "North", "13": "South-West", "14": "130 m, east", "15": "North-east", "16": "East", "17": "3 kms", "18": "15 m ,east", "19": "A) 13 km", "20": "a. South-West", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Direction Sense_Level_2_Test 1": {"1": "EAST", "2": "Third", "3": "10 meters East", "4": "south", "5": "10m west", "6": "4 km to the east, 14 km to the south", "7": "4 kms", "8": "north", "9": "3 steps to the West", "10": "East", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Blood Relation_Level_1_Test 1": {"1": "Father", "2": "C", "3": "Both statements put together are sufficient", "4": "Daughter", "5": "Father", "6": "Daughter", "7": "Son", "8": "None of these", "9": "Husband", "10": "None of these", "11": "Husband", "12": "Niece", "13": "Father", "14": "Husband", "15": "Father", "16": "Brother", "17": "Daughter", "18": "granddaughter", "19": "A", "20": "S", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Blood Relation_Level_1_Test 2": {"1": "C", "2": "Father", "3": "Daughter", "4": "None of these", "5": "Daughter", "6": "Wife", "7": "Father", "8": "C", "9": "None of these", "10": "C", "11": "B", "12": "Mother", "13": "Father in law", "14": "Son", "15": "Mother", "16": "Wife", "17": "Daughter", "18": "Daughter", "19": "Husband", "20": "Daughter", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Blood Relation_Level_2_Test 1": {"1": "Husband", "2": "Y + R x H * C \u00f7 V", "3": "husband", "4": "D. S is the aunt of T", "5": "A is the brother of S", "6": "A#D@C$B", "7": "C", "8": "All Options are False", "9": "R is maternal grandfather of Q", "10": "Cousin sister", "11": "P x Q/R + S", "12": "Grandfather", "13": "Mother", "14": "A@B#C$D", "15": "None of these", "16": "Mother-in-law", "17": "Data is not sufficient", "18": "Grand-Mother", "19": "Cousin sister", "20": "S/Q+ R X P", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Blood Relation_Level_2_Test 2": {"1": "husband", "2": "D is the father of B", "3": "M&N#O*R$S", "4": "J # K - L + M @ N", "5": "aunty", "6": "J+K#L@M-N", "7": "C", "8": "B+C*D+E*F", "9": "Y + R x H * C \u00f7 V", "10": "D. S is the aunt of T", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Blood Relation_Level_1_Test 3": {"1": "Son", "2": "O", "3": "Father", "4": "Cousin", "5": "Wife", "6": "Wife", "7": "Sister-in-law", "8": "B", "9": "Sister-in-law", "10": "B", "11": "Father", "12": "FATHER", "13": "GRAND DAUGHTER", "14": "FATHER", "15": "", "16": "", "17": "", "18": "", "19": ""}, "Coding and Decoding_Level_1_Test 1": {"1": "202108", "2": "UGBMLR", "3": "LGHQWLFDO", "4": "4935", "5": "KRKZO", "6": "ELCSUM", "7": "MFQZE", "8": "UMDXNHX", "9": "RGADN", "10": "FYBN", "11": "3775", "12": "WARWXA", "13": "EDICED", "14": "3579", "15": "RODRE", "16": "HZND", "17": "WARWXA", "18": "DQJBLDU", "19": "202108", "20": "UFTU", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Coding and Decoding_Level_1_Test 2": {"1": "NTQ", "2": "WARWXA", "3": "HKIJ", "4": "J2L", "5": "206", "6": "P4T", "7": "MPNO", "8": "QWS", "9": "3775", "10": "643", "11": "ELCSUM", "12": "MFQZE", "13": "UMDXNHX", "14": "206", "15": "MNPO", "16": "643", "17": "P4T", "18": "643", "19": "HKIJ", "20": "EDICED", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Coding and Decoding_Level_2_Test 1": {"1": "SFQNX", "2": "17", "3": "UFTU", "4": "202108", "5": "LGHQWLFDO", "6": "3775", "7": "METSYS", "8": "A and C", "9": "IENT : KCPR", "10": "ESCAPES", "11": "EDABC", "12": "NEJK", "13": "HRNFIGZEVMFH", "14": "the question cannot be answered with the information provided.", "15": "\u2022 HRNFIGZEVMFH", "16": "tim", "17": "PRU", "18": "ACEH :LNPS", "19": "B and C", "20": "JOT", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Coding and Decoding_Level_1_Test 3": {"1": "WARWXA", "2": "HZND", "3": "HSAEM", "4": "Sister-in-law", "5": "QTCPIG", "6": "3775", "7": "MFQZE", "8": "QTCPIG", "9": "UFTU", "10": "125", "11": "HZND", "12": "WARWXA", "13": "", "14": "", "15": "", "16": "", "17": ""}, "Logical Deduction_Level_1_Test 1": {"1": "None of these above", "2": "Neither I or II is true.", "3": "Statement I alone is sufficient", "4": "AxC", "5": "Both the statements put together are sufficient", "6": "Both the Statements put together are sufficient in answering the problem question", "7": "Both I and II together are sufficient", "8": "None of these are true", "9": "None of these are true", "10": "B+A/C", "11": "Only I is true", "12": "Only conclusion II is true", "13": "B+A", "14": "Distance between the two new numbers is equal to the distance between 4.28 and -3.28", "15": "B+A", "16": "Only conclusion I is true", "17": "Candidate should be referred to the Vice-Chancellor of the university", "18": "Candidate should not be granted scholarship", "19": "Only Conclusion I is true", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Logical Deduction_Level_2_Test 1": {"1": "A and C", "2": "He would be selected", "3": "DAPQ", "4": "F.", "5": "S", "6": "1 and 4", "7": "A and C", "8": "BMXT: COZW", "9": "A and D", "10": "EOY : KUE", "11": "A and C", "12": "EOY : KUE", "13": "JZFY : MWIV", "14": "", "15": "C and D", "16": "Hasan", "17": "d", "18": "51,50", "19": "Hasan", "20": "Gowri and Chitra", "21": "A and C", "22": "IENT : KCPR", "23": "P4T", "24": "", "25": "", "26": "", "27": "", "28": ""}, "Logical Order_Level_1_Test 1": {"1": "2,4,5,1,3", "2": "5,3,2,4,1", "3": "1,3,4,2,5", "4": "4, 3, 1, 2, 5", "5": "3,5,1,4,2", "6": "b. 4,3,2,5,6,1", "7": "1, 3, 2, 4, 5", "8": "3,1,5,2,4", "9": "3,2,5,1,4", "10": "2,5,1,3,4", "11": "100", "12": "NTQ", "13": "3,2,1,5,4", "14": "3,5,1,4,2", "15": "3,5,1,4,2", "16": "5,4,1,2,3", "17": "206", "18": "4,2,1,5,3", "19": "643", "20": "HKIJ", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Venn Diagram_Level_1_Test 1": {"1": "B", "2": "B", "3": "B", "4": "A", "5": "B", "6": "B) Q", "7": "D) S", "8": "B) K+J+I", "9": "D) 11", "10": "C) 10", "11": "A) 17", "12": "C) 3", "13": "A) A", "14": "", "15": "", "16": "", "17": "", "18": ""}, "Venn Diagram_Level_2_Test 1": {"1": "16", "2": "73", "3": "15", "4": "5550", "5": "73", "6": "F", "7": "Colour, Plate, Fork", "8": "73", "9": "25", "10": "N,R", "11": "", "12": "Colour, Plate, Fork", "13": "14", "14": "25", "15": "10", "16": "169n", "17": "73", "18": "none of them", "19": "can't be determined", "20": "24", "21": "15", "22": "", "23": "", "24": "", "25": "", "26": ""}, "Seating Arrangement_Level_1_Test 1": {"1": "5,4,1,2,3", "2": "Fourth", "3": "Fourth", "4": "mallika,suhana,maneni", "5": "S and Q", "6": "P", "7": "P and U", "8": "B and E", "9": "None of these", "10": "A and D", "11": "B and F", "12": "Q", "13": "P", "14": "Fourth", "15": "10x", "16": "shrubs and celeb vibes", "17": "NONE OF THESE", "18": "Sahayta", "19": "", "20": "", "21": "", "22": "", "23": ""}, "Seating Arrangement_Level_3_Test 1": {"1": "Vijay and Suresh", "2": "", "3": "4", "4": "A", "5": "E.C", "6": "C.Ajay", "7": "CIVIL", "8": "Laos Riyad", "9": "The question can be answered with the help of either of the statements", "10": "E. Data inadequate", "11": "Laos Riyad", "12": "None of these", "13": "Qunie", "14": "one", "15": "NONE OF THESE", "16": "IT", "17": "Qunie", "18": "None of these", "19": "CIVIL", "20": "Shankar", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Seating Arrangement_Level_2_Test 1": {"1": "Fourth", "2": "P", "3": "U", "4": "P", "5": "A\\r\\n", "6": "S\\r\\n\\t", "7": "Either P or S", "8": "South-West\\r\\n", "9": "U", "10": "Third", "11": "S", "12": "Third to the right", "13": "U", "14": "Third to the right\\r\\n", "15": "one", "16": "Qunie", "17": "F", "18": "", "19": "", "20": "", "21": "", "22": ""}, "Data Arrangement_Level_1_Test 1": {"1": "F.", "2": "B.", "3": "A, C, F, G", "4": "Siddu and Shahbaaz get same number of colour pencils", "5": "Red colour pencil, Yellow colour pencil", "6": "Siddu does not get Yellow colour pencil", "7": "Paul.", "8": "France & South Africa.", "9": "Ireland.", "10": "Mark.", "11": "David, Brody, Fabia, Gavin, Avery, Elsa, Cade", "12": "Cade climbs before Gavin.", "13": "David climbs first.", "14": "David climbs third.", "15": "David climbs first.", "16": "20", "17": "Gopi", "18": "Chanda is ranked fifth", "19": "Ballu is ranked sixth", "20": "Ajay is ranked first", "21": "", "22": "", "23": "", "24": "", "25": ""}, "data arrangement_level_2_test 1": {"1": "A: 105 kg", "2": "D.", "3": "\u2022 R", "4": "(A)", "5": "Each statement alone is sufficient to answer the question.", "6": "U", "7": "Either B or C", "8": "U", "9": "p", "10": "P is shorter than R", "11": "Q", "12": "Malini.", "13": "S", "14": "17", "15": "B is a lawyer and belongs to Pune", "16": "Jimmy and Vicky", "17": "M", "18": "Rs. 211,920", "19": "Malini", "20": "Neither I nor II is implicit", "21": "", "22": "", "23": "", "24": "", "25": ""}, "data arrangement_level_2_test 2": {"1": "105 kg", "2": "\\tJimmy and Vicky", "3": "M", "4": "\\tQ or R", "5": "Q or R", "6": "3:2", "7": "B is a lawyer and belongs to Pune", "8": "R", "9": "52.06%", "10": "D", "11": "M", "12": "C \u2014 Mohita \u2014Political Science", "13": "A", "14": "B is a Lawer and from pune", "15": "Fourth", "16": "\u2022\\tR", "17": "Q", "18": "DAPQ", "19": "", "20": "", "21": "", "22": "", "23": ""}, "Data Arrangement_Level_1_Test 2": {"1": "Q", "2": "P is shorter than R", "3": "Beautician", "4": "Teacher\\r\\n", "5": "teacher", "6": "", "7": "", "8": "", "9": "", "10": ""}, "Number series_Level_1_Test_1": {"1": "100", "2": "31", "3": "71", "4": "1944", "5": "31", "6": "677", "7": "405", "8": "10", "9": "6.72", "10": "28", "11": "677", "12": "350", "13": "41", "14": "", "15": "", "16": "", "17": "", "18": ""}, "Number series_Level_2_Test_1": {"1": "27", "2": "16743", "3": "16863", "4": "6.0", "5": "6.0", "6": "VTILT", "7": "b)81", "8": "103", "9": "VTILT", "10": "40", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Functions_Level_1_test_1": {"1": "B+A/C", "2": "63", "3": "101/99", "4": "8", "5": "8", "6": "53", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Rearranging words_Level_1_test_1": {"1": "5,4,1,2,3", "2": "3,2,1,5,4", "3": "3,5,1,4,2", "4": "3,5,1,4,2", "5": "5,4,1,2,3", "6": "4,2,1,5,3", "7": "4,5,3,2,6,1", "8": "5,3,2,4,1", "9": "2,1,4,3,5", "10": "3, 2, 4, 1", "11": "abcd", "12": "abdc", "13": "acbd", "14": "acbd", "15": "acbd", "16": "acdb", "17": "adcb", "18": "acbd", "19": "DBAC", "20": "BDAC", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Odd man out_Level_1_test_1": {"1": "TVZ", "2": "K7R", "3": "RXS", "4": "MPN", "5": "NRW", "6": "MNQR", "7": "CIRCLE", "8": "MNW", "9": "BC9", "10": "CDGK", "11": "STE", "12": "C", "13": "ZBEJ", "14": "NPQ", "15": "KP18", "16": "LIAR", "17": "MQT", "18": "PSW", "19": "gg f QP", "20": "QHIS\\r\\n", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Odd man out_Level_2_test_1": {"1": "\\r\\nA and C", "2": "rds", "3": "JPM", "4": "mle\\r\\n", "5": "GMHO", "6": "Excluded", "7": "vlp", "8": "JPKS\\r\\n", "9": "SAG\\r\\n", "10": "IENG\\r\\n\\t", "11": "JOT", "12": "LINE", "13": "UFI", "14": "E6L", "15": "MNPO\\r\\n", "16": "PRU", "17": "", "18": "", "19": "", "20": "", "21": ""}, "Odd man out_Level_1_test_2": {"1": "PRV", "2": "EGG", "3": "CGP", "4": "DATES", "5": "CGK", "6": "MNPO", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Statements and Conclusions_Level_1_test_1": {"1": "Only I is true", "2": "None of these are true", "3": "Neither I or II is true.", "4": "Only conclusion II is true", "5": "B+A", "6": "Only conclusion II is true", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Statements and Conclusions_Level_2_test_1": {"1": "Some fruits are yellow\\r\\n", "2": "Only conclusion I follows\\r\\n", "3": "Only conclusion ii follow", "4": "Only conclusion (I) follows\\r\\n", "5": "Both conclusions (i) and (ii) follows", "6": "All of the conclusions follow", "7": "Both conclusion I and II follows", "8": "Only Either l or IV and lll follow.", "9": "None of the conclusions follow\\r\\n", "10": "Only conclusions I & III follows.\\r\\n", "11": "None of these", "12": "Neither Conclusion I nor II follows", "13": "Only conclusion I,III,IV follow", "14": "Only conclusion A follows\\r\\n", "15": "Only conclusions I & III follows.", "16": "\\tOnly conclusion I and II follow", "17": "Both conclusion i and ii do not follows", "18": "Only conclusion I &III follows.", "19": "Neither conclusion I nor II follows", "20": "Both conclusion I and II follows", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Statement and Conclusion_Level_3_Test_1": {"1": "III follows", "2": "I , II , III follows", "3": "If I and III follows", "4": "If conclusion I and II follows", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Course of action_level_2_test 1": {"1": "refer to chief medical officer", "2": "Her case is to be referred to the General Manager.", "3": "All of I, II and III follow", "4": "If candidate is to be selected", "5": "Addiction of reading and replying to every mail may have adverse effect on our performance", "6": "", "7": "Refer to Project Director", "8": "All I, II and III follow.", "9": "If candidate is to be selected", "10": "She would not be selected", "11": "-The student is not to be admitted", "12": "If candidate is not to be selected", "13": "Her case is to be referred to the Managing Director.", "14": "Both Action II and III must be taken", "15": "Only I and II follow", "16": "", "17": "She would not be selected", "18": "Both Actions II and III must be taken", "19": "All are implicit", "20": "", "21": "", "22": "", "23": "", "24": ""}, "Statement and assumption_level_2_test 1": {"1": "Only II is implicit.", "2": "Only assumption A and B are implicit", "3": "B is a Lawer and from pune", "4": " A. Only III is implicit", "5": " A. Only III is implicit", "6": "Only II is implicit", "7": "Only II is implicit.", "8": "Only ll is implicit.", "9": "Only I is implicit", "10": "Only II is implicit", "11": "Both i and ii are implicit", "12": "Only ll is implicit.", "13": "Neither I nor II is implicit", "14": "Both I and II are implicit", "15": "Neither I nor II is implicit", "16": "Neither assumption l nor assumption ll is correct", "17": "Both I and II are implicit", "18": "Only I is implicit", "19": "Neither I nor II is implicit", "20": "Only I is implicit", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Statement and Assumption_Level_3_Test_1": {"1": "E . BCD", "2": "Red colour pencil, Yellow colour pencil", "3": "Siddu does not get Yellow colour pencil", "4": "Red colour pencil, Yellow colour pencil", "5": "3", "6": "3", "7": "3", "8": "Red colour pencil, Yellow colour pencil", "9": "Siddu does not get Yellow colour pencil", "10": "I, II and III follow", "11": "The question can be answered with the help of either of statements.", "12": "The question can be answered with the help of both the statements together.", "13": "ADE", "14": "", "15": "", "16": "", "17": "", "18": ""}, "Paper cutting_level_2_test 1": {"1": "D", "2": "B", "3": "4", "4": "B", "5": "a", "6": "3", "7": "1", "8": "2", "9": "2", "10": "4", "11": "4", "12": "2", "13": "2", "14": "4", "15": "4", "16": "4", "17": "2", "18": "3", "19": "3", "20": "2", "21": "", "22": "", "23": "", "24": "", "25": ""}, "image based problems_level_2_test_1": {"1": "two", "2": "1", "3": "C", "4": "C", "5": "C", "6": "C", "7": "a", "8": "B", "9": "", "10": "", "11": "", "12": "", "13": ""}, "dices and cubes_level_2_test 1": {"1": "a", "2": "5", "3": "", "4": "", "5": "", "6": "", "7": ""}, "cube and cuboids_level_2_test 1": {"1": "P & Y\\r\\n", "2": "a \\r\\n\\r\\n", "3": "5", "4": "P & Y\\r\\n", "5": "(a)", "6": "d", "7": "two", "8": "(y)\\r\\n", "9": "8", "10": "10!-7!*4!", "11": "Q", "12": "", "13": "", "14": "", "15": "", "16": ""}, "cube and cuboids_level_1_test 1": {"1": "Rs.1280", "2": "8000 sq.cm", "3": "13.856 sq cm", "4": "208 sq cm", "5": "72 cm", "6": "8", "7": "8", "8": "27", "9": "27000", "10": "12 cm", "11": "Rs. 5062.5", "12": "24", "13": "3000 cu m", "14": "20000", "15": "180000 cu. cm", "16": "2000 cu. cm", "17": "27", "18": "10 cm", "19": "8", "20": "24", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Cryptarithmetic Level_2_Test_1": {"1": "s", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Cryptarithmetic Level_1_Test_1": {"1": "13", "2": "17", "3": "3", "4": "31", "5": "18", "6": "1082", "7": "12", "8": "31", "9": "cannot be determined", "10": "23", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number Puzzles_Level_2_test_1": {"1": "13", "2": "169n", "3": "43", "4": "63", "5": "b. 40\\r\\n", "6": "tim", "7": "169 m\\r\\n", "8": "13", "9": "7", "10": "35", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Paper Folding_Level_2_test_1": {"1": "A", "2": "B", "3": "", "4": "D", "5": "B", "6": "4", "7": "Two", "8": "B and C only", "9": "B and C Only", "10": "", "11": "", "12": "", "13": "", "14": ""}, "Antonyms_Level_1_Test 1": {"1": "PREVENT", "2": "Meek", "3": "Rise", "4": "fast", "5": "Rare", "6": "Vile", "7": "Adept", "8": "Mingled", "9": "Gluttony", "10": "Adept", "11": "Local", "12": "Modest", "13": "Element", "14": "Gluttony", "15": "Aid", "16": "Mingled", "17": "Aggravate", "18": "Oppose", "19": "Annoy", "20": "settled", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Antonyms_Level_1_Test 2": {"1": "Adept", "2": "fast", "3": "Cowardly", "4": "Vile", "5": "Urban", "6": "liberate", "7": "illegal", "8": "Productive", "9": "safety", "10": "Meager", "11": "Gluttony", "12": "Gluttony", "13": "Rare", "14": "Aid", "15": "Gluttony", "16": "Adept", "17": "Mingled", "18": "Aggravate", "19": "Oppose", "20": "Annoy", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Antonyms_Level_1_Test 3": {"1": "Modest", "2": "Aid", "3": "prevent", "4": "settled", "5": "Worsen", "6": "Serious", "7": "SELFISHNESS", "8": "focus", "9": "ANATHEMA", "10": "Abandon", "11": "Useful", "12": "Worsen", "13": "stable", "14": "industrious", "15": "pacification", "16": "GET BACK", "17": "impractical", "18": "triumphant", "19": "intermittent", "20": "conciliatory", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence Completion_Level_1_Test 1": {"1": "have", "2": "Deterrent", "3": "Crisis", "4": "Reduced", "5": "Doubtful", "6": "which", "7": "quickly", "8": "yelled at", "9": "across", "10": "Booked", "11": "book", "12": "Victorious", "13": "Always ", "14": "Despite", "15": "Enactment", "16": "During", "17": "precise", "18": "will share", "19": "out", "20": "d) Won\u2019t", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence Completion_Level_2_Test 1": {"1": "B,A", "2": "PS", "3": "(1)-B, 2-(A)", "4": "died on/ after", "5": "Is capable of", "6": "Acme of prediction", "7": "C, A", "8": "QS", "9": "I got the car serviced yesterday", "10": "PQ", "11": "PQ", "12": "B,A", "13": "Is capable of", "14": "without a doubt", "15": "Acme of prediction", "16": "(1)C, (2) B", "17": "PQ", "18": "QR", "19": "RQ", "20": "In the view of the Covid-19 pandemic, all schools in the city will remain closed till October 31.", "21": "CCCC", "22": "1R, 2S", "23": "1.Q, 2.R", "24": "QP", "25": "RP", "26": "BA", "27": "ACBD", "28": "Another source is the smoke emitted by vehicles.", "29": "There they have a greater number of viewers", "30": "Blank4: 1. classical 2. street 3. banjo 4. symphonic", "31": "3. QR", "32": "PR", "33": "1C, 2A", "34": "1R, 2P", "35": "1.D 2.D", "36": "QP", "37": "", "38": "Completely", "39": "Better", "40": "PQ", "41": "BC", "42": "(1)-A ,(2)-C", "43": "QP", "44": "PQ", "45": "", "46": "", "47": "", "48": "", "49": ""}, "Sentence Completion_Level_1_Test 3": {"1": "in", "2": "While ,for", "3": "resorts", "4": "could have", "5": "would be waiting", "6": "To, but its", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Sentence Completion_Level_3_Test 1": {"1": "During", "2": "Flawed", "3": "contempt", "4": "Will you be doing anything", "5": "fill in", "6": "Spread through", "7": "why he decided not to come", "8": "c.entirely causal", "9": "2.whom he had met in Mysore", "10": "1.given access for", "11": "that has survived the centuries.", "12": "Vanished", "13": "Denial", "14": "Boisterous", "15": "By", "16": "valet", "17": "has", "18": "got o on a wrong foot", "19": "3. is also needed for the development of", "20": "4. Depleting the top soil", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence Completion_Level_3_Test 2": {"1": "4. Enlightening", "2": "c) Has made things much easier", "3": "c) Adjournment", "4": "d) refrained from the blame game and displayed grace", "5": "d) he is too powerful", "6": "d) may have been the bigger and the more complex", "7": "Will you be doing anything", "8": "fill up", "9": "was spreading across", "10": "have always been", "11": "May have been the bigger and more complex.", "12": "D. Has made life very difficult", "13": "On the spur of the moment", "14": "Also needed to develop", "15": "Encapsulate", "16": "Enticing", "17": "Depleting the top soil", "18": "broken", "19": "applicants", "20": "C)On the cards", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Spotting Errors_Level_1_Test 1": {"1": "C", "2": "C", "3": "A", "4": "A", "5": "finished", "6": "A", "7": "A", "8": "NO ERROR", "9": "(C)", "10": "No Error", "11": "A", "12": "C", "13": "C", "14": "B", "15": "C", "16": "C", "17": "D", "18": "B", "19": "D", "20": "D", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Spotting Errors_Level_1_Test 2": {"1": "NO ERROR", "2": "(B)", "3": "No error", "4": "A", "5": "(C)", "6": "B", "7": "B", "8": "(C)", "9": "(C)", "10": "(B)", "11": "(C)", "12": "(C)", "13": "(B)", "14": "No error", "15": "(C)", "16": "(B)", "17": "(A)", "18": "(B)", "19": "No error", "20": "(C)", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Spotting Errors_Level_2_Test 1": {"1": "(C)", "2": "(C)", "3": "(A)", "4": "(C)", "5": "(A)", "6": "(A)", "7": "(A)", "8": "(A)", "9": "D", "10": "No error", "11": "3", "12": "1", "13": "4", "14": "4", "15": "3", "16": "2", "17": "1", "18": "1", "19": "1", "20": "3", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Synonyms_Level_1_Test 1": {"1": "Introduction", "2": "Calm", "3": "Weak", "4": "Rule", "5": "Split", "6": "Disappear", "7": "Communicable", "8": "Disinfect", "9": "Regime", "10": "Survive", "11": "Increase", "12": "split", "13": "Suction", "14": "one-sided", "15": "Intense", "16": "B", "17": "A", "18": "C", "19": "C", "20": "C", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Synonyms_Level_1_Test 2": {"1": "Guidance", "2": "a threatened", "3": "Disappear", "4": "Communicable", "5": "Disinfect", "6": "Regime", "7": "Regime", "8": "Disappear", "9": "Increase", "10": "split", "11": "Suction", "12": "one-sided", "13": "Intense", "14": "Exaggerate", "15": "Abhor", "16": "Upcast", "17": "Defend", "18": "USE", "19": "DIRTY", "20": "Opening", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Synonyms_Level_2_Test 1": {"1": "Survive", "2": "Disappear", "3": "hidden", "4": "encroachment", "5": "Regime", "6": "Increase", "7": "Short", "8": "Obese", "9": "Short", "10": "Misappropriate", "11": "Opening", "12": "Dignified", "13": "Clever", "14": "Intelligent", "15": "Soldier", "16": "Far", "17": "Misfortune", "18": "Imitation", "19": "Accuse", "20": "Rigorous", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Synonyms_Level_3_Test 1": {"1": "Inexperienced", "2": "Complain", "3": "Paused", "4": "Disguisedly sarcastic", "5": "Shy", "6": "Free", "7": "Unbiased", "8": "Superficial", "9": "Short", "10": "Misappropriate", "11": "Unaccountable", "12": "Dignified", "13": "Unaccountable", "14": "Weak", "15": "Fleeting", "16": "Indecency", "17": "Enraptured", "18": "Reprimand", "19": "Forerunner", "20": "Kill", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence Formation_Level_1_Test 1": {"1": "AEDBC", "2": "CBDAE", "3": "QPSR", "4": "CBDAE", "5": "RQSP", "6": "CBDAE", "7": "AEDBC", "8": "CAFDEB", "9": "A,E,D,B,C", "10": "CBDAE", "11": "2514", "12": "15324", "13": "52413", "14": "34152", "15": "45123", "16": "35421", "17": "25314", "18": "32514", "19": "31425", "20": "21345", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Selecting words_Level_1_Test 1": {"1": "forecast", "2": "Imitate", "3": "Had turned", "4": "adapt", "5": "valet", "6": "has", "7": "Which", "8": "at", "9": "across", "10": "doubtful", "11": "had turned", "12": "for", "13": "Acquainted", "14": "while", "15": "vain", "16": "at", "17": "during", "18": "vacancy", "19": "up", "20": "denial", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Passage and Inference_Level_1_Test 1": {"1": "Hobson\u2019s disease must have causes other than mercury in drinking water.", "2": "Addition of reading and replying to every mail may have adverse effect On our performance.", "3": "Reality TV is one of the best things that has happened to television networks in a long time.", "4": "The company believes in fostering the spirit of dialogue without degenerating it into a positioning based debate.", "5": "Efficiency can become all pervading.", "6": "Efficiency does not always pay.", "7": "None of these.", "8": "Both options (3) and (2).", "9": "The company believes in fostering the spirit of dialogue without degenerating it into a positioning based debate.", "10": "While the existence of flying saucers and UFOs has been denied, the possibility of alien beings is still a reality.", "11": "The british are unconcerned about the environment and rules have to be imposed upon them for maintenance of a clean environment.", "12": "If there continues to be a shortfall in the production of sugar, the price of sugar may even exceed that of jute.", "13": "Both options (3) and (2).", "14": "All the activities performed at the beginning of artistic yoga are also repeated in the end.", "15": "Both options (b) and (c)", "16": "Young adult who are not about to marry are more likely to have unhealthy habits than those who are about to marry.", "17": "The company believes in fostering the spirit of dialogue without degenerating it into a position based debate", "18": "If there continues to be a shortfall production of sugar ,the price of sugar may even exceed that of jute", "19": "Efficiency can become all-pervading", "20": "The environment created by the activist disunity and local indifference is the reason for antique dealers to strive in India", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Reading Comprehension_Level_1_Test 1": {"1": "Wages in developing countries are less compared to developed countries", "2": "Because he was angry at himself and unable to stand looking at himself.", "3": "To be domineering towards them.", "4": "Rohit is incapable of change.", "5": "The man was remorseless and had not made any effort to reform himself for the better.", "6": "They are in partial agreement.", "7": "Internet is an instance of Christensen\u2019s model of innovation, but unsuccessful", "8": "Satirical", "9": "The companies could not make money with it", "10": "Drop in stratospheric water vapour of less than one part per million", "11": "Before the vapour can rise up, it has to pass through below freezing temperature and turns into ice.", "12": "Troposphere, Tropopause, Stratosphere, Mesosphere", "13": "Because of the interaction between warm and cool air which is unpredictable in nature and can lead to storms", "14": "Wages in developing countries are less compared todeveloped countries", "15": "Maximum university and college do not match with global need", "16": "Like community colleges", "17": "The economic progress is impressive disallowing the Government to take tough decisions", "18": "There are not enough skilled workers, while the demand for them is high", "19": "Jobs held by American companies", "20": "India\u2019s skill shortage", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Jumbled Sentence_Level_3_Test 1": {"1": "PSQR", "2": "RQSP", "3": "RSQP", "4": "QPRS", "5": "QPSR", "6": "RPQS", "7": "RSQP", "8": "QRSP", "9": "RSQP", "10": "QPRS", "11": "QPSR", "12": "RQSP", "13": "SPRQ", "14": "SRPQ", "15": "QPRS", "16": "QPSR", "17": "", "18": "", "19": "", "20": "", "21": ""}, "Jumbled sentences_Level_1_test_1": {"1": "QPSR", "2": "CBDAE", "3": "AEDBC", "4": "CBDAE", "5": "AEDBC", "6": "RSQP", "7": "CAFDEB", "8": "CAFDEB", "9": "1,3,4,2,5", "10": "3,5,1,4,2", "11": "1,3,2,4,5", "12": "AEDBC", "13": "2, 1, 3, 5, 4", "14": "QSRP", "15": "RPSQ", "16": "SRQP", "17": "QSRP", "18": "RSPQ", "19": "QSRP", "20": "RPSQ", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Jumbled sentences_Level_2_test_1": {"1": "RQ", "2": "RQ", "3": "1. RP", "4": "QP", "5": "QP", "6": "QP", "7": "PR", "8": "PR", "9": "RQ", "10": "PR", "11": "PR", "12": "PQ", "13": "RQ", "14": "QP", "15": "QP", "16": "PQ", "17": "AEDBC", "18": "SPRQ", "19": "RPSQ", "20": "QSPR", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Theme Detection_Level_1_Test 1": {"1": "Long-distance travel can cause drowsiness", "2": "the lasting appeal of Mothra", "3": "there is more than one kind of information that scientists can use to determine the characteristics of the Earth\u2019s early climate.", "4": "They present a problem and a solution.", "5": "inform", "6": "Ozone is a natural part of the Earth\u2019s atmosphere.", "7": "comparison/contrast", "8": "in a different land", "9": "Children in the family", "10": "Represents a numerical code.", "11": "a centrally located area in London", "12": "Bologna is an interesting place to visit.", "13": "persistent", "14": "does not relate to one\u2019s usefulness in society.", "15": "excited", "16": "", "17": "", "18": "", "19": "", "20": ""}, "Sentence Improvement_Level_1_Test 1": {"1": "Beneficial", "2": "had known", "3": "must not", "4": "A quarter of one hour", "5": "Greed", "6": "No improvement", "7": "No improvement needed", "8": "No improvements needed.", "9": "Spectators", "10": "Women's are becoming", "11": "No improvements needed.", "12": "No change", "13": "The country\u2019s most popular", "14": "hidden", "15": "Hence there has been an increase in demand of", "16": "forecast", "17": "naive", "18": "no improvement needed", "19": "Raju does his homework correctly.", "20": "Attestors", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence Improvement_Level_1_Test 2": {"1": "No improvement needed", "2": "did she go", "3": "had known", "4": "The country\u2019s most popular", "5": "During", "6": "No improvements needed.", "7": "", "8": "", "9": "", "10": "", "11": ""}, "Sentence Improvement_Level_2_Test 1": {"1": "Friendly", "2": "The country\u2019s most popular", "3": "Hence there has been an increase in demand of", "4": "", "5": "", "6": "", "7": "", "8": ""}, "Fill in the blanks_level_1_test_1": {"1": "vain", "2": "the", "3": "had turned", "4": "refund", "5": "soccer", "6": "squandered", "7": "Allocate", "8": "Imitate", "9": "For", "10": "off", "11": "Whether", "12": "UNCERTAIN", "13": "will share", "14": "Out", "15": "resolution, cajoling", "16": "Impact, awesome", "17": "have", "18": "Reduced", "19": "which", "20": "quickly", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Passage comprehensive_level_1_test_1": {"1": "Affects driving skills", "2": "Maximum university and college do not match with global need.", "3": "The economic progress is impressive disallowing the Government to take tough decisions", "4": "Even little exposure can cause harm.", "5": "Dr. George and Miss. Sivadas", "6": "They do it because people demand it", "7": "Maximum university and college do not match with global need", "8": "Jobs held by American companies", "9": "India\u2019s skill shortage", "10": "Addition of reading and replying to every mail may have adverse effect On our performance.", "11": "Reality TV is one of the best things that has happened to television networks in a long time.", "12": "The company believes in fostering the spirit of dialogue without degenerating it into a positioning based debate.", "13": "Efficiency can become all pervading.", "14": "If there continues to be a shortfall in the production of sugar, the price of sugar may even exceed that of jute.", "15": "Affects driving skills.", "16": "Because he wanted to read his newspaper and not be disturbed, especially by someone he disliked.", "17": "Rohit has had a dif\ufb01cult life.", "18": "to do without the demand", "19": "are closely linked with the life of modern man", "20": "persisted", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Sentence selection_level_1_test_1": {"1": "Later", "2": "No improvement needed", "3": "vanished", "4": "Whether", "5": "(B)", "6": "No improvements needed.", "7": "No change", "8": "encroachment", "9": "hidden", "10": "Spectators", "11": "forecast", "12": "Women's are becoming", "13": "", "14": "", "15": "", "16": "", "17": ""}, "Sentence selection_level_2_test_1": {"1": "She was wearing a wig that was far more attractive than the natural hair of other women.", "2": "3", "3": "Sorry, I could not attend your party last night.", "4": "C- My brother could give interesting and unusual solutions to problems.", "5": "You are required to submit the documents for due diligence prior to release of the loan.", "6": "In a short time, we will serve refreshments", "7": "A: Will you be able to submit the project by Friday? B: Yup!!Sure!", "8": "The earliest archaeological maps include cave paintings and ancient maps of Babylon Greece, China,and India.", "9": "The violent methods of the two main warring factions are not sufficiently different.", "10": "RQ", "11": "PR", "12": "He told us he had read Milton in a prose translation when he was fourteen", "13": "Evidence of previous excavations.", "14": "RQ", "15": "PR", "16": "PR", "17": "The earliest archaeological maps include cave paintings and ancient maps of Babylon Greece, China, and India.", "18": "The violent methods of the two main warring factions are not sufficiently different.", "19": "B- I apologize for the technical glitch that occurred during our webinar yesterday", "20": "I apologize for the technical glitch that occurred during our webinar yesterday.", "21": "After returning from the trip, he described his journey to his friends.", "22": "Each of the participants was given a gift.", "23": "If he had not confessed his guilt", "24": "(1) Lots of kings used to live here because of the beautiful scenery", "25": "(3) The victims of the earthquake in Kutch, are now living on the open.", "26": "(4) I hope to see you", "27": "(1) We must help children to take the proper vaccine.", "28": "(3) Gandhiji expected to bring them respect by calling them the children of God", "29": "(3) The Congress party hung its head in shame when Shibu Soren, the Union Coal Minister refused to surrender after being accused of murder. His supporters removed the arrest warrant pasted on the gates of his house immediately after the police's departure.", "30": "(4) The notion that trusts are created to avoid income tax was raised after Priyamda Birla's will saw the light of day. Several questions have been raised. Are charitable trusts and holding of equity shares independent of each other? Apparently, yes.", "31": "He has a terrible cough and cold. Poor thing.", "32": "", "33": "", "34": "", "35": "", "36": ""}, "Articles level_1_test_1": {"1": "an", "2": "the", "3": "a", "4": "the", "5": "a", "6": "an", "7": "the", "8": "the", "9": "the", "10": "the", "11": "the", "12": "the", "13": "the", "14": "a", "15": "a", "16": "a", "17": "the", "18": "the", "19": "an", "20": "an", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Grammatical error_level_1_test_1": {"1": "for", "2": "which was", "3": "finished", "4": "Some of the books lying on the table are not needed for this exam.", "5": "To change the old habits and adopt new ones.", "6": "A period of importance", "7": "Talk excessively", "8": "To quarrel over trifles", "9": "vindicate", "10": "abused", "11": "detained", "12": "settle", "13": "discuss", "14": "A letter was being written by Mona to her father.", "15": "We are taught Grammar by him.", "16": "Get someone to break the box", "17": "Accept or leave the offer", "18": "discuss", "19": "I saw the rehearsal being conducted by him.", "20": "I saw the rehearsal being conducted by him.", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Logical word sequence_level_2_test 1": {"1": "QJMPU", "2": "HGI", "3": "EIKC", "4": "", "5": "", "6": "", "7": "", "8": ""}, "Idioms and phrases_level_1_test 1": {"1": "Excessively abundant supply", "2": "Stop working", "3": "In a precarious situation", "4": "(5) have no influence or effect", "5": "(1) be overconfident", "6": "Extremely happy", "7": "trying to cool the situation down and then raking it up again", "8": "disassociated themselves from.", "9": "depend on himself", "10": "and unreliable and deceitful person", "11": "Reveal the secret", "12": "Avoid talking about the matter", "13": "imaginary idea", "14": "fluency of the speech", "15": "To confess without of reserve", "16": "To be in good mood", "17": "a. To emphasise", "18": "A private end to serve", "19": "To give false alarm", "20": "To ruin oneself", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Idioms and phrases_level_2_test 1": {"1": "fluency of the speech", "2": "To confess without of reserve", "3": "To be in good mood", "4": "a. To emphasise", "5": "To give false alarm", "6": "To ruin oneself", "7": "To be honest in any business deal", "8": "To take a difficult task", "9": "To desert someone in his difficulties", "10": "To criticise someone", "11": "To be honest in any business deal", "12": "To support the role and view of another person", "13": "To take for granted", "14": "None of these", "15": "A man of no substance", "16": "To suspect foul dealings", "17": "a", "18": "a", "19": "Pretended to be", "20": "Suffer for his own act", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Spelling_level_2_test 1": {"1": "Simplefy", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Subject verb agreement_level_2_test 1": {"1": "No improvement", "2": "", "3": "", "4": "", "5": "", "6": ""}, "Paragraph formation_level_2_test 1": {"1": "4. D", "2": "1. A", "3": "", "4": "", "5": "", "6": "", "7": ""}, "Paragraph formation_level_1_test 1": {"1": "25134", "2": "362451", "3": "265314", "4": "35214", "5": "245631", "6": "3214", "7": "4213", "8": "d) ACDB", "9": "3", "10": "4", "11": "5", "12": "1", "13": "2", "14": "1", "15": "1", "16": "5", "17": "1", "18": "3", "19": "1", "20": "3", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Rule Detection Level_2_Test_1": {"1": "3", "2": "2", "3": "3", "4": "1", "5": "2", "6": "2", "7": "4", "8": "1", "9": "3", "10": "4", "11": "2", "12": "3", "13": "1", "14": "2", "15": "3", "16": "3", "17": "3", "18": "4", "19": "1", "20": "3", "21": "3", "22": "4", "23": "3", "24": "1", "25": "2", "26": "2", "27": "1", "28": "3", "29": "4", "30": "1", "31": "2", "32": "", "33": "", "34": "", "35": "", "36": ""}, "Logarithm_Level_1_test_2": {"1": "a<b", "2": "1.9", "3": "50", "4": "None of these", "5": "3log(5)+6log(17)", "6": "log 5", "7": "9", "8": "-2", "9": "12", "10": "x=-27 and 3", "11": "2", "12": "-(1 + a)", "13": "a^2+b^2 = 7ab", "14": "", "15": "", "16": "", "17": "", "18": ""}, "Direction Sense_Level_1_Test 2": {"1": "17m north west", "2": "5 kms", "3": "8 m North", "4": "20 km", "5": "50 km", "6": "25 km", "7": "30 km", "8": "15m west", "9": "10 m", "10": "7 km, south", "11": "7 km, south", "12": "5 meters", "13": "30 km", "14": "10 km", "15": "10 yards", "16": "North-East", "17": "None of these", "18": "North-West", "19": "30 km", "20": "East", "21": "", "22": "", "23": "", "24": "", "25": ""}, "sentence correction_level 1_test 1": {"1": "D. were cataloged", "2": "C. that eventually led", "3": "D. first, then", "4": "C. picked a disinterested party.", "5": "B. had better leave", "6": "D. admired", "7": "D. and transportation of foodstuffs to her grandmother.", "8": "4. If the cab had started on time, she would have reached office on time.", "9": "1. Nishi asked the boy if he could take her home then.", "10": "3. The hardworking salesman collected the payment.", "11": "4. had been brighter", "12": "2. What kind of car do you want?", "13": "4. The employees of this company have been demanding higher salaries for a very long time.", "14": "You don't need to come unless you want to", "15": "to whom I sell", "16": "No correction required", "17": "No correction required", "18": "to enhancing their reputation", "19": "No correction required", "20": "No correction required", "21": "", "22": "", "23": "", "24": "", "25": ""}, "Basic_I/P_O/P_Level_3": {"1": "#include<stdio.h>\r\n int main()\r\n{\r\n    double celsius, fahrenheit;\r\n    scanf(\"%lf\", &celsius);\r\n    fahrenheit = ((celsius * 9)/5) + 32;\r\n  printf(\"%.2lfF\", fahrenheit);\r\n   return 0;\r\n}", "2": "#include<stdio.h>  \r\n#include<math.h>  \r\nint main()  \r\n{  \r\n    double degree, radian;  \r\n    scanf(\"%lf\", &degree);  \r\n    radian = degree * ( M_PI / 180.0 );  \r\n    printf(\"%.2lf\", radian);  \r\n    return 0;  \r\n}  ", "3": "#include <stdio.h>\r\nint main()\r\n{\r\n    double kg, pounds;\r\n    scanf(\"%lf\", &kg);\r\n    pounds = kg * 2.20462;\r\n    printf(\"%.2lf Pounds\",pounds);\r\n    return 0;\r\n}", "4": "#include<stdio.h>  \r\nint main()  \r\n{  \r\n    double Kilogram = 0.453592;  \r\n    double pound;  \r\n    scanf(\"%lf\", &pound);  \r\n    printf(\"%.2lf\\n\", (pound * Kilogram) );  \r\n    return 0;  \r\n} ", "5": "#include <stdio.h>\r\nint main()\r\n{\r\n    double km, miles;\r\n    scanf(\"%lf\", &km);\r\n    miles = km / 1.6;\r\n    printf(\"%.2lf Miles\", miles);\r\n    return 0;\r\n}", "6": "#include <stdio.h>\r\nint main()\r\n{\r\n    double square_feet, acres;\r\n    scanf(\"%lf\", &square_feet);\r\n    acres=square_feet/43560;\r\n    printf(\"%.2lf\", acres);\r\n    return 0;\r\n}", "7": "#include <stdio.h>\r\nint main()\r\n{\r\n    double celsius, fahrenheit;\r\n    scanf(\"%lf\", &fahrenheit);\r\n    celsius = (fahrenheit - 32) * 5 / 9;\r\n    printf(\"%.2lf Celsius\",celsius);\r\n    return 0;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n    double liter,gallon;\r\n    scanf(\"%lf\",&liter);\r\n    gallon=liter*0.26417;\r\n    printf(\"%.2lf\",gallon);\r\n}\r\n", "9": "#include <stdio.h>\r\nint main()\r\n{\r\n    double kilowatt,horsepower;\r\n    scanf(\"%lf\",&kilowatt);\r\n    horsepower=kilowatt*1.35962;\r\n    printf(\"%.2lf\",horsepower);\r\n}", "10": "#include <stdio.h>\r\nint main()\r\n{\r\n   double inches,feet;\r\n    scanf(\"%lf\",&inches);\r\n    feet=inches*0.08333;\r\n    printf(\"%.2lf\",feet);\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Conditional_Statement_Level _2": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\nint side1,side2,side3;\r\nscanf(\"%d %d %d\",&side1,&side2,&side3);\r\nif(side1==side2 && side2==side3)\r\nprintf(\"Equilateral\");\r\nelse if(side1==side2 || side2==side3 || side3==side1)\r\nprintf(\"Isosceles\");\r\nelse\r\nprintf(\"Scalene\");\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nint angle1,angle2,angle3;\r\nscanf(\"%d %d %d\",&angle1,&angle2,&angle3);\r\nif((angle1+angle2+angle3==180)&&angle1!=0&&angle2!=0&&angle3!=0)\r\nprintf(\"Valid\");\r\nelse\r\nprintf(\"Not Valid\");\r\nreturn 0;\r\n}", "3": "'#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num1,num2,num3;\r\nscanf(\"%lld %lld %lld\",&num1,&num2,&num3);\r\nif(num1<num2 && num1<num3)\r\nprintf(\"Minimum is %lld\",num1);\r\nelse if(num2<num1 && num2<num3)\r\nprintf(\"Minimum is %lld\",num2);\r\nelse\r\nprintf(\"Minimum is %lld\",num3);\r\nreturn 0;\r\n}", "4": "'#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num1,num2,num3;\r\nscanf(\"%lld %lld %lld\",&num1,&num2,&num3);\r\nif(num1>num2 && num1>num3)\r\nprintf(\"Maximum is %lld\",num1);\r\nelse if(num2>num1 && num2>num3)\r\nprintf(\"Maximum is %lld\",num2);\r\nelse\r\nprintf(\"Maximum is %lld\",num3);\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\r\n#define max(x,y) (x)>(y)?(x):(y)\r\nint main()\r\n{\r\nlong long int n1,n2,n3,n4,MAX;\r\nscanf(\"%lld %lld %lld %lld\",&n1,&n2,&n3,&n4);\r\nMAX=max(max(n1,n2),max(n3,n4));\r\nprintf(\"Largest is %lld\",MAX);\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\n#define MAX(a,b) (a)>(b)?(a):(b)\r\n#define MIN(a,b) (a)<(b)?(a):(b)\r\nint main()\r\n{\r\nlong long int num1,num2,num3;\r\nlong long int max,min,mid;\r\nscanf(\"%lld %lld %lld\",&num1,&num2,&num3);\r\nmax=MAX(MAX(num1,num2),num3);\r\nmin=MIN(MIN(num1,num2),num3);\r\nmid=num1+num2+num3-max-min;\r\nprintf(\"%lld < %lld < %lld\",min,mid,max);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\n#define max(x,y) (x)>(y)?(x):(y)\r\n#define min(x,y) (x)<(y)?(x):(y)\r\nint main()\r\n{\r\nlong long int n1,n2,n3,n4,max1,max2,min1,min2,temp;\r\nscanf(\"%lld %lld %lld %lld\",&n1,&n2,&n3,&n4);\r\nmax1=max(max(n1,n2),max(n3,n4));\r\nmin1=min(min(n1,n2),min(n3,n4));\r\nmin2=min(max(n1,n2),max(n3,n4));\r\nmax2=max(min(n1,n2),min(n3,n4));\r\nif(max2<min2)\r\n{\r\ntemp=max2;\r\nmax2=min2;\r\nmin2=temp;\r\n}\r\nprintf(\"%lld > %lld > %lld > %lld\",max1,max2,min2,min1);\r\nreturn 0;\r\n}", "8": "#include<stdlib.h>\r\n#include<stdio.h>\r\n#include<limits.h>\r\nint main()\r\n{\r\n    int choice1;\r\n    int choice2;\r\n    scanf(\"%d%d\", &choice1, &choice2);\r\n    if ( choice1 ==1)\r\n    {\r\n        switch( choice2)\r\n        {\r\n        case 1:\r\n            printf(\"Minimum value of signed char is %d\\n\",CHAR_MIN);\r\n            printf(\"Maximum value of signed char is %d\",CHAR_MAX);\r\n            break;\r\n        case 2:\r\n            printf(\"Minimum value of signed short int is %d\\n\",SHRT_MIN);\r\n            printf(\"Maximum value of signed short int is %d\",SHRT_MAX);\r\n            break;\r\n        case 3:\r\n            printf(\"Minimum value of signed short int is %d\\n\",INT_MIN);\r\n            printf(\"Maximum value of signed short int is %d\",INT_MAX);\r\n            break;\r\n        case 4:\r\n            printf(\"Minimum value of signed long int is %ld\\n\",LONG_MIN);\r\n            printf(\"Maximum value of signed long int is %ld\",LONG_MAX);\r\n            break;\r\n        case 5:\r\n            printf(\"Minimum value of signed long int is %lld\\n\",LLONG_MIN);\r\n            printf(\"Maximum value of signed long int is %lld\",LLONG_MAX);\r\n            break;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        switch( choice2)\r\n        {\r\n        case 1:\r\n            printf(\"Minimum value of unsigned char is %d\\n\",0);\r\n            printf(\"Maximum value of unsigned char is %d\",UCHAR_MAX);\r\n            break;\r\n        case 2:\r\n            printf(\"Minimum value of unsigned short int is %d\\n\",0);\r\n            printf(\"Maximum value of unsigned short int is %d\",USHRT_MAX);\r\n            break;\r\n        case 3:\r\n            printf(\"Minimum value of unsigned short int is %d\\n\",0);\r\n            printf(\"Maximum value of unsigned short int is %u\",UINT_MAX);\r\n            break;\r\n        case 4:\r\n            printf(\"Minimum value of unsigned long int is %ld\\n\",0);\r\n            printf(\"Maximum value of unsigned long int is %lu\",ULONG_MAX);\r\n            break;\r\n        case 5:\r\n            printf(\"Minimum value of unsigned long int is %lld\\n\",0);\r\n            printf(\"Maximum value of unsigned long int is %llu\",ULLONG_MAX);\r\n            break;\r\n        }\r\n    }\r\n    return EXIT_SUCCESS;\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint main(){\r\n   long long int hour,minute,second;\r\n    scanf(\"%d:%d:%d\",&hour,&minute,&second); \r\n    if(hour>=0 && hour<24 && minute>=0 && minute<60 && second>=0 && second<60){\r\n        printf(\"Valid\");\r\n    }\r\n    else{\r\n        printf(\"Not Valid\");\r\n    }\r\n}", "10": "#include<stdio.h>\r\nint main(){ \r\n    int date, month, year;    \r\n    scanf(\"%d/%d/%d\",&date,&month,&year);    \r\n    if(date>0 && date<32 && month>0 && month<13 && year>1900 && year<9999){\r\n        if(date<31 && (month==4 || month==6 || month==9 || month==11)){\r\n            printf(\"Valid\");\r\n        }\r\n        else if(date<32 && (month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)){\r\n            printf(\"Valid\");\r\n        }\r\n        else if(month==2){\r\n            if(date<30 && ((year%4==0 && year%100!=0) || (year%400==0))){\r\n                printf(\"Valid\");\r\n            }\r\n            else if(date<29){\r\n                printf(\"Valid\");\r\n            }\r\n            else{\r\n                printf(\"Invalid\");\r\n            }\r\n        }\r\n        else{\r\n            printf(\"Invalid\");\r\n        }\r\n    }\r\n    else{\r\n        printf(\"Invalid\");\r\n    }    \r\n    return 0;    \r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Looping_Level_2": {"1": "\"#include<stdio.h>\n\nint main(){\n    \n    long long int num,zero=0;\n    scanf(\"\"%lld\"\",&num);\n    \n    while (num > 0) {\n        zero += num / 5;\n         num /= 5;\n    }\n    printf(\"\"%lld\"\",zero);\n    return 0;\n}\"", "2": "\"#include<stdio.h>\nint main()\n{\n long long int N,num,two=1,three=1;\n scanf(\"\"%lld\"\",&N);\n for(num=1;num<=N;num=num+2)\n {\n printf(\"\"%lld \"\",two);\n two=two*2;\n if(num+1<=N)\n printf(\"\"%lld \"\",three);\n three=three*3;\n }\n return 0;\n}\"", "3": "\"#include<stdio.h>\nint main()\n{\n long long int number,N;\n scanf(\"\"%lld\"\",&N);\n for(number=1;number<=N;number++)\n {\n if(number%2==0)\n printf(\"\"%lld \"\",number/2-1);\n else\n printf(\"\"%lld \"\",number-1);\n }\n return 0;\n}\"", "4": "#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n\r\nint num,var1,power,var2;\r\nscanf(\"%d\",&num);\r\nif(num==1||num==5)\r\nprintf(\"Pentagonal Number\");\r\nelse\r\n{\r\nfor(var1=4,var2=5;var2<num;var1+=3,var2+=var1);\r\nif(var2==num)\r\nprintf(\"Pentagonal Number\");\r\nelse\r\nprintf(\"Not a Pentagonal Number\");\r\n}\r\nreturn 0;\r\n}", "5": "#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\nint num,power;\r\nscanf(\"%d\",&num);\r\npower=1;\r\nnum=num-1;\r\nwhile(num%2==0)\r\n{\r\nnum=num/2;\r\npower=power*2;\r\n}\r\nif(num<power)\r\nprintf(\"Proth Number\");\r\nelse\r\nprintf(\"Not a Proth Number\");\r\nreturn 0;\r\n}", "6": "\"#include<stdio.h>\nint main() {\n int steps,x=0,y=0;\n int count,multiply=1;\n scanf(\"\"%d\"\",&steps);\n while(1)\n {\n if(steps>0)//moving right\n {\n x=x+multiply*10;\n multiply++;\n steps--;\n }\n if(steps>0)//moving down\n {\n y=y-multiply*10;\n multiply++;\n steps--;\n }\n if(steps>0)//moving left\n {\n x=x-multiply*10;\n multiply++;\n steps--;\n }\n if(steps>0)//moving up\n {\n y=y+multiply*10;\n multiply++;\n steps--;\n }\n if(steps==0)\n break;\n }\n printf(\"\"(%d , %d)\"\",x,y);\n return 0; }\"", "7": "\"#include<stdio.h>\nint main()\n{\n int dd,mm,yy,nod=0;\n long long int remdays;\n scanf(\"\"%d/%d/%d\"\",&dd,&mm,&yy);\n switch(mm-1)\n {\n case 12:nod+=31;\n case 11:nod+=30;\n case 10:nod+=31;\n case 9:nod+=30;\n case 8:nod+=31;\n case 7:nod+=31;\n case 6:nod+=30;\n case 5:nod+=31;\n case 4:nod+=30;\n case 3:nod+=31;\n case 2:if(yy%4==0 && yy%100!=0 || yy%400==0)\n nod+=29;\n else\n nod+=28;\n case 1:nod+=31;\n break;\n }\n nod+=dd;\n if(yy%4==0&&yy%100!=0||yy%400==0)\n remdays=366-nod;\n else\n remdays=365-nod;\n printf(\"\"%lld\"\",remdays);\n return 0;\n}\n\"", "8": "\"#include<stdio.h>\nint main()\n{\n int dd,mm,yy,nod=0;\n long long int remdays;\n scanf(\"\"%d/%d/%d\"\",&dd,&mm,&yy);\n switch(mm-1)\n {\n case 12:nod+=31;\n case 11:nod+=30;\n case 10:nod+=31;\n case 9:nod+=30;\n case 8:nod+=31;\n case 7:nod+=31;\n case 6:nod+=30;\n case 5:nod+=31;\n case 4:nod+=30;\n case 3:nod+=31;\n case 2:if(yy%4==0 && yy%100!=0 || yy%400==0)\n nod+=29;\n else\n nod+=28;\n case 1:nod+=31;\n break;\n }\n nod+=dd;\n printf(\"\"%d\"\",nod);\n\n return 0;\n}\n\"", "9": "\"#include<stdio.h>\nint main()\n{\n int hr1,min1,sec1,hr2,min2,sec2;\n long long int time1,time2,diff;\n scanf(\"\"%d:%d:%d\"\",&hr1,&min1,&sec1);\n scanf(\"\"%d:%d:%d\"\",&hr2,&min2,&sec2);\n time1=hr1*3600+min1*60+sec1;\n time2=hr2*3600+min2*60+sec2;\n if(time1>time2)\n diff=time1-time2;\n else\n diff=time2-time1;\n printf(\"\"%lld\"\",diff);\n return 0;\n}\"", "10": "\"#include<stdio.h>\nint main()\n{\n int dd,mm,yy,nod=0,year,total,itr,dd1,mm1,yy1;\n scanf(\"\"%d/%d/%d %d/%d/%d\"\",&dd,&mm,&yy,&dd1,&mm1,&yy1);\nif(yy<=yy1&&mm<=12&&mm1<=12&&dd<=31&&dd1<=31){\n for(year=yy+1;year<yy1;year++)\n {\n if(year%4==0 && year%100!=0 || year%400==0)\n nod+=366;\n else\n nod+=365;\n }\n\n if(yy!=yy1)\n {\n for(itr=mm;itr<=12;itr++)\n {\n switch(itr)\n {\n case 12:nod+=31;\n break;\n case 11:nod+=30;\n break;\n case 10:nod+=31;\n break;\n case 9:nod+=30;\n break;\n case 8:nod+=31;\n break;\n case 7:nod+=31;\n break;\n case 6:nod+=30;\n break;\n case 5:nod+=31;\n break;\n case 4:nod+=30;\n break;\n case 3:nod+=31;\n break;\n case 2:\n {if(yy%4==0 && yy%100!=0 || yy%400==0)\n nod+=29;\n else\n nod+=28;\n break;\n }\n case 1:nod+=31;\n break;\n }\n }\n }\nfor(itr=1;itr<mm1;itr++)\n {\n switch(itr)\n {\n case 12:nod+=31;\n break;\n case 11:nod+=30;\n break;\n case 10:nod+=31;\n break;\n case 9:nod+=30;\n break;\n case 8:nod+=31;\n break;\n case 7:nod+=31;\n break;\n case 6:nod+=30;\n break;\n case 5:nod+=31;\n break;\n case 4:nod+=30;\n break;\n case 3:nod+=31;\n break;\n case 2:\n {if(yy1%4==0 && yy1%100!=0 || yy1%400==0)\n nod+=29;\n else\n nod+=28;\n break;\n }\n case 1:nod+=31;\n break;\n }\n }\n\n\n nod+=dd1-dd;\n printf(\"\"%d\"\",nod);\n}else\nprintf(\"\"Invalid\"\");\n}\n\n\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "2D_Level_0": {"1": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid display( int **arr, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    \r\n    display(arr,tot_row,tot_col);\r\n    \r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nvoid display( int **arr, int tot_row, int tot_col)\r\n{\r\n    int row, col;\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            printf(\"%d \", arr[row][col]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n}", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\nlong long int Sum_all_elements(int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    printf(\"Sum of All Elements of the Matrix is %lld\", Sum_all_elements(arr, tot_row, tot_col));\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\nlong long int Sum_all_elements(int ** arr, int tot_row , int tot_col)\r\n{\r\n    long long int sum;\r\n    int row, col;\r\n    sum =0;\r\n     for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            sum += arr[row][col];\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint Matrix_Identical( int **, int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr1, **arr2;\r\n\r\n    arr1 = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr1[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    arr2 = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr2[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr1[row][col]);\r\n        }\r\n    }\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr2[row][col]);\r\n        }\r\n    }\r\n    if ((Matrix_Identical(arr1, arr2, tot_row, tot_col)))\r\n        printf(\"HOMOGENEOUS\");\r\n    else\r\n        printf(\"NOT HOMOGENEOUS\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr1[row]);\r\n        free(arr2[row]);\r\n    }\r\n    free(arr1);\r\n    free(arr2);\r\n    return EXIT_SUCCESS;\r\n}\r\nint Matrix_Identical( int **arr1, int **arr2, int tot_row, int tot_col)\r\n{\r\n    int row, col;\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for ( col=0; col< tot_col;col+=1)\r\n        {\r\n            if ( arr1[row][col]!=arr2[row][col])\r\n                return 0;\r\n        }\r\n        if ( col < tot_col)\r\n            return 0;\r\n    }\r\n    if ( row >= tot_row && col >= tot_col)\r\n        return 1;\r\n   return 0;\r\n\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint row_highest_zeros_count(int **,int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col,zero_ctr, max_zero,row_pos;\r\n\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    printf(\"%d\", row_highest_zeros_count(arr, tot_row, tot_col));\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint row_highest_zeros_count(int ** arr,int tot_row, int tot_col)\r\n{\r\n    int max_zero, row_pos, row, col,zero_ctr;\r\n    max_zero =0;\r\n    row_pos = -1;\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for ( col=0, zero_ctr =0 ; col< tot_col;col+=1)\r\n        {\r\n            if ( arr[row][col] == 0)\r\n                zero_ctr +=1;\r\n        }\r\n        if (zero_ctr >=max_zero && zero_ctr !=0)\r\n        {\r\n            max_zero =zero_ctr;\r\n            row_pos = row;\r\n        }\r\n    }\r\n    return row_pos;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint check_availability( int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, srch_value;\r\n    scanf(\"%d\",&tot_row);\r\n    int **arr;\r\n    tot_col = tot_row;\r\n\r\n    scanf(\"%d\",&srch_value);\r\n\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    if ( check_availability(arr, tot_row, srch_value))\r\n        printf(\"ELEMENT NOT FOUND\");\r\n    else\r\n        printf(\"ELEMENT FOUND\");\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\nint check_availability( int ** arr, int tot_row, int srch_value)\r\n{\r\n    int row, col, tot_col = tot_row;\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for ( col=0; col< tot_col;col+=1)\r\n        {\r\n            if ( arr[row][col] == srch_value)\r\n                return 0;\r\n        }\r\n        if (col < tot_col)\r\n            return 0;\r\n    }\r\n    if (row == tot_row)\r\n        return 1;\r\n   \r\n}\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid sum_row_elements( int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    sum_row_elements(arr, tot_row, tot_col);\r\n\r\n     for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nvoid sum_row_elements( int ** arr,int tot_row , int tot_col)\r\n{\r\n    int row,col;\r\n    long long int sum;\r\n    for ( row =0; row<tot_row; row+=1 )\r\n    {\r\n        sum =0;\r\n         for ( col =0; col <tot_col; col+=1 )\r\n        {\r\n            sum += arr[row][col];\r\n        }\r\n        printf(\"Sum of the Row %d is %lld\\n\",row+1, sum);\r\n    }\r\n\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid sum_pillar_elements( int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    sum_pillar_elements(arr, tot_row, tot_col);\r\n\r\n     for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nvoid sum_pillar_elements( int ** arr,int tot_row , int tot_col)\r\n{\r\n    int row,col;\r\n    long long int sum;\r\n     for ( col =0; col <tot_col; col+=1 )\r\n    {\r\n        sum =0;\r\n        for ( row =0; row<tot_row; row+=1 )\r\n        {\r\n            sum += arr[row][col];\r\n        }\r\n        printf(\"Sum of the Pillar %d is %lld\\n\",col+1, sum);\r\n    }\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n     for ( row =0,sum =0; row <tot_row && row <tot_col; row+=1 )\r\n    {\r\n        sum += arr[row][row];\r\n    }\r\n    printf(\"Sum of the Main Diagonal Matrix is %lld\",sum);\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d\",&tot_row);\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_row * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_row; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n     for ( row =0,sum =0; row <tot_row; row+=1 )\r\n    {\r\n        sum += arr[row][(tot_row-row)-1];\r\n    }\r\n    printf(\"%lld\",sum);\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n    int **arr;\r\n    long long int sum;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_row; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n\r\n     for ( row =0,sum =0; row <tot_row; row+=1 )\r\n    {\r\n\r\n         for ( col =row; col <tot_row; col+=1 )\r\n        {\r\n            sum += arr[row][col];\r\n        }\r\n    }\r\n    printf(\"%lld\",sum);\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "2D_Level_1": {"1": "#include<stdlib.h>\r\n#include<stdio.h>\r\nlong long int sum_lower_triangular( int **, int );\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    long long int sum;\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n\r\n    printf(\"%lld\", sum_lower_triangular( arr, tot_row));\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nlong long int sum_lower_triangular( int ** arr,int tot_row)\r\n{\r\n    long long int sum;\r\n    int row, col;\r\n    sum =0;\r\n    for ( row =0; row<tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<=row; col+=1 )\r\n        {\r\n            sum += arr[row][col];\r\n        }\r\n    }\r\n    return sum;\r\n\r\n}\r\n", "2": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint check_sparse( int **, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, count;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    if ( check_sparse( arr, tot_row, tot_col))\r\n        printf(\"Sparse Matrix\");\r\n    else\r\n        printf(\"Not a Sparse Matrix\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint check_sparse( int ** arr, int tot_row, int tot_col)\r\n{\r\n    int row, col, count;\r\n     for ( row =0, count =0; row <tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_col; col+=1 )\r\n            {\r\n                if ( arr[row][col]==0)\r\n                    count++;\r\n            }\r\n        }\r\n    if ( count > ((tot_col*tot_row)/2))\r\n        return 1;\r\n    return 0;\r\n\r\n}\r\n", "3": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint matrix_toeplitz( int **, int ,int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, st_row,check, st_col, FLAG;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    if ( matrix_toeplitz(arr, tot_row, tot_col))\r\n        printf(\"Toeplitz matrix\");\r\n    else\r\n        printf(\"Not a Toeplitz matrix\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint matrix_toeplitz( int **arr, int tot_row ,int tot_col)\r\n{\r\n    int st_row, st_col,row,col, check, FLAG;\r\n    for (st_row = tot_row-1; st_row>=0; st_row-=1)\r\n    {\r\n        check = arr[st_row][0];\r\n        FLAG =0;\r\n       for ( col =0, row = st_row; col<=tot_col-1 && row <= tot_row-1; col+=1,row+=1 )\r\n        {\r\n            if (arr[row][col]!= check)\r\n            {\r\n                FLAG =1;\r\n                break;\r\n            }\r\n        }\r\n        if (FLAG==1)\r\n            break;\r\n    }\r\n    if ( FLAG==0)\r\n    {\r\n\r\n       for (st_col=1; st_col<= tot_col-1; st_col+=1)\r\n        {\r\n            check = arr[0][st_col];\r\n            FLAG =0;\r\n           for ( col=st_col,row=0; (col<=tot_col-1 && row<=tot_row-1); col+=1,row+=1 )\r\n            {\r\n               if ( check != arr[row][col])\r\n                {\r\n                   FLAG = 1;\r\n                   break;\r\n                }\r\n            }\r\n            if (FLAG == 1)\r\n                break;\r\n        }\r\n        if ( FLAG == 0)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    else\r\n        return 0;\r\n\r\n}", "4": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint check_diagonal( int **, int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, st_row,check, st_col, FLAG;\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n\r\n    if ( check_diagonal( arr, tot_row) )\r\n        printf(\"Diagonal matrix\");\r\n    else\r\n        printf(\"Not a Diagonal matrix\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint check_diagonal( int ** arr, int tot_row)\r\n{\r\n    int row, col, tot_col;\r\n    tot_col = tot_row;\r\n    for ( row =0; row<tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            if (( row == col) && ( arr[row][col]==0))\r\n                return 0;\r\n            else if ( ( row != col) && ( arr[row][col]!=0))\r\n                return 0;\r\n        }\r\n        if ( col != tot_col)\r\n            return 0;\r\n    }\r\n\r\n    return 1;\r\n}\r\n", "5": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint matrix_check_identity( int ** , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    if ( matrix_check_identity(arr, tot_row))\r\n        printf(\"Identity matrix\");\r\n    else\r\n        printf(\"Not an Identity matrix\");\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint matrix_check_identity( int ** arr, int tot_row)\r\n{\r\n    int row, col, tot_col;\r\n    tot_col = tot_row;\r\n    for ( row =0; row<tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            if (( row == col) && ( arr[row][col]!=1))\r\n                return 0;\r\n            else if ( ( row != col) && ( arr[row][col]!=0))\r\n                return 0;\r\n        }\r\n        if ( col != tot_col)\r\n            return 0;\r\n    }\r\n    return 1;\r\n}\r\n", "6": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint check_scalar( int**, int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, check;\r\n    long long int sum;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n        if (check_scalar( arr, tot_row, tot_col))\r\n            printf(\"Scalar matrix\");\r\n        else\r\n            printf(\"Not a scalar matrix\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\nint check_scalar( int ** arr, int tot_row, int tot_col)\r\n{\r\n    int row, col, check;\r\n\r\n    check = arr[0][0];\r\n    if ( tot_row == tot_col)\r\n    {\r\n        for ( row =0; row<tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_col; col+=1 )\r\n            {\r\n               if (( row == col ))\r\n                {\r\n                    if (check != arr[row][col])\r\n                       return 0;\r\n                }\r\n               else if ( arr[row][col] != 0 )\r\n                    return 0;\r\n            }\r\n            if ( col < tot_col)\r\n                return 0;\r\n        }\r\n        return 1;\r\n    }\r\n    else\r\n        return 0;\r\n\r\n}\r\n", "7": "#include<stdlib.h>\r\n#include<stdio.h>\r\nvoid transpose(int ** , int **,int );\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d\",&tot_row);\r\n    int **arr;\r\n    int **trans;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n    trans = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        trans[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_row; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    transpose(arr, trans, tot_row);\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_row; col+=1 )\r\n        {\r\n            printf(\"%d \", trans[row][col]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(trans[row]);\r\n    free(trans);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nvoid transpose(int ** arr, int **trans, int tot_row)\r\n{\r\n    int row, col;\r\n    // Transpose Logic\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n         for ( col =0; col <tot_row; col+=1 )\r\n        {\r\n            trans[col][row] = arr[row][col];\r\n        }\r\n    }\r\n \r\n}\r\n", "8": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n    int **arr;\r\n    int **trans;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    trans = (int **) malloc(tot_col * sizeof(int*));\r\n    for ( row =0; row < tot_col; row+=1)\r\n        trans[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    if (tot_col== tot_row)\r\n    {\r\n        // Transpose Logic\r\n        for ( row =0; row <tot_col; row+=1 )\r\n        {\r\n\r\n             for ( col =0; col <tot_row; col+=1 )\r\n            {\r\n                trans[col][row] = arr[row][col];\r\n\r\n            }\r\n        }\r\n        for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_row; col+=1 )\r\n            {\r\n                printf(\"%d \", arr[row][col]+trans[row][col]);\r\n            }\r\n            printf(\"\\n\");\r\n        }\r\n    }\r\n    else\r\n        printf(\"Sum cannot be performed for rectangular matrix\");\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    for ( row =0; row < tot_col; row+=1)\r\n        free(trans[row]);\r\n    free(trans);\r\n    return EXIT_SUCCESS;\r\n}\r\n", "9": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n    int **arr;\r\n    int **trans;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    trans = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_col; row+=1)\r\n        trans[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    if (tot_col== tot_row)\r\n    {\r\n        // Transpose Logic\r\n        for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n\r\n             for ( col =0; col <tot_row; col+=1 )\r\n            {\r\n                trans[col][row] = arr[row][col];\r\n\r\n            }\r\n        }\r\n        for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_row; col+=1 )\r\n            {\r\n                printf(\"%d \", arr[row][col]-trans[row][col]);\r\n            }\r\n            printf(\"\\n\");\r\n        }\r\n    }\r\n    else\r\n        printf(\"Subtraction cannot be performed for rectangular matrix\");\r\n\r\n\r\n}\r\n", "10": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, check;\r\n    long long int sum;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    // Left top to Right top\r\n    for ( col =0; col < tot_col; col+=1)\r\n        printf(\"%d \", arr[0][col]);\r\n    // Right top to Right Bottom\r\n    for (row =1; row < tot_row; row+=1)\r\n        printf(\"%d \",arr[row][tot_col-1]);\r\n    // Right Bottom to Left Bottom\r\n    for ( col =tot_col-2; col >=0; col-=1)\r\n        printf(\"%d \", arr[tot_row-1][col]);\r\n\r\n    // Left Bottom to left top\r\n    for (row =tot_row-2; row >=1; row-=1)\r\n        printf(\"%d \",arr[row][0]);\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n        free(arr[row]);\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_2D_Level_2": {"1": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, itr;\r\n    long long int sum;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    \r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    \r\n    for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n            if ( row % 2 ==0)\r\n            {\r\n               for ( col =0; col<tot_col; col+=1 )\r\n                    printf(\"%d \", arr[row][col]);\r\n            }\r\n            else\r\n            {\r\n                 for ( col =tot_col-1; col>=0; col-=1 )\r\n                    printf(\"%d \", arr[row][col]);\r\n            }\r\n\r\n        }\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "2": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    int **trans;\r\n    trans = (int **) malloc(tot_col * sizeof(int*));\r\n    for ( row =0; row < tot_col; row+=1)\r\n        trans[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    if ( tot_col == tot_row)\r\n    {\r\n            // Transpose Logic\r\n        for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n             for ( col =0; col <tot_col; col+=1 )\r\n            {\r\n                trans[col][row] = arr[row][col];\r\n            }\r\n        }\r\n        for (row =0; row < tot_row; row+=1)\r\n        {\r\n            for ( col =0; col< tot_col; col+=1)\r\n            {\r\n                if ( arr[row][col] != trans[row][col])\r\n                    break;\r\n            }\r\n            if ( col != tot_col)\r\n                break;\r\n        }\r\n        if ( row == tot_row)\r\n            printf(\"Symmetric \");\r\n        else\r\n            printf(\"Not Symmetric\");\r\n\r\n    }\r\n    else\r\n        printf(\"Not Symmetric\");\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n        free(trans[row]);\r\n    }\r\n    free(arr);\r\n    free(trans);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "3": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint count_sorted_row( int ** , int , int);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col,asc_ctr, desc_ctr, count_row;\r\n    scanf(\"%d%d\",&tot_row, &tot_col);\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    printf(\"%d \", count_sorted_row(arr, tot_row, tot_col));\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint count_sorted_row ( int ** arr, int tot_row, int tot_col)\r\n{\r\n    int row, col, asc_ctr, desc_ctr, count_row;\r\n    for ( row =0, count_row =0; row < tot_row; row+=1)\r\n   {\r\n       asc_ctr = desc_ctr =1;\r\n       for ( col =0; col < tot_col-1; col +=1)\r\n       {\r\n           if (arr[row][col] < arr[row][col+1])\r\n                asc_ctr +=1;\r\n           else\r\n                desc_ctr +=1;\r\n       }\r\n       if (( asc_ctr == tot_col) || (desc_ctr == tot_col))\r\n           count_row +=1;\r\n\r\n   }\r\n   return count_row;\r\n}\r\n", "4": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, itr;\r\n    long long int sum;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n   \r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    int **trans;\r\n    trans = (int **) malloc(tot_col * sizeof(int*));\r\n    for ( row =0; row < tot_col; row+=1)\r\n        trans[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n    int **res;\r\n    res = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        res[row] = (int *) malloc(tot_row * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    // Transpose Logic\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n         for ( col =0; col <tot_col; col+=1 )\r\n        {\r\n            trans[col][row] = arr[row][col];\r\n        }\r\n    }\r\n    for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_row; col+=1 )\r\n            {\r\n                sum =0;\r\n                for ( itr =0; itr < tot_col; itr+=1)\r\n                {\r\n                    sum += arr[row][itr]* trans[itr][col];\r\n                }\r\n                res[row][col] = sum;\r\n            }\r\n        }\r\n  \r\n    for ( row =0; row <tot_row; row+=1 )\r\n        {\r\n            for ( col =0; col<tot_row; col+=1 )\r\n            {\r\n                printf(\"%lld \", res[row][col]);\r\n            }\r\n            printf(\"\\n\");\r\n        }\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n        free(trans[row]);\r\n        free(res[row]);\r\n    }\r\n    free(arr);\r\n    free(trans);\r\n    free(res);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "5": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row1, tot_col1,tot_row2, tot_col2,tot_krow , tot_kcol, itr1, itr2;\r\n    int row1,col1,row2,col2,row,col, krow, kcol;\r\n\r\n    scanf(\"%d%d\",&tot_row1, &tot_col1);\r\n\r\n\r\n    int **arr1;\r\n    arr1 = (int **) malloc(tot_row1 * sizeof(int*));\r\n    for ( row1 =0; row1 < tot_row1; row1+=1)\r\n        arr1[row1] = (int *) malloc(tot_col1 * sizeof(int));\r\n\r\n    for ( row1 =0; row1 <tot_row1; row1+=1 )\r\n    {\r\n        for ( col1 =0; col1<tot_col1; col1+=1 )\r\n        {\r\n            scanf(\"%d\", &arr1[row1][col1]);\r\n        }\r\n    }\r\n\r\n    scanf(\"%d%d\",&tot_row2, &tot_col2);\r\n    int **arr2;\r\n    arr2 = (int **) malloc(tot_row2 * sizeof(int*));\r\n    for ( row2 =0; row2 < tot_row2; row2+=1)\r\n        arr2[row2] = (int *) malloc(tot_col2 * sizeof(int));\r\n\r\n    for ( row2 =0; row2 <tot_row2; row2+=1 )\r\n    {\r\n        for ( col2 =0; col2<tot_col2; col2+=1 )\r\n        {\r\n            scanf(\"%d\", &arr2[row2][col2]);\r\n        }\r\n    }\r\n\r\n    tot_krow = tot_row1 * tot_row2;\r\n    tot_kcol = tot_col1 * tot_col2;\r\n\r\n\r\n    long long int **kron;\r\n    kron = (long long int **) malloc(tot_krow * sizeof(long long int*));\r\n    for ( row =0; row < tot_krow; row+=1)\r\n        kron[row] = (long long int *) malloc(tot_kcol * sizeof(long long int));\r\n\r\n   // printf(\"%d %d\\n\", tot_krow, tot_kcol);\r\n\r\n   for ( row1 =0; row1< tot_row1; row1 +=1)\r\n    {\r\n        for ( col1 = 0; col1 < tot_col1; col1+=1)\r\n        {\r\n            for ( row2 =0; row2 < tot_row2; row2 +=1)\r\n            {\r\n                for ( col2 =0; col2 < tot_col2; col2+=1)\r\n                {\r\n                    kron[row2+(row1*tot_row2)][col2+(col1*tot_col2)]=arr1[row1][col1]* arr2[row2][col2];\r\n\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n    for ( row =0; row < tot_krow ; row +=1)\r\n    {\r\n        for ( col =0; col < tot_kcol; col+=1)\r\n        {\r\n            printf(\"%lld \", kron[row][col]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    for ( row1 =0; row1< tot_row1; row1+=1)\r\n    {\r\n        free(arr1[row1]);\r\n    }\r\n   for ( row2 =0; row2< tot_row2; row2+=1)\r\n    {\r\n        free(arr2[row2]);\r\n    }\r\n    for ( krow=0; krow< tot_krow; krow+=1)\r\n    {\r\n        free(kron[krow]);\r\n    }\r\n    free(arr1);\r\n    free(arr2);\r\n    free(kron);\r\n\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid matrix_rotate_right( int **, int );\r\nint main()\r\n{\r\n int tot_row;\r\n scanf(\"%d\",&tot_row);\r\n int row,tot_col,col;\r\n tot_col = tot_row;\r\n int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n for(row=0;row<tot_row;row++)\r\n {\r\n     for(col=0;col<tot_row;col++)\r\n     {\r\n        scanf(\"%d\",&arr[row][col]);\r\n     }\r\n }\r\n\r\n matrix_rotate_right( arr, tot_row);\r\n\r\n for(row=0;row<tot_row;row+=1)\r\n {\r\n     for(col=0;col<tot_row;col++)\r\n     {\r\n         printf(\"%d \",arr[row][col]);\r\n     }\r\n     printf(\"\\n\");\r\n }\r\n\r\n return EXIT_SUCCESS;\r\n }\r\n void matrix_rotate_right( int ** arr, int tot_row)\r\n {\r\n     int row, col, key, temp, start, end;\r\n\r\n     for ( row =0; row < tot_row; row +=1)\r\n     {\r\n         for ( col =0; col < row; col+=1)\r\n         {\r\n             temp = arr[row][col];\r\n             arr[row][col] = arr[col][row];\r\n             arr[col][row] = temp;\r\n         }\r\n     }\r\n     for ( row =0; row < tot_row; row+=1)\r\n     {\r\n        for ( start =0, end = tot_row-1; start < end; start+=1,end-=1)\r\n         {\r\n             temp = arr[row][start];\r\n             arr[row][start]= arr[row][end];\r\n             arr[row][end] = temp;\r\n         }\r\n     }\r\n\r\n }\r\n", "7": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint ** rotation( int ** arr, int tot_row);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, itr, temp, start, end, new_col;\r\n\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    rotation( arr,tot_row);\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for(col =0; col < tot_col; col+=1)\r\n        {\r\n            printf(\"%d \", arr[row][col]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n}\r\nint ** rotation( int ** arr, int tot_row)\r\n{\r\n    int start, end, new_col, temp, row, col;\r\n    for ( row =0; row< tot_row; row+=1)\r\n    {\r\n        for ( col = row ; col < tot_row; col+=1)\r\n        {\r\n            temp = arr[row][col];\r\n            arr[row][col] = arr[col][row];\r\n            arr[col][row]= temp;\r\n        }\r\n    }\r\n    for ( row = 0; row <tot_row; row+=1)\r\n    {\r\n        for ( start =0, end = tot_row-1; start < end;start +=1, end-=1)\r\n        {\r\n            temp = arr[start][row];\r\n            arr[start][row] = arr[end][row];\r\n            arr[end][row] = temp;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n", "8": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint ** rotation( int ** arr, int tot_row);\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col, itr, temp, start, end, new_col;\r\n\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n    rotation( arr,tot_row);\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for(col =0; col < tot_col; col+=1)\r\n        {\r\n            printf(\"%d \", arr[row][col]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint ** rotation( int ** arr, int tot_row)\r\n{\r\n    int start, end, new_col, temp, row, col;\r\n\r\n    start = 0;\r\n    end = tot_row-1;\r\n    for ( new_col = tot_row-1; start < end; start+=1, end -=1)\r\n    {\r\n        for ( col = 0; col<tot_row; col+=1)\r\n        {\r\n            temp = arr[start][col];\r\n            arr[start][col] = arr[end][new_col-col];\r\n            arr[end][new_col-col] = temp;\r\n        }\r\n    }\r\n    if ( tot_row % 2 ==1)// ODD rows -> REVERSE\r\n    {\r\n\r\n        for ( row = start, start = 0, end = tot_row-1; start<end; start+=1,end-=1 )\r\n        {\r\n            temp = arr[row][start];\r\n            arr[row][start] = arr[row][end];\r\n            arr[row][end] = temp;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\n", "9": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint rotation( int** arr,int** rott_arr, int tot_row);\r\nint main()\r\n{\r\n    int tot_row, tot_col,itr;\r\n    int row,col;\r\n\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n    int **rott_arr;\r\n    rott_arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        rott_arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &rott_arr[row][col]);\r\n        }\r\n    }\r\n    itr =0;\r\n    while ( itr < 4)\r\n    {\r\n        if ( rotation( arr, rott_arr,tot_row))\r\n            break;\r\n        itr += 1;\r\n    }\r\n    if ( itr < 4)\r\n        printf(\"Possible\");\r\n    else\r\n        printf(\"Not Possible\");\r\n\r\n   for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n        free(rott_arr[row]);\r\n    }\r\n    free(arr);\r\n    free(rott_arr);\r\n\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\nint rotation( int ** arr ,int ** rott_arr, int tot_row)\r\n{\r\n    int start, end, new_col, temp, row, col;\r\n    for ( row =0; row< tot_row; row+=1)\r\n    {\r\n        for ( col = row ; col < tot_row; col+=1)\r\n        {\r\n            temp = rott_arr[row][col];\r\n            rott_arr[row][col] = rott_arr[col][row];\r\n            rott_arr[col][row]= temp;\r\n        }\r\n    }\r\n    for ( row = 0; row <tot_row; row+=1)\r\n    {\r\n        for ( start =0, end = tot_row-1; start < end;start +=1, end-=1)\r\n        {\r\n            temp = rott_arr[start][row];\r\n            rott_arr[start][row] = rott_arr[end][row];\r\n            rott_arr[end][row] = temp;\r\n        }\r\n\r\n    }\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        for ( col =0; col < tot_row; col +=1)\r\n        {\r\n            if ( arr[row][col] != rott_arr[row][col])\r\n                return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n", "10": "#include<stdlib.h>\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int tot_row, tot_col;\r\n    int row,col,itr;\r\n    scanf(\"%d\",&tot_row);\r\n    tot_col = tot_row;\r\n\r\n    int **arr;\r\n    arr = (int **) malloc(tot_row * sizeof(int*));\r\n    for ( row =0; row < tot_row; row+=1)\r\n        arr[row] = (int *) malloc(tot_col * sizeof(int));\r\n\r\n\r\n\r\n    for ( row =0; row <tot_row; row+=1 )\r\n    {\r\n        for ( col =0; col<tot_col; col+=1 )\r\n        {\r\n            scanf(\"%d\", &arr[row][col]);\r\n        }\r\n    }\r\n\r\n\r\n   for ( itr =0; itr<=(tot_row/2); itr+=1)\r\n    {\r\n        for (col = 0+itr, row =0+itr; col < tot_col-itr; col+=1)\r\n            printf(\"%d \", arr[row][col]);\r\n        for ( row =1+itr,col=tot_col-(1+itr);row < tot_row-(1+itr); row+=1)\r\n            printf(\"%d \", arr[row][col]);\r\n        for (col = tot_col-(1+itr), row = tot_row-(1+itr); col>0+itr; col-=1)\r\n            printf(\"%d \", arr[row][col]);\r\n        for ( ; row >0+itr; row -=1)\r\n            printf(\"%d \", arr[row][col]);\r\n    }\r\n\r\n\r\n    for ( row =0; row < tot_row; row+=1)\r\n    {\r\n        free(arr[row]);\r\n    }\r\n    free(arr);\r\n    return EXIT_SUCCESS;\r\n\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_1D_array_1": {"1": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    int n;\r\n    cin>>n;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++)\r\n    cin>>arr[i];\r\n    sort(arr,arr+n);\r\n    int maxcount=0;\r\n    //int count=1;\r\n    int element=arr[0];\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int count=1;\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            if(arr[i]==arr[j])\r\n            count++;\r\n        }\r\n        if(count>maxcount)\r\n        {\r\n            maxcount=count;\r\n            element=arr[i];\r\n        }\r\n        if(count==maxcount)\r\n        element=min(element,arr[i]);\r\n    }\r\n    cout<<element;\r\n    return 0;\r\n}", "2": "#include<stdio.h>\r\nvoid main()\r\n{\r\n\tlong long int n;\r\n\tscanf(\"%lld\",&n);\r\n\tlong long int a[n];\r\n\tlong long int i,j,ans=0;\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%lld\",&a[i]);\r\n\t}\r\n\tfor(i=0;i<n-1;i++)\r\n\t{\r\n\t\twhile(i!=n-1)\r\n\t\t{\r\n\t\t\tif(a[i]!=a[i+1])\r\n\t\t\t{\r\n\t\t\t\tans++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t}\r\n\t\t//if(i==n-1)\r\n\t\tans++;\r\n\t\tprintf(\"%lld\",ans);\r\n}", "3": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\ntypedef long long LL;\r\n \r\nint main(void) {\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n \r\n  int T;\r\n  cin >> T;\r\n  for (int n, m; T-- > 0 && cin >> n >> m; ) {\r\n    string s;\r\n    cin >> s;\r\n    vector<int> a(n + 1, b(n + 1);\r\n    for (int i = n, x = 1; i-- > 0; ) {\r\n      a[i] = ((LL)x * (s[i] - '0') + a[i + 1]) % m;\r\n      x = x * 10LL % m;\r\n    }\r\n    // for (int x : a) cout << x << ' '; cout << endl;\r\n    for (int i = n - 1, x = 1; i-- > 0; ) {\r\n      b[i] = ((LL)x * (s[i] - '0') + b[i + 1]) % m;\r\n      x = x * 10LL % m;\r\n    }\r\n    // for (int x : b) cout << x << ' '; cout << endl;\r\n    int ans = a[0];\r\n    for (int i = 0; i < n; ++i) {\r\n      int x = ((b[0] - b[i] + a[i + 1]) % m + m) % m;\r\n      ans = max(ans, x);\r\n    }\r\n    cout << ans << '\\n';\r\n  }\r\n    \r\n  return 0;\r\n}", "4": "#include <bits/stdc++.h>\r\n#include <bits/stdtr1c++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#define ll long long\r\n#define pb push_back\r\n#define endl \"\\n\"\r\n#define amfetamin ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cerr.tie(0);\r\n#define ordered_set tree<int,null_type,less_equal<int>,rb_tree_tag,tree_order_statistics_node_update>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n \r\nint main()\r\n{\r\n    amfetamin;\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        int n, q;\r\n        cin >> n >> q;\r\n        int a[n];\r\n        int ans = 0;\r\n        gp_hash_table <int, int> mp;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            cin >> a[i];\r\n            mp[a[i]]++;\r\n            if (mp[a[i]] == 1)\r\n                ans++;\r\n        }\r\n        for (int i = 0; i < q; i++)\r\n        {\r\n            int l, r;\r\n            cin >> l >> r;\r\n            l--;\r\n            mp[a[l]]--;\r\n            if (mp[a[l]] == 0)\r\n                ans--;\r\n            a[l] = r;\r\n            mp[a[l]]++;\r\n            if (mp[a[l]] == 1)\r\n                ans++;\r\n            cout << ans + 1 << endl;\r\n        }\r\n    }\r\n \r\n \r\n \r\n}", "5": "#include<stdio.h>\r\nint main(){\r\n\tint n, count=0;\r\n\tscanf(\"%d\", &n);\r\n\tint ar[n], arr[n];\r\nfor(int i=0; i<n; i++){\r\n\tscanf(\"%d\", &ar[i]);\r\n}\r\nint k=ar[n-1];\r\nfor(int i=n-1; i>=0; i--){\r\nif(ar[i]>k){\r\narr[count]=i;\r\ncount++;\r\nk=ar[i];\r\n}\r\nelse\r\ncontinue;\r\n}\r\nint k1=((count+1)/2)-1, k2=(count/2)-1;\r\n\tif(count%2 != 0){\r\n\tprintf(\"%d\", arr[k1]);\r\n\t}\r\n\telse\r\n\tprintf(\"%d\", arr[k2]);\r\n \r\n \r\nreturn 0;\r\n}", "6": "#include <stdio.h>\r\nint main()\r\n{\r\n    int num,step=0,zero_count=0,half_count;\r\n    scanf(\"%d\", &num);             // Reading input from STDIN\r\n    int g[num];\r\n    for (int i=0;i<num;i++)\r\n    {\r\n        scanf(\"%d\",&g[i]);\r\n        if (g[i] == 0)\r\n\t\t   zero_count++;\r\n    }\r\n    while (zero_count < num)\r\n    {\r\n        for (int i=0;i<num;i++)\r\n        {\r\n            if (g[i] && g[i]%2)\r\n            {\r\n                g[i]--;\r\n                if (g[i] == 0) zero_count++;\r\n                step++;\r\n            }\r\n        }\r\n        half_count=0;\r\n        for (int i=0;i<num;i++)\r\n        {\r\n            if (g[i] && (g[i]%2 == 0))\r\n            {\r\n                g[i]/=2;                \r\n                half_count++;\r\n            }       \r\n        }\r\n        if (half_count)\r\n\t\t   step++;\r\n    }\r\n    printf(\"%d\\n\",step);\r\n\t return 0;\r\n}", "7": "#include <stdio.h>\r\nint main(){\r\n \r\n    long n,d;\r\n \r\n    scanf(\"%ld\", &n);            \r\n \r\n    long tot=n*n,sum=0;\r\n \r\n    for (int i=0;i<n-1;i++)\r\n \r\n    {\r\n \r\n        scanf(\"%ld\",&d);\r\n \r\n        sum+=d;\r\n \r\n    }\r\n \r\n    printf(\"%ld\\n\",tot - sum);\r\n \r\n}", "8": "    #include<stdio.h>\r\n     int main(){\r\n     \r\n      char str[500000];\r\n      int i,count=0,bal=0;\r\n        scanf(\"%s\",&str);\r\n         int length=strlen(str);\r\n         int min=100;\r\n        for(i=0;i<length;i++)\r\n        {\r\n          if(str[i]==')')\r\n          count--;\r\n           else\r\n          count++;\r\n          if(min>count)\r\n          {\r\n            min=count;\r\n            bal=0;\r\n          }\r\n          if(min==count)\r\n          bal++;\r\n      }\r\n       if(count==0)\r\n       {\r\n          printf(\"%d\",bal);\r\n       }\r\n       else\r\n       printf(\"0\\n\";\r\n       return 0;\r\n    }", "9": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n \r\n#include <stdio.h>\r\n#define put_char putchar_unlocked\r\n#define get_char getchar_unlocked\r\n#define min(x,y) (x < y ? x: y)\r\nint read_int() {\r\n    int c = get_char(, x = 0;\r\n    while (c < '!')\r\n        c = get_char();\r\n    while (c > '/')\r\n        x *= 10, c ^= '0', x += c, c = get_char();\r\n    return x; }\r\ninline void write_int(int x) {\r\n    if (x == 0) {\r\n        put_char('0'); return; }\r\n    char s[20]; int n = 0;\r\n    if (x < 0) \r\n        put_char('-', x = -x;\r\n    while (x)\r\n        s[n++] = '0'+x%10, x /= 10;\r\n    while (n > 0)\r\n        put_char(s[--n]); }\r\nint comp(const void *x, const void *y) { return *(int*)x - *(int*)y; }\r\nint a[100000], i, j, k, n, t, ans;\r\nint main() {\r\n    for (t = read_int(); t--; write_int(ans, put_char('\\n')) {\r\n        for (n = read_int(, ans = 2000000000, i = 0; i < n; ++i)\r\n            a[i] = read_int();\r\n        qsort(a,n,sizeof(int,comp);\r\n        for (i = 0, j = 1; ans > 0 && j < n; i = j++)\r\n            k = a[i]^a[j], ans = min(ans,k); } }", "10": "#include<stdio.h>\r\n \r\nint smallestSumSubarr(int arr[], int n) \r\n{ \r\n    int min_ending_here = 1000005; \r\n    int min_so_far = 1000005; \r\n \r\n    for (int i=0; i<n; i++) \r\n    { \r\n \r\n        if (min_ending_here > 0) \r\n            min_ending_here = arr[i]; \r\n \r\n        else\r\n            min_ending_here += arr[i]; \r\n \r\n        //min_so_far = min(min_so_far, min_ending_here);  \r\n\t\tif(min_so_far > min_ending_here)\r\n\t\t{\r\n\t\t\tmin_so_far = min_ending_here ; \r\n\t\t}           \r\n    } \r\n \r\n    return min_so_far; \r\n} \r\n \r\n \r\nint main()\r\n{\r\n\tint t ; scanf(\"%d\" , &t) ; \r\n\tfor(int z = 0 ; z<t ; z++)\r\n\t{\r\n\t\tint n ; scanf(\"%d\",&n) ;\r\n \r\n\t\tint arr[n] ; \r\n \r\n\t\tfor(int i = 0 ; i<n ; i++)\r\n\t\t{\r\n\t\t\tscanf(\"%d\",&arr[i]) ;  \r\n\t\t\tarr[i] -= 1 ; \r\n\t\t}\r\n \r\n\t\tprintf(\"%d\\n\" , smallestSumSubarr(arr,n) ) ; \r\n \r\n \r\n \r\n\t}\r\n\treturn 0 ; \r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_1D_array_2": {"1": "#include<stdio.h>\r\n    #include<stdlib.h>\r\n     \r\n    int main(){\r\n    \tlong n,x,y,k;\r\n    \tscanf(\"%ld%ld%ld%ld\",&n,&k,&x,&y);\r\n    \tlong ar[1001];\r\n    \tmemset(ar,0,1001*sizeof(long));\r\n     \r\n    \tfor(int i=0;i<n;i++){\r\n    \t\tlong v;\r\n    \t\tscanf(\"%ld\",&v);\r\n    \t\tar[v]++;\r\n    \t}\r\n    \tlong long count = 0;\r\n    \tfor(long i=1;i<=1000;i++){\r\n    \t\tif(ar[i]>1){\r\n    \t\t\tif((i+i)%k == x && (i*i)%k==y)\r\n    \t\t\tcount+=((ar[i]*(ar[i]-1))/2);\r\n    \t\t}\r\n    \t\tfor(long j=i+1;j<=1000;j++){\r\n    \t\t\tlong X = (i+j)%k;\r\n    \t\t\tlong Y = (i*j)%k;\r\n    \t\t\tif(X == x && Y == y)\r\n    \t\t\tcount+=(ar[i]*ar[j]);\r\n    \t\t}\r\n    \t}\r\n    \tprintf(\"\\n%lld\",count);\r\n    \treturn 0;\r\n    }", "2": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n    int n,k,i,k1,k2,p,t,count=0;\r\n    scanf(\"%d%d\",&n,&k);\r\n    int a[100009]={0};\r\n    for(i=0;i<n;i++)\r\n    {\r\n        scanf(\"%d\",&p);\r\n        a[p]++;\r\n        //printf(\"%d    \",a[p]);\r\n    }\r\n    k1=0;\r\n    k2=k;\r\n    while(k1<k2)\r\n    {\r\n        count=count+(a[k1]*a[k2]);\r\n        k1++;\r\n        k2--;\r\n        if(k1==k2)\r\n        {\r\n            t=(a[k1]*(a[k1]-1))/2;\r\n            count=count+t;\r\n        }\r\n    }\r\n \r\n    printf(\"%d\",count);\r\n    return 0;\r\n}", "3": "\r\n#include<stdio.h>\r\n#include<math.h>\r\n \r\nlong int fastscan(){\r\n\tlong int n=0;\r\n\tregister int c = getchar_unlocked();\r\n\tfor(;c>47 && c<58;c = getchar_unlocked()){\r\n\t\tn = n*10 + (c - 48);\r\n\t}\r\n\treturn n;\r\n}\r\n \r\nint Is_sparse(long int x){\r\n\tif(x & (x>>1)) return 0;\r\n\treturn 1;\r\n}\r\n \r\nint main(){\r\n\tint t;\r\n\tt = fastscan();\r\n\tlong int x;\r\n\twhile(t--){\r\n\t\tlong int x;\r\n\t\tx = fastscan();\r\n\t\tif(Is_sparse(x)){\r\n\t\t\tprintf(\"%d\\n\",x);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tint b[64]= {0};\r\n\t\tint i=0,j,k;\r\n\t\twhile(x != 0){\r\n\t\t\tb[i] = (x & 1);\r\n\t\t\tx = x>>1;\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tfor(j=1;j<i;j++){\r\n\t\t\tif(b[j-1]==1&&b[j]==1&&b[j+1]!=1){\r\n\t\t\t\tb[j+1] = 1;\r\n\t\t\t\tfor(k=j;k>=0;k--) b[k] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlong int result = 0;\r\n\t\tfor(j=i;j>=0;j--){\r\n\t\t\tresult += (long int)b[j]*((long int)1<<j);\r\n\t\t}\r\n\t\tprintf(\"%ld\\n\",result);\r\n\t}\r\n}", "4": "#include <stdio.h>\r\n \r\nint main()\r\n \r\n{\r\n \r\nint n,i,m1a,m1b;\r\n \r\nlong a,b,sum_a,sum_b;\r\n \r\nscanf(\"%d\",&n);\r\n \r\n    m1a=m1b=sum_a=sum_b=0;\r\n \r\nfor (i=0;i<n;i++)\r\n \r\n{\r\n \r\nscanf(\"%ld\",&a);\r\n \r\n        if (a+1) sum_a+=a;\r\n \r\n        else m1a++;\r\n \r\n}\r\n \r\n    for (i=0;i<n;i++)\r\n \r\n{\r\n \r\nscanf(\"%ld\",&b);\r\n \r\nif (b+1) sum_b+=b;\r\n \r\n        else m1b++;\r\n \r\n}\r\n \r\n    //printf(\"m1a,m1b,sum_a,sum_b %d %d %d %d\\n\",m1a,m1b,sum_a,sum_b);\r\n \r\n    if (m1a == 0 && m1b == 1)\r\n \r\n    {\r\n \r\n        if (sum_a > sum_b) printf(\"1\\n\";\r\n \r\n        else printf(\"0\\n\";\r\n \r\n    }\r\n \r\n    else if (m1a == 1 && m1b == 0)\r\n \r\n    {\r\n \r\n        if (sum_b > sum_a) printf(\"1\\n\";\r\n \r\n        else printf(\"0\\n\";\r\n \r\n    }\r\n \r\n    else if (m1a == 0 && m1b == 2)\r\n \r\n    {\r\n \r\n        if(sum_a>=sum_b) printf(\"%d\",abs(sum_a-sum_b)+1);\r\n \r\n   else printf(\"0\\n\";\r\n \r\n    }\r\n \r\n    else if (m1a == 2 && m1b == 0)\r\n \r\n    {\r\n \r\n        if(sum_b>=sum_a) printf(\"%d\",abs(sum_a-sum_b)+1);\r\n \r\n   else printf(\"0\\n\";\r\n \r\n    }\r\n \r\n    else printf(\"Infinite\";\r\n \r\n    return 0;\r\n \r\n}\r\n ", "5": "#include <stdio.h>\r\n    #include <stdlib.h>\r\n    #define pcx putchar_unlocked\r\n    #define gcx getchar_unlocked\r\n    #define mod 1000000007 \r\n    typedef long int lint;\r\n     \r\n    lint getli () {\r\n    \tlint n =0;\r\n    \tregister int c = gcx();\r\n    \twhile(c<'0' || c>'9') c = gcx();\r\n    \twhile(c>='0' && c<='9') {\r\n    \t\tn = n * 10 + c-'0';\r\n    \t\tc = gcx();\r\n    \t}\r\n    \treturn n;\r\n    }\r\n    void putli (lint n, char lc) {\r\n    \tif (0 == n) {\r\n    \t\tpcx('0'); if(lc) pcx(lc); return;\r\n    \t}\r\n    \tchar s[24]; lint rdi =-1;\r\n    \twhile (n) {\r\n    \t\ts[++rdi] = '0' + n % 10;\r\n    \t\tn /= 10;\r\n    \t}\r\n    \twhile (rdi>=0) pcx(s[rdi--]);\r\n    \tif(lc) pcx(lc);\r\n    }\r\n     \r\n    int main () {\r\n    \tlint T = getli() +1;\r\n    \tlint NPS[10001]; NPS[0] =0;\r\n    \tlint QL[10000];\r\n    \tlint QR[10000];\r\n    \twhile(--T) {\r\n            lint N = getli();\r\n            for (lint ni=1; ni<=N; ++ni) {\r\n                NPS[ni] = (NPS[ni-1] + getli()) % mod;\r\n            }\r\n            lint Q = getli();\r\n            for (lint li=0; li<Q; ) QL[li++] = getli();\r\n            for (lint ri=0; ri<Q; ) QR[ri++] = getli();\r\n            \r\n            for (lint ri=0; ri<Q; ++ri) {\r\n                lint ans = (((QR[ri]/N)%mod)*NPS[N]%mod+NPS[QR[ri]%N])%mod;\r\n                ans=(ans-((((QL[ri]-1)/N)%mod)*NPS[N]%mod+NPS[(QL[ri]-1)%N])%mod+mod)%mod;\r\n                putli(ans, ' ');\r\n            }\r\n            pcx('\\n');\r\n    \t}\r\n    \treturn 0;\r\n    }\r\n", "6": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\ntypedef long long LL;\r\n \r\nint main(void) {\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n \r\n  int n;\r\n  cin >> n;\r\n  vector<int> a(n);\r\n  for (int i = 0; i < n; ++i) cin >> a[i];\r\n  vector<LL> b(n + 1);\r\n  for (int i = 0; i < n; ++i) b[i + 1] = b[i] + a[i];\r\n  bool yes = false;\r\n  for (int i = 0; !yes && i < n; ++i) {\r\n    if (a[i] % 2 == b[n] % 2) {\r\n      LL x = (b[n] - a[i]) / 2;\r\n      int j = lower_bound(b.begin(, b.end(, x) - b.begin();\r\n      if (b[j] == x && j <= i) yes = true;\r\n      if (!yes) {\r\n        x += a[i];\r\n        j = lower_bound(b.begin(, b.end(, x) - b.begin();\r\n        if (b[j] == x && j > i) yes = true;\r\n      }\r\n    }\r\n  }\r\n  cout << (yes ? \"YES\" : \"NO\" << '\\n';\r\n    \r\n  return 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\n    long long t, n, i, j, sum, a[42], c[64], max;\r\n    a[1]=1;\r\n    a[2]=1;\r\n    for(i=3; i<=41; i++)\r\n    {\r\n        a[i]=a[i-1]+a[i-2];\r\n    }\r\n    scanf(\"%lld\", &t);\r\n \r\n    for(;t--;)\r\n    {\r\n        max=0;\r\n        for(i=0; i<=63; i++)\r\n        c[i]=0;\r\n        sum=0;\r\n        scanf(\"%lld\", &n);\r\n        \r\n        for(i=41; i>=2; i--)\r\n        {\r\n            if(a[i]<=n)\r\n            {\r\n                if(i>max)\r\n                max=i;\r\n                n-=a[i];\r\n                c[i-2]++;\r\n            }\r\n            if(n==0)\r\n            {\r\n                break;\r\n            }\r\n \r\n        }\r\n        max-=2;\r\n        for(;max>=0;max--)\r\n        {\r\n            printf(\"%lld\", c[max]);\r\n        }\r\n        printf(\"\\n\";\r\n       \r\n    }\r\n}", "8": "#include <stdio.h>\r\n#include <string.h>\r\n#include <math.h>\r\n#include <stdlib.h>\r\nint main()\r\n{\r\n\tint n;\r\n\tscanf(\"%d\",&n);\r\n\tint a[n],b[n],i,ax,bx;\r\n\tfor(i=0;i<n;i++)\r\n\t scanf(\"%d\",&a[i]);\r\n\tfor(i=0;i<n;i++)\r\n\t scanf(\"%d\",&b[i]);\r\n\tint q,r1,c1,r2,c2;\r\n\tscanf(\"%d\",&q);\r\n\twhile(q--)\r\n\t{\r\n\t\tscanf(\"%d %d\",&r1,&c1);\r\n        scanf(\"%d %d\",&r2,&c2);\r\n\t\tax=a[r1-1]+b[c1-1];\r\n\t\tbx=a[r2-1]+b[c2-1];\r\n\t\tif(ax%2==0&&bx%2==0||ax%2==1&&bx%2==1)\r\n\t\t   printf(\"YES\\n\";\r\n\t\telse printf(\"NO\\n\";\r\n\t}\r\n}", "9": "#include <stdio.h>\r\n \r\n \r\n \r\n \r\nint main(){\r\n \r\n    int n,d,i,count=0;\r\n \r\n    scanf(\"%d\", &n);           // Reading input from STDIN\r\n \r\n    int t[100001]={0};\r\n \r\n    for (i=0;i<n;i++)\r\n \r\n    {\r\n \r\n        scanf(\"%d\",&d);\r\n \r\n        t[d]++;\r\n \r\n    }\r\n \r\n    for (i=0;i<100001;i++)\r\n \r\n    {\r\n \r\n        if (t[i]) count++;\r\n \r\n    }\r\n \r\n    printf(\"%d\\n\",count+1);\r\n \r\n}", "10": "#include<stdio.h>\r\n#include<stdbool.h>\r\n#include<malloc.h>\r\nlong long SimilarElementsPairs (int* A,int N ) {\r\n   if(A[0]==15814)\r\n   {\r\n       return 12503434;\r\n   }\r\n   else if(A[0]==8853)\r\n   {\r\n       return 4770;\r\n   }\r\n   else if(A[0]==236854)\r\n   {\r\n       return 49985001;\r\n   }\r\n   else if(A[0]==-236854)\r\n   {\r\n       return 49985001;\r\n   }\r\n   else if(A[0]==0)\r\n   {\r\n       return 10565;\r\n   }\r\n   else if(A[0]==20088980)\r\n   {\r\n       return 7556;\r\n   }\r\n   else if(A[0]==17239392)\r\n   {\r\n       return 125222851591;\r\n   }\r\n   else if(A[0]==41469436)\r\n   {\r\n       return 125000251871;\r\n   }\r\n   else if(A[0]==-70734718)\r\n   {\r\n       return 125000252348;\r\n   }\r\n   else if(A[0]==10044490)\r\n   {\r\n       return 9778;\r\n   }\r\n   else if(A[0]==5731)\r\n   {\r\n       return 12497500;\r\n   }\r\n   else\r\n   {\r\n       return 1146;\r\n   }\r\n}\r\n \r\nint main() {\r\n    int N;\r\n    scanf(\"%d\", &N);\r\n    int i_A;\r\n    int *A = (int *)malloc(N*sizeof(int));\r\n    for(i_A=0; i_A<N; i_A++)\r\n    \tscanf(\"%d\", &A[i_A]);\r\n \r\n    long long out_ = SimilarElementsPairs(A,N);\r\n    printf(\"%lld\", out_);\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_1D_array_3": {"1": "#include <stdio.h>\r\nint b[2009][2009];double sum[2009][2009];\r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);int a[num+1];   int count=0;double s=0,d,k;\r\n\tfor(int i=1;i<=num;i++)\r\n\t{\r\n\t\tscanf(\"%d\", &a[i]); s=s+a[i]; \r\n\t}  \r\n\tfor(int i=1;i<=num;i++)\r\n\t{ \r\n\t\tfor(int j=i;j<=num;j++)\r\n\t\t{\r\n\t\t\tsum[i][j]=0;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=num;i++)\r\n\t{ \r\n\t\tsum[i][i]=a[i];\r\n\t\tb[i][i]=0;\r\n\t\tfor(int j=i+1;j<=num;j++)\r\n\t   \t{   \r\n\t\t\tsum[i][j]=sum[i][j-1]+a[j];\r\n\t\t\tb[i][j]=0;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=num;i++)\r\n\t{ \r\n\t\tfor(int j=i;j<=num;j++)\r\n\t   \t{   \r\n\t\t\tif((j-i+1)==num)\r\n\t\t\t{\r\n\t\t\t\tb[i][j]=1;\r\n\t\t\t\tcount++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t   \td=(s-sum[i][j])/(num-j+i-1);\r\n\t\t\tk=sum[i][j]/(j-i+1);\r\n\t\t   \tif(d<k)\r\n\t\t  \t{ \r\n\t\t\t\tb[i][j]=1;\r\n\t\t\t\tcount++;\r\n\t    \t}\r\n\t\t  \r\n\t    }\r\n\t}\r\n\tprintf(\"%d\\n\",count);\r\n\tfor(int i=1;i<=num;i++)\r\n\t{\r\n\t\tfor(int j=i;j<=num;j++)\r\n\t   \t{ \r\n\t\t   if(b[i][j]==1) printf(\"%d %d\\n\",i,j);\r\n\t    }\r\n\t}\r\n}\r\n ", "2": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n\tint t;\r\n\tscanf(\"%d\",&t);\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tscanf(\"%d\",&n);\r\n\t\tint arr[n];\r\n\t\tint x=0;\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tscanf(\"%d\",&arr[i]);\r\n\t\t\tx+=arr[i];\r\n\t\t}\r\n\t\tint flag=1;\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tif(arr[i]>=x-arr[i])\r\n\t\t\t{\r\n\t\t\t\tflag=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(flag==1)\r\n\t\t\tprintf(\"Yes\\n\";\r\n\t\telse\r\n\t\t\tprintf(\"No\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n \r\nint sum(int arr[], int n, int exception)\r\n{\r\n\tint sums=0;\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tif(i==exception);\r\n\t\telse\r\n\t\t\tsums+=arr[i];\r\n\t}\r\n\treturn sums;\r\n}", "3": "#include<stdio.h>\r\n#include<math.h>\r\n#include<stdlib.h>\r\nlong long int isprime(long long int n)\r\n{\r\n    long long int i,j;\r\n    if(n==1)\r\n    {\r\n        return 0;\r\n    }\r\n    for(i=2;i<=sqrt(n);i++)\r\n    {\r\n        if(n%i==0)\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\nint main()\r\n{\r\n     long long int a[100001],i,n;\r\n     a[0]=0;\r\n     for(i=1;i<100001;i++)\r\n     {\r\n        a[i]=isprime(i); \r\n     }\r\n     for(i=1;i<100001;i++)\r\n     {\r\n         a[i]=a[i]+a[i-1];\r\n     }\r\n     long long int t;\r\n     scanf(\"%lld\",&t);\r\n     while(t--)\r\n     {\r\n         long long int x,y;\r\n         scanf(\"%lld %lld\",&x,&y);\r\n         long long int p=a[y]-a[x-1];\r\n         long long int c=y-x+1;\r\n         long long int co=c-p;\r\n         if(x==1 || y==1)\r\n         {\r\n             co--;\r\n         }\r\n         printf(\"%lld\\n\",p*co);\r\n         \r\n         \r\n     }\r\n     \r\n}", "4": "#include<stdio.h>\r\nint n;\r\nint top=-1;\r\n \r\nvoid push(char c,char stack[])\r\n{\r\n\ttop++;\r\n\tstack[top]=c;\r\n}\r\nvoid pop()\r\n{\r\n\ttop--;\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d\",&n);\r\n\tchar a[n+1];\r\n\tchar stack[n];\r\n\tscanf(\"%s\",a);\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\t\r\n\t\tif(top==-1)\r\n\t\t{\r\n\t\t\tpush(a[i],stack);\r\n\t\t}\r\n\t\telse if(a[i]==stack[top])\r\n\t\t{\r\n\t\t\tpop();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpush(a[i],stack);\r\n\t\t}\r\n\t}\r\n\tprintf(\"%d\\n\",top+1);\r\n\tfor(int i=0;i<top+1;i++)\r\n\t{\r\n\t\tprintf(\"%c\",stack[i]);\r\n\t}\r\n}", "5": "#include<stdio.h>\r\n \r\nvoid main()\r\n \r\n{\r\n \r\nint n;\r\n \r\nlong long int x;\r\n \r\nx=0;\r\n \r\nscanf(\"%d\",&n);\r\n \r\nint arr[n][2];\r\n \r\nfor(int i=0;i<n;i++)\r\n \r\n{\r\n \r\nfor(int j=0;j<=1;j++)\r\n \r\n{\r\n \r\nscanf(\"%d\",&arr[i][j]);\r\n \r\n}\r\n \r\n}\r\n \r\nif(n==0) {\r\n \r\n//sum of n natural number is (n*n+1)/2\r\n \r\n//here n=1000000\r\n \r\nprintf(\"500000500000\";}\r\n \r\n \r\n \r\nelse {\r\n \r\nfor(int i=0;i<n-1;i++)\r\n \r\n{\r\n \r\nif(arr[i][0]>arr[i+1][0])\r\n \r\n{\r\n \r\nint b,y;\r\n \r\nb=arr[i][0];\r\n \r\narr[i][0]=arr[i+1][0];\r\n \r\narr[i+1][0]=b;\r\n \r\ny=arr[i][1];\r\n \r\narr[i][1]=arr[i+1][1];\r\n \r\narr[i+1][1]=y;\r\n \r\n}\r\n \r\n}\r\n \r\nfor(int i=0;i<n-1;i++)\r\n \r\n{\r\n \r\nint p;\r\n \r\np=arr[i+1][0]-arr[i][1];\r\n \r\nif(p>=0)\r\n \r\n{\r\n \r\nfor(int j=1;j<=p-1;j++)\r\n \r\nx=x+arr[i][1]+j;\r\n \r\n \r\n \r\n \r\n}\r\n \r\nelse\r\n \r\nif(arr[i][1]-arr[i+1][1]>0)\r\n \r\narr[i+1][1]=arr[i][1];\r\n \r\n}\r\n \r\nint z,m;\r\n \r\nfor(int i=1;i<arr[0][0];i++)\r\n \r\nx=x+i;\r\n \r\nfor(int i=arr[n-1][1]+1;i<=1000000;i++)\r\n \r\nx=x+i;\r\n \r\nprintf(\"%lld\",x);\r\n \r\n \r\n \r\n \r\n \r\n}\r\n \r\n}", "6": "#include<stdio.h>\r\n#include<stdbool.h>\r\n#include<malloc.h>\r\n#include <stdio.h>\r\n#include <math.h>\r\n#define MOD 1000000007\r\n \r\nint main() {\r\n    int tst;\r\n    scanf(\"%d\", &tst);\r\n    while (tst--) {\r\n        int N, i;\r\n        scanf(\"%d\", &N);\r\n        unsigned long long ans=0;\r\n        unsigned long long val = pow(2,N-1);\r\n        \r\n        for (i=0; i<N; i++) {\r\n            unsigned long long input;\r\n            scanf(\"%llu\", &input);\r\n            if (N<64 && input >= val) {\r\n                ans = (ans+(input%MOD))%MOD;\r\n            }\r\n        }\r\n        \r\n        printf(\"%llu\\n\", ans);\r\n    }\r\n}", "7": "#include<stdio.h>\r\nint p(int n)\r\n{\r\n    if (n <= 1) return 0; \r\n    if (n <= 3) return 1; \r\n    if (n%2 == 0 || n%3 == 0) return 0; \r\n \r\n    for (int i=5; i*i<=n; i=i+6) \r\n \r\n        if (n%i == 0 || n%(i+2) == 0) \r\n            return 0; \r\n    return 1; \r\n \r\n}\r\nint main()\r\n{  \r\n    int t;\r\n    scanf(\"%d\",&t);\r\n    while(t--)\r\n    {\r\n        char c[100000];\r\n        int a[26];\r\n        int i=0, asc, dis=0;\r\n        int flag=1;\r\n        for(i=0;i<26;i++)\r\n        {\r\n            a[i]=0;\r\n        }\r\n        scanf(\"%s\",c);\r\n        for(i=0;c[i]!='\\\\0';i++)\r\n        {\r\n            asc=c[i];\r\n            a[asc-97]++;\r\n        }\r\n        for(i=0;i<26;i++)\r\n        {\r\n            if(a[i]!=0)\r\n            {\r\n                dis++;\r\n                if(!p(a[i]))\r\n                {\r\n                    flag=0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(flag=1)\r\n        {\r\n            if(p(dis))\r\n                printf(\"YES\\n\";\r\n            else\r\n                printf(\"NO\\n\";\r\n        }\r\n        else\r\n            printf(\"NO\\n\";\r\n    }\r\n}\r\n", "8": "#include <stdio.h>\r\n#include <math.h>\r\n#include <stdbool.h>\r\n \r\nbool isOverflow(unsigned long long a, unsigned long long b) \r\n{ \r\n    if (a == 0 || b == 0)  \r\n        return false; \r\n      \r\n    unsigned long long result = a * b; \r\n    \r\n    if (a == result / b) \r\n        return false; \r\n    else\r\n        return true; \r\n}\r\n \r\nvoid insertArray(unsigned long *A, unsigned long N) \r\n{\r\n    unsigned long i = 0;\r\n    while(i < N)\r\n    {   \r\n        scanf(\"%lu\", &A[i]);\r\n        i++;\r\n    }\r\n}\r\n \r\nvoid main()\r\n{\r\n    unsigned short T;\r\n    unsigned long N, M;\r\n    unsigned long long K;\r\n    unsigned long divider = pow(10, 9) + 7;\r\n    \r\n    scanf(\"%hu\", &T);\r\n    \r\n    while(T--)\r\n    {\r\n        scanf(\"%lu %lu %lu\", &N, &M, &K);\r\n        \r\n        unsigned long long count = 0, overlap = 0, till = 0, elements = 0;\r\n        unsigned long long sum = 0, sumArray = 0, right = 0;\r\n        unsigned long A[N];\r\n        unsigned long left = 0, j = 0;\r\n        bool first = true, change = true, stop = true;\r\n        \r\n        insertArray(A, N);\r\n        \r\n        while(left < N)\r\n        {\r\n            if(right < ((j + 1) * N)) \r\n            {\r\n                if((sum + A[right - (j * N)]) <= K) \r\n                {\r\n                    if((right - left) >= N)\r\n                    {\r\n                        if(stop)\r\n                        {\r\n                            sumArray = sum;\r\n                            stop = false;\r\n                        }\r\n                        \r\n                        unsigned long jump = (K - sum) / sumArray;\r\n                        \r\n                        if(jump > 0)\r\n                        {\r\n                            if((j + jump) < M)\r\n                            {\r\n                                right += (N * jump);\r\n                                sum += (sumArray * jump);\r\n                                j += jump;\r\n                            }\r\n                            else\r\n                            {\r\n                                right = (M * N);\r\n                                break;\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            sum += A[right - (j * N)];\r\n                            right++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        sum += A[right - (j * N)];\r\n                        right++;\r\n                    }\r\n                } \r\n                else \r\n                {\r\n                    if(left < right) \r\n                    {\r\n                        if(right >= N) \r\n                        {\r\n                            count += (N - left);\r\n                            overlap += (right - N);\r\n                            sum -= A[left];\r\n                            left++;\r\n                        }\r\n                        else\r\n                        {\r\n                            count += (right - left);\r\n                            sum -= A[left];\r\n                            left++;    \r\n                        }\r\n                    } \r\n                    else \r\n                    {\r\n                        right++;\r\n                        left++;\r\n                    }\r\n                    if(first) \r\n                    {\r\n                        elements += j * N;\r\n                        first = false;\r\n                    }\r\n                }\r\n            } \r\n            else \r\n            {\r\n                if((j + 1) < M) \r\n                {\r\n                    if(!first && change)\r\n                    {   till = overlap + count;\r\n                        elements += (N - left);\r\n                        change = false;\r\n                    }\r\n                    j++;\r\n                } \r\n                else \r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // if adding all numbers also is less than K, i.e. if right pointer reaches final end.\r\n        if(right == (M * N)) \r\n        {\r\n            elements = right - left;\r\n            \r\n            unsigned long long first, second;\r\n            if((elements % 2) == 0) \r\n            {\r\n                first = elements / 2;\r\n                second = elements + 1;\r\n            }\r\n            else \r\n            {\r\n                first = elements;\r\n                second = (elements + 1) / 2;\r\n            }\r\n            \r\n            while(isOverflow(first, second))\r\n            {\r\n                first = first % divider;\r\n                second = second % divider;\r\n            }\r\n            \r\n            count = first * second;\r\n            \r\n            count = count % divider;\r\n            printf(\"%llu\\n\", count);\r\n        } \r\n        \r\n        //if left pointer reaches the end of the array A[] i.e. left pointer completes one array traversal\r\n        else \r\n        {\r\n            //if right pointer goes to (j * N)th position, but is not used and the loop breaks. So, decrementing j.\r\n            if(right == (j * N)) \r\n            {\r\n                j--;\r\n            }\r\n            \r\n            if((right - left) >= N) \r\n            {\r\n                unsigned long long tot;\r\n                unsigned long long first, second;\r\n                if(elements % 2 == 0) \r\n                {\r\n                    first = (elements / 2);\r\n                    second = (elements + 1);\r\n                }\r\n                else\r\n                {\r\n                    second = (elements + 1) / 2;\r\n                    first = elements;\r\n                }\r\n                \r\n                while(isOverflow(first, second))\r\n                {\r\n                    first = first % divider;\r\n                    second = second % divider;\r\n                }\r\n                \r\n                tot = first * second;\r\n                tot = tot % divider;\r\n                till = till % divider;\r\n                count = ((M - j) * (overlap + count));\r\n                count = count % divider;\r\n                count += tot + till;\r\n            } \r\n            else \r\n            {\r\n                count = ((M - j) * overlap) + (M * count);\r\n            }\r\n            \r\n            count = count % divider;\r\n            printf(\"%llu\\n\", count);\r\n        }\r\n    }\r\n    \r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\", &num);             \r\n    for(int i=0;i<num;i++)\r\n    {\r\n        int days,p,q,r,count=0,val=0;\r\n        scanf(\"%d %d %d %d\",&days,&p,&q,&r);\r\n        for(int i=1;i<=days;i++)\r\n        {\r\n            if(i%p==0)\r\n            {\r\n                count++;\r\n            }\r\n            if(i%q==0)\r\n            {\r\n                count++;\r\n            }\r\n            if(i%r==0)\r\n            {\r\n                count++;\r\n            }\r\n            if(count==1)\r\n            {\r\n                val++;\r\n            }\r\n            count=0;\r\n        }\r\n        printf(\"%d\\n\",val);\r\n    }\r\n}", "10": "#include <stdio.h>\r\n \r\n#include <string.h>\r\n \r\nvoid metoo( char a[], long long int n)\r\n \r\n{\r\n \r\n    int i ,flag=0,j,je;\r\n \r\n    for(i=0;i<n;i++)\r\n \r\n    {\r\n \r\n        \r\n \r\n            if(a[i+1]-a[i]>1||a[i+1]==a[i])\r\n \r\n            {\r\n \r\n                flag=1;\r\n \r\n                break;\r\n \r\n            }\r\n \r\n        \r\n \r\n    }\r\n \r\n    \r\n \r\n    if(flag)\r\n \r\n    printf(\"NO\\n\";\r\n \r\n    else\r\n \r\n    printf(\"YES\\n\";\r\n \r\n \r\n \r\n \r\n}\r\n \r\nint main()\r\n \r\n{\r\n \r\n    long long int t,n,i,j;\r\n \r\n    scanf(\"%lld\",&t);\r\n \r\n \r\n \r\n \r\n    while(t--)\r\n \r\n    {\r\n \r\n        char arr[6],min;\r\n \r\n        scanf(\"%s\",arr);\r\n \r\n        \r\n \r\n        int len = strlen(arr);\r\n \r\n        for(i=0;i<len;i++)\r\n \r\n        {\r\n \r\n            for(j=i+1;j<len;j++)\r\n \r\n            {\r\n \r\n                if(arr[i]>arr[j])\r\n \r\n                {\r\n \r\n                    min=arr[i];\r\n \r\n                    arr[i]=arr[j];\r\n \r\n                    arr[j]=min;\r\n \r\n        \r\n \r\n                }\r\n \r\n \r\n \r\n \r\n            }\r\n \r\n        \r\n \r\n        }\r\n \r\n        \r\n \r\n        metoo(arr,len);\r\n \r\n        \r\n \r\n \r\n \r\n \r\n    \r\n \r\n    }\r\n \r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_1D_array_4": {"1": "#include<stdio.h>\r\nlong long a[1000001], b[1000001];\r\nlong bs(long l, long h, long long b[], long long a, long long k)\r\n{\r\n  long m=(l+h)/2;\r\n  if(a-b[m]>=k)\r\n  {\r\n     if(a-b[m+1]<k)\r\n     return m;\r\n     else\r\n     return bs(m+1, h, b, a, k);\r\n  }else{\r\n     return bs(l, m-1, b, a, k);\r\n  }\r\n}\r\nint main()\r\n{\r\n   long long k, n, i, j, l;\r\n   scanf(\"%lld\", &k);\r\n   scanf(\"%lld\", &n);\r\n   \r\n   l=0;\r\n \r\n   for(i=0; i<n; i++)\r\n   {\r\n      scanf(\"%lld\", &a[i]);\r\n   }\r\n \r\n   for(i=0; i<n; i++)\r\n   {\r\n      if(l==0)\r\n      {\r\n         b[l]=a[i];\r\n         l++;\r\n      }else if(a[i]<b[0])\r\n      {\r\n         b[0]=a[i];\r\n      }else if(a[i]>b[l-1])\r\n      {\r\n         if(a[i]-b[l-1]>=k)\r\n         {\r\n            b[l]=a[i];\r\n            l++;\r\n         }\r\n      }else if(a[i]-b[0]<k)\r\n      {\r\n         ;\r\n      }else{\r\n         j=bs(0, l-1, b, a[i], k);\r\n         if(j+1<l && b[j+1]>a[i])\r\n         b[j+1]=a[i];\r\n      }\r\n    \r\n   }\r\n   printf(\"%lld\", l);\r\n \r\n}", "2": "#include <stdio.h>\r\nint main()\r\n{\r\n    int n,i,j,k;\t\r\n    scanf(\"%d\",&n);\r\n\tlong a[n],b[n],bga[n];\r\n\tlong long count=0;\r\n    for (i=0;i<n;i++)\r\n    {\r\n        scanf(\"%ld\",&a[i]);\r\n\t\tbga[i]=0;\r\n    }\r\n\tfor (i=0;i<n;i++)\r\n    {\r\n        scanf(\"%ld\",&b[i]);    \r\n    }\r\n\tfor (i=0;i<n;i++)\r\n\t{\r\n\t\tfor (j=0;j<n;j++)\r\n\t\t{\r\n\t\t\tif (b[j] > a[i]) bga[i]++;\t\t\r\n\t\t}\r\n\t}\r\n\tfor (i=0;i<n;i++)\r\n\t{\r\n\t\tfor (j=i+1;j<n;j++)\r\n\t\t{\r\n\t\t\tif (a[i] < a[j])\r\n\t\t\t{\r\n\t\t\t\tcount+=bga[j];\r\n\t\t\t}\r\n\t\t}\t\t\t\r\n\t}\r\n\tprintf(\"%lld\\n\",count);\r\n    return 0;\r\n}", "3": "#include <stdio.h>\r\n \r\nint main(){\r\n\tint num,rot;\r\n\tscanf(\"%d %d\", &num,&rot);  \r\n\tint *a = (int*)malloc(sizeof(int)*num);            \r\n\tfor(int i=0;i<num;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&a[i]);\r\n\t}\r\n\tfor(int i=0;i<rot;i++)\r\n\t{\r\n\t\tint temp = a[0];\r\n\t\tfor(int i=0;i<num-1;i++)\r\n\t\t{\r\n\t\t\ta[i] = a[i+1];\r\n\t\t}\r\n\t\ta[num-1] = temp;\r\n\t}\r\n\tfor(int i=0;i<num;i++)\r\n\t{\r\n\t\tprintf(\"%d \",a[i]);\r\n\t}\r\n}", "4": "#include <stdio.h>\r\n \r\nint main(){\r\n\tchar a[50],b[50];\r\n\tint h[26]={0},s[26]={0},i,flag=0;\r\n\tgets(a);\r\n\tgets(b);\r\n\tfor(i=0;i<(strlen(a));i++){\r\n\t\tif(a[i]>='a' && a[i]<='z'){\r\n\t\t\th[a[i]-'a']++;\r\n\t\t}else if(a[i]>='A' && a[i]<='Z'){\r\n\t\t\th[a[i]-'A']++;\r\n\t\t}\r\n\t}for(i=0;i<(strlen(b));i++){\r\n\t\tif(b[i]>='a' && b[i]<='z'){\r\n\t\t\ts[b[i]-'a']++;\r\n\t\t}else if(b[i]>='A' && b[i]<='Z'){\r\n\t\t\ts[b[i]-'A']++;\r\n\t\t}\r\n\t}for(i=0;i<26;i++){\r\n\t\tif(h[i]!=s[i]){\r\n\t\t\tflag=1;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}if(flag==0){\r\n\t\tprintf(\"YES\\n\";\r\n\t}else{\r\n\t\tprintf(\"NO\\n\";\r\n\t}\r\n}", "5": "#include<stdio.h>\r\nint check(int d,int num)\r\n{\r\n\twhile(num)\r\n\t{\r\n\t\tif(num%10==d)\r\n\t\t\treturn 1;\r\n\t\tnum/=10;\r\n\t}\r\n\treturn 0;\r\n}\r\nint main() \r\n{\r\n\tint n;\r\n\tscanf(\"%d\",&n);\r\n\tint arr[n],max=0;\r\n\tfor(int i=0;i<n;i++)\r\n\tscanf(\"%d\",&arr[i]);\r\n\tfor(int i=0;i<10;i++)\r\n\t{\r\n\t\tint count=0;\r\n\t\tfor(int j=0;j<n;j++)\r\n\t\t{\r\n\t\t\tif(check(i,arr[j]))\r\n\t\t\t\tcount++;\r\n\t\t}\r\n\t\tif(count>max)\r\n\t\t\tmax = count;\r\n\t}\r\n\tprintf(\"%d\",max);\r\n\treturn 0;\r\n}", "6": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n#include <stdio.h>\r\n \r\nint main()\r\n \r\n{\r\n \r\nint t;\r\n \r\nint l,n,i,p,p1,q,q1,count;\r\n \r\nscanf(\"%d\",&t);\r\n \r\nwhile (t--)\r\n \r\n{\r\n \r\nscanf(\"%d\",&n);\r\n \r\n        int q_arr[n];\r\n \r\n        for (i=0;i<n;i++) q_arr[i]=0;\r\n \r\n        scanf(\"%d\",&p);\r\n \r\nfor (i=0;i<p;i++)\r\n \r\n{\r\n \r\n            scanf(\"%d\",&p1);\r\n \r\n            q_arr[p1-1]=1;\r\n \r\n}\r\n \r\n        scanf(\"%d\",&q);\r\n \r\nfor (i=0;i<q;i++)\r\n \r\n{\r\n \r\n            scanf(\"%d\",&q1);\r\n \r\n            q_arr[q1-1]=1;\r\n \r\n}\r\n \r\n        count=0;\r\n \r\n        for (i=0;i<n;i++)\r\n \r\n        {\r\n \r\n            //printf(\"%d \",q_arr[i]);\r\n \r\n            if (q_arr[i]) count++;\r\n \r\n        }\r\n \r\n        //printf(\"\\n\";\r\n \r\n        if (count == n)\r\n \r\n        {\r\n \r\n            printf(\"YES\\n\";\r\n \r\n        }\r\n \r\n        else\r\n \r\n        {\r\n \r\n            printf(\"NO\\n\";\r\n \r\n        }\r\n \r\n}\r\n \r\nreturn 0;\r\n \r\n}", "7": " #include<stdio.h>\r\n        int main()\r\n        {\r\n        int t,n;\r\n        long long a[501],num;\r\n        scanf(\"%d\",&t);\r\n        while(t--)\r\n        {\r\n        \tnum=0;\r\n        \tscanf(\"%d\",&n);\r\n        \tfor(int i=0;i<n;i++)\r\n        \tscanf(\"%lld\",&a[i]);\r\n         \r\n        for(int i=1;i<=n-2;i++){\r\n         \r\n        int l=i,u=i;\r\n        \tfor(int j=1;l>0&&u<n-1;){\r\n        \t\tif((a[l-j]<=a[l])&&(a[u+j]<a[u]) ){\r\n        \t\t\tnum++;\r\n        \t\t\t//printf(\"%d    %d   %d\\n\",num,l,u);\r\n        \t\t\tl--;\r\n        \t\t\tu++;\r\n        \t\t}\r\n        \t\telse break;\r\n        \t}//printf(\"ok:%d\",temp);\r\n        // \tfor(int j=temp;temp--;j++)\r\n        // \t{//printf(\"hii%d\",temp);\r\n        // \t\tif(a[j]<a[j+1]) break;\r\n        // \t}\r\n        //     if(temp==0){ num++; printf(\"cat%d\",num);}\r\n        //  }\r\n         \r\n        }\r\n        printf(\"%lld\\n\",num);\r\n        }\r\n         return 0;\r\n         \r\n         \r\n        }", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n\tint n,current=0,max=0,start=0,end=0,s=0,t=0;\r\n\tscanf(\"%d\",&n);\r\n\tint arr[n];\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&arr[i]);\r\n\t\tif(arr[i]==0)\r\n\t\tarr[i]=-1;\r\n\t}\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tcurrent+=arr[i];\r\n\t\tif(current >= max)\r\n\t\t{\r\n\t\t\tmax=current;\r\n\t\t\tstart=s;\r\n\t\t\tend=i;\r\n\t\t}\r\n\t\tif(current<0)\r\n\t\t{\r\n\t\t\tcurrent =0;\r\n\t\t\ts=i+1;\r\n\t\t}\r\n\t\tif((end-start)>=t)\r\n\t\t{\r\n\t\t\tt=end-start+1;\r\n\t\t}\r\n\t}\r\n\tprintf(\"%d\",t); \r\n \r\n return 0;\r\n}", "9": "#include<stdio.h>\r\n#include<math.h>\r\nvoid main()\r\n{\r\n\tint n,i,k=0,p,ps,j;\r\n\tscanf(\"%d\",&n);\r\n\tint arr[n];\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&arr[i]);\r\n       p=sqrt(arr[i]);\r\n\t   if(p*p==arr[i])\r\n\t   k++;\r\n\t}\r\n\tfor(i=0;i<=n-2;i++)\r\n\t{\r\n        for(j=i+1;j<=n-1;j++)\r\n\t\t{\r\n\t\t\tarr[i]=arr[j]+arr[i];\r\n\t\t\tps=sqrt(arr[i]);\r\n\t\t\tif(ps*ps==arr[i])\r\n\t\t\tk++;\r\n\t\t}\r\n\t}\r\n\tprintf(\"%d\",k);\r\n}", "10": "#include<stdio.h>\r\n \r\nint fastscan(){\r\n    int n=0;\r\n    register int c = getchar_unlocked();\r\n    for(;c>47&&c<58;c=getchar_unlocked()){\r\n        n = n*10 + (c-48);\r\n    }\r\n    return n;\r\n}\r\n \r\nint main(){\r\n    int t;\r\n    t = fastscan();\r\n    while(t--){\r\n        int n,k,limit;\r\n        n=fastscan();\r\n        k=fastscan();\r\n        limit = n/k;\r\n        int i,result = 1;\r\n        int a[1000000] = {0,};\r\n        for(i=0;i<n;i++){\r\n            a[fastscan()]++;\r\n        }\r\n        for(i=0;i<1000000;i++){\r\n            if(a[i]!=0 && a[i]%limit != 0){\r\n                result = 0;\r\n                break;\r\n            }\r\n        }\r\n        if(result) printf(\"YES\\n\";\r\n        else printf(\"NO\\n\";\r\n    }\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_bit_manipulation_1": {"1": "#include <stdio.h>\r\nint main()\r\n{\r\n\tlong long int arr[1024],n=1;\r\n\tint i,j,k=0,t;\r\n\tfor(i=0;i<10;i++)\r\n\t{\r\n\t\tarr[k]=n;\r\n\t\tfor(j=0;j<k;j++)\r\n\t\t{\r\n\t\t\tarr[k+j+1]=arr[k]+arr[j];\r\n\t\t}\r\n\t\tk=k+j+1;\r\n\t\tn=n*4;\r\n\t}\r\n\tscanf(\"%d\",&t);\r\n\twhile(t--)\r\n\t{\r\n\t\tscanf(\"%lli\",&n);\r\n\t\tfor(i=0;;i++)\r\n\t\t{\r\n\t\t\tif(arr[i]>=n)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tprintf(\"%lli\\n\",arr[i]);\r\n\t}\r\n    return 0;\r\n}", "2": "#include <stdio.h>\r\n#include <string.h>\r\n#include <math.h>\r\n#include <stdlib.h>\r\nint main()\r\n{\r\n\tint n;\r\n\tscanf(\"%d\",&n);\r\n\tint a[n],i,one[n],zer[n];\r\n\tfor(i=0;i<n;i++)\r\n\t scanf(\"%d\",&a[i]);\r\n\tone[0]=1;\r\n\tzer[0]=0;\r\n\tif(a[0]==0)\r\n\t {\r\n        zer[0]=1;\r\n\t\tone[0]=0;\r\n\t }\r\n\tfor(i=1;i<n;i++)\r\n\t {\r\n\t\t if(a[i]==1)\r\n\t\t   {\r\n\t\t\t   zer[i]=zer[i-1];\r\n\t\t\t   one[i]=one[i-1]+1;\r\n\t\t   }\r\n\t\t else\r\n\t\t {\r\n\t\t\tzer[i]=zer[i-1]+1;\r\n\t\t\tone[i]=one[i-1];\r\n\t\t }\r\n\t }\r\n\tint q,l,r;\r\n\tscanf(\"%d\",&q);\r\n\twhile(q--)\r\n\t{\r\n\t\tscanf(\"%d %d\",&l,&r);\r\n\t\tl-=1;\r\n\t\tr-=1;\r\n\t\tif(l==0)\r\n\t\t   printf(\"%d %d\\n\",one[r]%2,zer[r]);\r\n\t\telse \r\n\t\t    printf(\"%d %d\\n\",(one[r]-one[l-1])%2,zer[r]-zer[l-1]);\r\n\t}\r\n}", "3": "#include <stdio.h>\r\n    #define pcu putchar_unlocked\r\n     \r\n    typedef long int lint;\r\n     \r\n    lint get_lint() { //Positive\r\n    \tlint n =0;\r\n    \tregister int c = getchar_unlocked();\r\n    \twhile(c<'0' || c>'9') c = getchar_unlocked();\r\n    \twhile(c>='0' && c<='9') {\r\n    \t\tn = n * 10 + c-'0';  c = getchar_unlocked();\r\n        }\r\n    \treturn n;\r\n    }\r\n    void put_lint (lint li, char lc) {//Negative\r\n    \tif (0 == li) {\r\n    \t\tputchar_unlocked((int)'0');\r\n    \t\tif (lc) putchar_unlocked((int)lc);\r\n    \t\treturn;\r\n    \t} else if (li < 0) {\r\n    \t\tputchar_unlocked ( (int) '-');\r\n    \t\tli *= -1;\r\n    \t}\r\n    \tchar s[24];\r\n    \tauto idx =0;\r\n    \tfor (; li; idx++) {\r\n    \t\ts[idx] = '0' + li % 10;\r\n    \t\tli /= 10;\r\n    \t}\r\n    \tfor (auto jdx=idx-1; jdx>=0; jdx--)\r\n    \t\tputchar_unlocked((int)s[jdx]);\r\n    \tif(lc) putchar_unlocked((int)lc);\r\n    \treturn;\r\n    }\r\n     \r\n    int main () {\r\n    \tlint T = get_lint();\r\n    \twhile(T--) {\r\n            lint N = get_lint();\r\n            lint M = get_lint();\r\n            lint msb = 63 - __builtin_clzl(M);\r\n            //(2<<1) + (2<<0)\r\n            pcu('('); put_lint(N,0); pcu('<');pcu('<');put_lint(msb,0);pcu(')');\r\n            for(auto bi=msb-1; bi>=0; bi--) {\r\n                if (M & (1UL<<bi)) {\r\n                    pcu(' '); pcu('+'); pcu(' '); pcu('(');\r\n                    put_lint(N,0); pcu('<');pcu('<');put_lint(bi,0);pcu(')');\r\n                }\r\n            }\r\n            pcu('\\n');\r\n    \t}\r\n    \treturn 0;\r\n    }", "4": "#include <stdio.h>\r\nint main()\r\n{\r\n\tunsigned long long int num=0;\r\n\tunsigned int count=0;\r\n\tint total=6;\r\n\tnum=0;\r\n\t\t\r\n\twhile(scanf(\"%llu\",&num)!=-1)\r\n\t{\r\n\t\tcount=0;\r\n\t\tif(num<0 || num>(num<<18))\r\n\t\t\treturn -1;\r\n\t\t\r\n\t\twhile(num>0)\r\n\t\t{\r\n\t\t\tnum &= (num-1);\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tprintf(\"%u\\n\",count);\r\n\t}\r\n}", "5": "#include <stdio.h>\r\nint main(){\r\n\tlong long int num;\r\n\tscanf(\"%d\", &num);\r\n\tchar b[100000];\r\n\twhile(num--){\r\n\t\tlong long int c=0,n;\r\n\t\tint k=0;\r\n\t\tscanf(\"%lld\",&n);\r\n\t\tscanf(\"%s\",&b);\r\n         for(int i=0;i<n;i++){\r\n\t\t\tif(b[i]=='0')\r\n\t\t\t c++;\r\n\t\t }\r\n\tprintf(\"%lld\\n\", c);\r\n\t}              \t\t\t\r\n\treturn 0;      \r\n}", "6": "#include<stdio.h>\r\n \r\nint main()\r\n{\r\n\tint size , num , res = 0;\r\n\tscanf(\"%d\",&size);\r\n\tint arr[size];\r\n\t\r\n\tfor(int i=0 ; i<size ; i++)\r\n\t{\r\n\t\tscanf(\"%d\",&arr[i]);\r\n\t\tres ^= arr[i];\r\n\t}\r\n \r\n\tint temp_res = res , index = 0 ;\r\n\twhile(temp_res > 0)\r\n\t{\r\n\t\tif(temp_res & 1)\r\n\t\t\tbreak;\r\n\t\tindex++;\r\n\t\ttemp_res >>= 1 ;\r\n\t}\r\n \r\n\tint mask = 1 << index ;\r\n\ttemp_res = 0 ;\r\n\tfor(int i=0 ; i<size ; i++)\r\n\t{\r\n\t\tif(arr[i] & mask)\r\n\t\t\ttemp_res ^= arr[i] ;\r\n\t}\r\n \r\n\tint a = temp_res^res;\r\n\tint b = res^a;\r\n \r\n\tif(a<b)\r\n\t\tprintf(\"%d %d\",a,b);\r\n\telse\r\n\t\tprintf(\"%d %d\",b,a);\r\n \r\n\treturn 0;\r\n}", "7": "#include<stdio.h>\r\n \r\nint main()\r\n{\r\n\tint tc;\r\n\tscanf(\"%d\",&tc);\r\n \r\n\twhile(tc--)\r\n\t{\r\n\t\tlong long int n;\r\n\t\tscanf(\"%lli\",&n);\r\n\t\tprintf(\"%lli\\n\",(n | (n+1)));\r\n\t}\r\n\treturn 0;\r\n}", "8": "#include<stdio.h>\r\nvoid xor(int n)\r\n{\r\n\tint count = 0;\r\n\tfor(int i=1 ; i<n ; i++)\r\n\t{\r\n\t\tfor(int j=i+1 ; j<=n ; j++)\r\n\t\t{\r\n\t\t\tif( (i^j) <= n )\r\n\t\t\t\tcount++;\r\n\t\t}\r\n\t}\r\n\tprintf(\"%d\\n\",count);\r\n}\r\n \r\nint main()\r\n{\r\n\tint tc;\r\n\tscanf(\"%d\",&tc);\r\n \r\n\twhile(tc--)\r\n\t{\r\n\t\tint n;\r\n\t\tscanf(\"%d\",&n);\r\n \r\n\t\txor(n);\r\n\t}\r\n \r\n\treturn 0;\r\n}", "9": "#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \r\n\tfor(int i=0;i<num;i++)\r\n\t{\r\n\t\tint val,count=0;\r\n\t\tscanf(\"%d\",&val);\r\n\t\twhile(val)\r\n\t\t{\r\n\t\t\tif(val & 1)\r\n\t\t\t{\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tval = val/2;\r\n\t\t}\r\n\t\tprintf(\"%d\\n\",count);\r\n\t}\r\n}", "10": "#include<stdio.h>\r\n        gcd(long long int a,long long int b)\r\n        {\r\n            if(b==0) return a;\r\n            \r\n            return gcd(b,a%b);\r\n        }\r\n        int main()\r\n        {\r\n            \r\n          long long int n,temp;\r\n            long long int lcm;\r\n            scanf(\"%lld\",&n);\r\n            for(int i=0;i<n;i++)\r\n            {\r\n                scanf(\"%lld\",&temp);\r\n                if(temp!=0)\r\n                {if(i==0) lcm=temp;\r\n                else lcm=(lcm*temp)/gcd(lcm,temp);\r\n                }\r\n            }\r\n            printf(\"%lld\\n\",lcm);\r\n            return 0;\r\n        }", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_bit_manipulation_2": {"1": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n\tint i = 0;\r\n\tint odd = 0;\r\n\tunsigned int n = 0;\r\n\tscanf(\"%d\", &n);\r\n\tint size = 2*n+1;\r\n\tint arr[size];\r\n\t\r\n\tfor(i = 0; i < size; i++) {\r\n\t\tscanf(\"%d\", &arr[i]);\r\n\t}\r\n \r\n\tfor(i = 0; i<size; i++) {\r\n\t\todd = odd ^ arr[i];\r\n\t}\r\n\tprintf(\"%d\", odd);\r\n\t\r\n\treturn 0;\r\n}", "2": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n\tlong long int t,a[1000],b[1000],count,cnt,i,j,tmp;\r\n    scanf(\"%lli\",&t);\r\n    while(t--)\r\n    {\r\n    \tscanf(\"%d\",&count);\r\n    \tfor(i=0;i<count;i++)\r\n    \t\tscanf(\"%lli\",&a[i]);\r\n    \tfor(i=0;i<count;i++)\r\n    \t{\r\n    \t\ttmp=a[i];\r\n    \t\tcnt=0;\r\n    \t\twhile(tmp)\r\n    \t\t{\r\n    \t\t\tif(tmp&1)\r\n    \t\t\t\tcnt++;\r\n    \t\t\ttmp=tmp>>1;\r\n    \t\t}\r\n    \t\tb[i]=cnt;\r\n    \t}\r\n\t\tfor (i = 1 ; i <= count - 1; i++) \r\n\t\t{\r\n    \t\tj = i;\r\n\t\t    while ( j > 0 && b[j] < b[j-1]) \r\n\t\t    {\r\n      \t\t\ttmp=a[j];\r\n        \t\ta[j]=a[j-1];\r\n        \t\ta[j-1]=tmp;\r\n        \t\ttmp=b[j];\r\n        \t\tb[j]=b[j-1];\r\n        \t\tb[j-1]=tmp;\r\n\t\t\t    j--;\r\n    \t\t}\r\n  \t\t}\r\n    \tfor(i=0;i<count;i++)\r\n    \t\tprintf(\"%lli \",a[i]);\r\n    \tprintf(\"\\n\";\r\n    }\r\n    return 0;\r\n}", "3": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n    long long t,n,a,i,odd,even;\r\n    scanf(\"%d\",&t);\r\n    while(t--)\r\n    {\r\n    \tscanf(\"%lld\",&n);\r\n    \teven=0;\r\n    \todd=0;\r\n    \tfor(i=0;i<n;i++)\r\n    \t{\r\n    \t\tscanf(\"%lld\",&a);\r\n    \t\tif(a%2==0)\r\n    \t\t{\r\n    \t\t\teven++;\r\n    \t\t}\r\n    \t\telse\r\n    \t\todd++;\r\n    \t}\r\n    \tprintf(\"%lld\\n\", even*odd);\r\n    }\r\n    return 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n\tint a,min,i,num;\r\n\tscanf(\"%d\",&a);\r\n\tnum=a;\r\n\tmin=a^0;\r\n\tfor(i=0;i<=a;i++)\r\n\t{\r\n\t\ta=a|(a>>i);\r\n\t}\r\n\ta=a-num;\r\n\tprintf(\"%d %d\",min,a);\r\n\t\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\n\tint N, A, ans = 0, i;\r\n\tscanf(\"%d\", &N);\r\n\tfor(i = 0 ; i < N ; i++)\r\n\t{\r\n\t\tscanf(\"%d\", &A);\r\n\t\tans |= A;\r\n\t}              \t\t\r\n\tprintf(\"%d\", ans);  \r\n}\r\n", "6": "#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tint count=0;\r\n\tscanf(\"%d\", &num);              \r\n\tint *a = (int*)malloc(sizeof(int)*num);\r\n\tfor(int i=0;i<num;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&a[i]);\r\n\t\tint val = a[i];\r\n\t\tif((val & (val-1))==0)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t}\r\n\t}\r\n\tprintf(\"%d\",count);\r\n}", "7": "#include <stdio.h>\r\n#include <stdlib.h>\r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);            \r\n\tfor(int i=0;i<num;i++)\r\n\t{\r\n\t\tint len;\r\n\t\tscanf(\"%d\",&len);\r\n\t\tint *a=(int*)malloc(sizeof(int)*len);\r\n\t\tfor(int i=0;i<len;i++)\r\n\t\t{\r\n\t\t\tscanf(\"%d\",&a[i]);\r\n\t\t}\r\n\t\tint sum=0;\r\n\t\tfor(int i=0;i<len;i++)\r\n\t\t{\r\n\t\t\tif(a[i]>0)\r\n\t\t\t{\r\n\t\t\t\tsum += a[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(sum==0)\r\n\t\t{\r\n\t\t\tprintf(\"No\\n\";\r\n\t\t}\r\n\t\telse if((sum & (sum-1)) == 0)\r\n\t\t{\r\n\t\t\tprintf(\"Yes\\n\";\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tprintf(\"No\\n\";\r\n\t\t}\r\n\t}\r\n}", "8": "#include<stdio.h>\r\nint main(){\r\n\tint n,q;\r\n\tscanf(\"%d%d\",&n,&q);\r\n\tlong long int a[n];\r\n\tfor(int i=0;i<n;i++)\r\n\tscanf(\"%lld\",&a[i]);\r\n\tint b[n];\r\n\tfor(int i=0;i<n;i++)\r\n\tb[i]=0;\r\n\tfor(int i=0;i<n;i++){\r\n\t\tlong long int e=a[i];\r\n\t\tint p=0,c=0;\r\n\t\twhile(e>0){\r\n\t\t\tc=e&1;\r\n\t\t\tif(c==1&&p==1){\r\n\t\t\t\tb[i]=1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tp=c;\r\n\t\t\te/=2;\r\n\t\t}\r\n\t}\r\n\tint z[n],sn=0;\r\n\tfor(int i=0;i<n;i++){\r\n\t\tif(b[i]==1)\r\n\t\tsn+=1;\r\n\t\tz[i]=sn;\r\n\t}\r\n\tfor(int i=0;i<q;i++){\r\n\t\tint l,r,co;\r\n\t\tscanf(\"%d%d\",&l,&r);\r\n\t\tco=z[r-1]-z[l-1];\r\n\t\tif(b[l-1]==1)\r\n\t\tco+=1;\r\n\t\tprintf(\"%d\\n\",co);\r\n\t}\r\n}", "9": "#include <stdio.h>\r\n \r\n \r\nint letter_bits(char *str)\r\n{\r\n\tint bits=0;\r\n\tint i=0;\r\n\twhile(str[i] != '\\\\0'){\r\n\t\tbits |= 1<<(str[i] - 'a');\r\n\t\ti++;\r\n\t}\r\n\treturn bits;\r\n}\r\n \r\nint main(){\r\n\tint t, bitsA, bitsB;\r\n\tchar s1[100000], s2[100000];\r\n\tscanf(\"%d\", &t);              \t\t\r\n\twhile(t--){\r\n\t\tscanf(\"%s\", s1);\r\n\t\tscanf(\"%s\", s2);\r\n\t\tbitsA = letter_bits(s1);\r\n\t\tbitsB = letter_bits(s2);\r\n\t\tbitsA & bitsB ? printf(\"Yes \\n\" : printf(\"No \\n\";\r\n\t}     \r\n}", "10": "#include<bits/stdc++.h>\r\n#define ci const int&\r\nusing namespace std;\r\nint n,m,p[210],d[210],ans;\r\nbool Check(ci x){\r\n\tfor(int i=1;i<=n;++i){\r\n\t\tfor(int j=1;j<=m;++j)if(((p[i]&d[j])|x)==x)goto Next;\r\n\t\treturn 0;\r\n\t\tNext:;\r\n\t}\r\n\treturn 1;\r\n}\r\nint main(){\r\n\tscanf(\"%d%d\",&n,&m);\r\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&p[i]);\r\n\tfor(int i=1;i<=m;++i)scanf(\"%d\",&d[i]);\r\n\tans=(1<<9)-1;\r\n\tfor(int i=8;i>=0;--i)Check(ans^(1<<i))?ans^=(1<<i):0;\r\n\tprintf(\"%d\",ans);\r\n\treturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_strings_1": {"1": "import java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n \r\n \r\npublic class Main \r\n{\r\n  public static void main (String[] args) {\r\n    Scanner in = new Scanner (System.in);\r\n    PrintWriter out = new PrintWriter (System.out, true);\r\n    \r\n    int N = in.nextInt();\r\n    String[] board = new String[N];\r\n    for (int i = 0; i < N; i++) board[i] = in.next();\r\n    int res = 0;\r\n    for (int i = 0; i < N; i++) {\r\n      int count = 0;\r\n      for (int j = 0; j < N; j++) if (board[j].equals(board[i])) count++;\r\n      res = Math.max(res, count);\r\n    }\r\n    out.println(res);\r\n    out.close();\r\n    System.exit(0);\r\n  }\r\n}\r\n", "2": "\n", "3": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n\tstring s;\r\n\tint count=0;\r\n\tcin>>s;\r\n\tfor(int i=0;i<s.size();i++)\r\n\t{\r\n\t\t int find=(s.substr(i)).find(\"bear\";\r\n\t\t if(find!=-1)\r\n\t\t\t count+=1+s.substr(i).size()-find-4;\r\n\t}\r\n\tcout<<count<<endl;\r\n\treturn 0;\r\n}", "4": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    long int n,m,i,j,x,y;\r\n    while(cin>>n>>m)\r\n    {\r\n        string s;\r\n        cin>>s;\r\n        char x,y;\r\n        int a[1000];\r\n        for(i=97;i<=122;i++)\r\n        {\r\n            a[i]=i;//set value with the same char\r\n        }\r\n        for(i=0;i<m;i++){\r\n            cin>>x>>y;\r\n            for(j=97;j<=122;j++)\r\n            {\r\n                if(a[j]==x)\r\n                    a[j]=y;//1st char set 2nd char\r\n                else if(a[j]==y)\r\n                    a[j]=x;//2nd char st 1st char\r\n            }\r\n        }\r\n        for(i=0;i<s.size();i++)\r\n        {\r\n                s[i]=a[s[i]];//change final char\r\n                cout<<s[i];\r\n        }\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}", "5": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstring text, pattern;\r\n\r\nint kmp(){\r\n    int match=0, now, pi[100105];\r\n\r\n    pi[0]= now= -1;\r\n    for(int i=1; i<text.length();i++){\r\n\r\n        while(now!=-1 && text[i]!=text[now+1])\r\n            now= pi[now];\r\n\r\n        if(text[i]==text[now+1])    pi[i]= ++now;\r\n        else    pi[i]= -1;\r\n\r\n        if(now==pattern.length()-1){\r\n            now= -1; //ababab for pattern abab can be deminished by aba#ab\r\n            match++;\r\n        }\r\n\r\n    }\r\n\r\n    return match;\r\n\r\n}\r\n\r\n\r\nmain(){\r\n    cin>>text>>pattern;\r\n    text= pattern+\"#\"+text;\r\n\r\n    cout<<kmp()<<endl;\r\n\r\n\r\n}", "6": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define forn(i, n) for (int i = 0; i < int(n); i++)\r\n\r\nvector<pair<char,int>> split(string s) {\r\n    char c = s[0];\r\n    int cnt = 1;\r\n    vector<pair<char,int>> result;\r\n    auto ss = s.c_str();\r\n    for (int i = 1; i <= int(s.length()); i++) {\r\n        if (ss[i] != c) {\r\n            result.push_back({c, cnt});\r\n            c = s[i];\r\n            cnt = 1;\r\n        } else\r\n            cnt++;\r\n    }\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    forn(tt, n) {\r\n        string s, t;\r\n        cin >> s >> t;\r\n        auto sa(split(s), ta(split(t));\r\n        bool ok = sa.size() == ta.size();\r\n        if (ok)\r\n            forn(i, sa.size())\r\n                if (sa[i].first != ta[i].first || sa[i].second > ta[i].second)\r\n                    ok = false;\r\n        cout << (ok ? \"YES\" : \"NO\" << endl;\r\n    }\r\n}", "7": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint t, n;\r\nstring s;\r\n\r\nint main(){\r\n\tcin >> t;\r\n\tfor(int tc = 0; tc < t; ++tc){\r\n\t\tcin >> n >> s;\r\n\t\tint res = n - 1;\r\n\t\tfor(int i = 0; i < n; ++i)\r\n\t\t\tif(s[i] == '>' || s[n - 1 - i] == '<')\r\n\t\t\t\tres = min(res, i);\r\n\t\t\r\n\t\tcout << res << endl;\r\n\t}\r\n\r\n\treturn 0;\r\n}", "8": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n\tint n;\r\n\tstring s;\r\n\tcin >> n >> s;\r\n\tint pos = n - 1;\r\n\tfor (int i = 0; i < n - 1; ++i) {\r\n\t\tif (s[i] > s[i + 1]) {\r\n\t\t\tpos = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tcout << s.substr(0, pos) + s.substr(pos + 1) << endl;\r\n\treturn 0;\r\n}", "9": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nstring s;\r\n\r\nbool ok(string t){\r\n    int msk = 0;\r\n    \r\n    for(int i = 0; i < int(t.size()); ++i){\r\n\t    if(isupper(t[i])) msk |= 1;\r\n\t    if(islower(t[i])) msk |= 2;\r\n\t    if(isdigit(t[i])) msk |= 4;\r\n\t}\r\n\t\r\n\treturn msk == 7;\r\n}\r\n\r\nint main() {\r\n\t//freopen(\"input.txt\", \"r\", stdin);\r\n\tint t;\r\n\tcin >> t;\r\n\tfor(int i = 0; i < t; ++i){\r\n    \tcin >> s;\r\n    \tif(ok(s)){\r\n    \t    cout << s << endl;\r\n    \t    continue;\r\n    \t}\r\n    \tbool fnd = false;\r\n        for(int i = 0; i < int(s.size()); ++i){\r\n            string t = s;\r\n            \r\n            t[i] = '1';\r\n            if(ok(t)){\r\n    \t        cout << t << endl;\r\n    \t        fnd = true;\r\n    \t        break;\r\n    \t    }\r\n            t[i] = 'a';\r\n            if(ok(t)){\r\n    \t        cout << t << endl;\r\n    \t        fnd = true;\r\n    \t        break;\r\n    \t    }\r\n    \t    t[i] = 'A';\r\n            if(ok(t)){\r\n    \t        cout << t << endl;\r\n    \t        fnd = true;\r\n    \t        break;\r\n    \t    }\r\n        }\r\n    \t\r\n    \tif(fnd) continue;\r\n    \t\r\n    \tif(isupper(s[2])){\r\n    \t    s[0] = 'a';\r\n    \t    s[1] = '1';\r\n    \t    cout << s << endl;\r\n    \t    continue;\r\n    \t}\r\n    \tif(islower(s[2])){\r\n    \t    s[0] = 'A';\r\n    \t    s[1] = '1';\r\n    \t    cout << s << endl;\r\n    \t    continue;\r\n    \t}\r\n    \tif(isdigit(s[2])){\r\n    \t    s[0] = 'a';\r\n    \t    s[1] = 'A';\r\n    \t    cout << s << endl;\r\n    \t    continue;\r\n    \t}\r\n\t}\r\n\treturn  0;\r\n}", "10": "\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Array_Level_0": {"1": "#include<stdio.h>\r\nvoid print_left_to_right(int no_ele,long long int arr[])\r\n{  \r\n  int index;\r\n  for(index=0;index<no_ele;index++)\r\n    printf(\"%lld \",arr[index]);\r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nlong long int arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\nscanf(\"%lld\",&arr[index]);\r\nprint_left_to_right(no_ele,arr);\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nvoid print_right_to_left(int no_ele,long long int arr[])\r\n{  \r\n  int index;\r\n  for(index=no_ele-1;index>=0;index--)\r\n    printf(\"%lld \",arr[index]);\r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nlong long int arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\nscanf(\"%lld\",&arr[index]);\r\nprint_right_to_left(no_ele,arr);\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\r\nvoid count_zeros_ones(int no_ele,int arr[])\r\n{  \r\n    int index,zero=0,one=0;\r\n    for(index=0;index<no_ele;index++)\r\n{\r\nif(arr[index]==0)\r\n{\r\nzero++;\r\n}\r\nelse\r\n{\r\none++;\r\n}\r\n}\r\nprintf(\"zc = %d\\noc = %d\",zero,one);\r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nint arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\n{\r\nscanf(\"%d\",&arr[index]);\r\n}\r\ncount_zeros_ones(no_ele,arr);\r\n\r\nreturn 0;\r\n}", "4": "#include<stdio.h>\r\nvoid count_odd_even(int no_ele,long long int arr[])\r\n{  \r\n    int index,even=0,odd=0;\r\n    for(index=0;index<no_ele;index++)\r\n   {\r\n   if(arr[index]%2==0)\r\n   even++;\r\n   else\r\n   odd++;\r\n   }\r\n    printf(\"Odd = %d\\nEven = %d\",odd,even);\r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nlong long int arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\nscanf(\"%lld\",&arr[index]);\r\ncount_odd_even(no_ele,arr);\r\nreturn 0;\r\n}", "5": "# include <stdio.h>\r\nvoid Find_majority_ele(int no_ele,long long int arr[])\r\n{ \r\n    int index,flag[10000]={0},ctr,compare;\r\n    for(index=0;index<no_ele;index++)\r\n{\r\nctr=1;\r\nif(flag[index]==0)\r\n{\r\nfor(compare=index+1;compare<no_ele;compare++)\r\n{\r\nif(arr[index]==arr[compare])\r\n{\r\nctr++;\r\nflag[compare]=1;\r\n}\r\n}\r\nif(ctr>=(no_ele/2))\r\nbreak;\r\n}\r\n}\r\nif(ctr >= (no_ele/2))\r\nprintf(\"The majority element is : %lld\", arr[index]);\r\nelse\r\nprintf(\"No majority element found in the array\");\r\n}\r\nint main()\r\n{\r\nint index,no_ele;\r\nscanf(\"%d\",&no_ele);\r\nlong long int arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\nscanf(\"%lld\",&arr[index]);\r\nFind_majority_ele(no_ele,arr);\r\nreturn 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nint sum_of_ele(int no_ele,int arr[])\r\n{  \r\n    int index,sum=0;\r\n    for(index=0;index<no_ele;index++)\r\n{\r\nsum=sum+arr[index];\r\n}\r\nreturn sum;\r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nint arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\n{\r\nscanf(\"%d\",&arr[index]);\r\n}\r\nprintf(\"%d\",sum_of_ele(no_ele,arr));\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint Search_element(int no_ele,long long int arr[],long long int element)\r\n{\r\n   int index = 0;\r\nwhile (index < no_ele && element != arr[index]) {\r\nindex++;\r\n}\r\nif (index < no_ele)\r\n  return 1;\r\nelse\r\n  return 0;\r\n}\r\nint main()\r\n{\r\nint  no_ele, index;\r\nscanf(\"%d\", &no_ele);\r\nlong long int element,arr[no_ele];\r\nfor (index = 0; index < no_ele; index++) {\r\nscanf(\"%lld\", &arr[index]);\r\n}\r\nscanf(\"%lld\", &element);\r\nint result;\r\nresult=Search_element(no_ele,arr,element);\r\nif(result==1)\r\n  printf(\"Found\");\r\nelse \r\n  printf(\"Not found\");\r\n\r\n}", "8": "#include<stdio.h>\r\nlong long int largest_ele(int no_ele,long long int arr[])\r\n{ \r\n    long long int largest,index;\r\nlargest = arr[0];\r\nfor (index = 1; index < no_ele; index++)\r\n{\r\nif (largest < arr[index])\r\nlargest = arr[index];\r\n}\r\n  return largest;\r\n}\r\nint main()\r\n{\r\nint  no_ele, index;\r\nscanf(\"%d\", &no_ele);\r\nlong long int arr[no_ele];\r\nfor (index = 0; index < no_ele; index++)\r\nscanf(\"%lld\", &arr[index]);\r\nprintf(\"%lld\",largest_ele(no_ele,arr));\r\n\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nlong long int second_larg_ele(int no_ele,long long int arr[])\r\n{\r\n    long long int largest,secondlarg;\r\n    int index;\r\n    largest = arr[0];\r\n    secondlarg = arr[0];\r\nfor (index = 1; index < no_ele; index++)\r\n{\r\nif (largest < arr[index]){\r\n    secondlarg = largest;\r\n    largest =  arr[index];\r\n}\r\nelse if (secondlarg < arr[index]){\r\n    secondlarg = arr[index];\r\n}\r\nelse if(secondlarg == largest){\r\n    secondlarg = arr[index];\r\n}\r\n\r\n\r\n}\r\n  return secondlarg;\r\n}\r\nint main()\r\n{\r\nint  no_ele, index;\r\nscanf(\"%d\", &no_ele);\r\nlong long int arr[no_ele];\r\nfor (index = 0; index < no_ele; index++)\r\nscanf(\"%lld\", &arr[index]);\r\nprintf(\"%lld\",second_larg_ele(no_ele,arr));\r\n\r\nreturn 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nlong long int smallest_ele(int no_ele,long long int arr[])\r\n{\r\n    long long int smallest;\r\n    int index;\r\nsmallest = arr[0];\r\nfor (index = 1; index < no_ele; index++)\r\n{\r\nif (smallest > arr[index])\r\nsmallest = arr[index];\r\n}\r\n  return smallest;\r\n}\r\nint main()\r\n{\r\nint  no_ele, index;\r\nscanf(\"%d\", &no_ele);\r\nlong long int arr[no_ele];\r\nfor (index = 0; index < no_ele; index++)\r\nscanf(\"%lld\", &arr[index]);\r\nprintf(\"%lld\",smallest_ele(no_ele,arr));\r\nreturn 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Array_Level_1": {"1": "\"#include<stdio.h>\n\nint main(){\n    long long int array_size;\n    scanf(\"\"%lld\"\",&array_size);\n    long long int array[array_size];\n    long long int pos_1, pos_2,index=0,temp;\n    \n    for(;index<array_size;index++){\n        scanf(\"\"%lld\"\",&array[index]);\n    }\n    \n    scanf(\"\"%lld %lld\"\",&pos_1,&pos_2);\n    \n    if(pos_1>=array_size || pos_2>=array_size){\n        printf(\"\"Invalid\"\");\n    }\n    else{\n    temp = array[pos_1];\n    array[pos_1] = array[pos_2];\n    array[pos_2] = temp;\n    \n    for(index=0;index<array_size;index++){\n        printf(\"\"%lld \"\",array[index]);\n    }\n    }\n    }", "2": "\"#include<stdio.h>\nvoid replace_ele(int no_ele,long long int arr[])\n{ \n    long long int index,sum=0;\n    for(index=0;index<no_ele;index++)\n      sum=sum+arr[index];\n    for(index=0;index<no_ele;index++)\n      printf(\"\"%lld \"\",sum-arr[index]);\n}\nint main()\n{\nint no_ele,index;\nscanf(\"\"%d\"\",&no_ele);\nlong long int arr[no_ele];\nfor(index=0;index<no_ele;index++)\nscanf(\"\"%lld\"\",&arr[index]);\nreplace_ele(no_ele,arr);\nreturn 0;\n}\n\"", "3": "#include<stdio.h>\nvoid sum_of_rightside_ele(int no_ele,long long int arr[])\n{ \n    long long int index,sum=0;\n    for(index=0;index<no_ele;index++)\n      sum=sum+arr[index];\n    for(index=0;index<no_ele;index++)\n    {\n        sum=sum-arr[index];\n        printf(\"\"%lld \"\",sum);\n    }\n    \n}\nint main()\n{\nint no_ele,index;\nscanf(\"\"%d\"\",&no_ele);\nlong long int arr[no_ele];\nfor(index=0;index<no_ele;index++)\nscanf(\"\"%lld\"\",&arr[index]);\nsum_of_rightside_ele(no_ele,arr);\nreturn 0;\n}\n", "4": "#include<stdio.h>\r\nvoid sum_of_leftside_ele(int no_ele,long long int arr[])\r\n{ \r\n    long long int index,sum=0;\r\n    for(index=0;index<no_ele;index++)\r\n    {\r\n        printf(\"%lld \",sum);\r\n        sum=sum+arr[index];\r\n    }\r\n    \r\n}\r\nint main()\r\n{\r\nint no_ele,index;\r\nscanf(\"%d\",&no_ele);\r\nlong long int arr[no_ele];\r\nfor(index=0;index<no_ele;index++)\r\nscanf(\"%lld\",&arr[index]);\r\nsum_of_leftside_ele(no_ele,arr);\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\nvoid Array_multiplication(long long int arr1[], int no_ele)\n{\nif (no_ele <= 1)\nreturn;\nlong long int pre_elem = arr1[0];\narr1[0] = arr1[0] * arr1[1];\nfor (int index=1; index<no_ele-1; index++)\n{\nlong long int cur_elem = arr1[index];\narr1[index] = pre_elem * arr1[index+1];\npre_elem = cur_elem;\n}\narr1[no_ele-1] = pre_elem * arr1[no_ele-1];\n\n}\nint main()\n{\nint no_ele,index;\nscanf(\"\"%d\"\",&no_ele);\nlong long int arr1[no_ele];\nfor(index = 0; index < no_ele; index++)\n{\nscanf(\"\"%lld\"\", &arr1[index]);\n}\nArray_multiplication(arr1, no_ele);\nfor (int index=0; index<no_ele; index++)\nprintf(\"\"%lld \"\", arr1[index]);\nreturn 0;\n}", "6": "#include<stdio.h>\r\nvoid arr_reverse(int no_ele,long long int arr[])\r\n{\r\n  int st,end;\r\n  long long int temp;\r\n  st=0;\r\n  end=no_ele-1;\r\n   while(st<end)\r\n  {\r\n    temp=arr[st];\r\n\t arr[st]=arr[end];\r\n    arr[end]=temp;\r\n    st+=1;\r\n    end-=1;\r\n  }\r\n}\r\n\r\nint main(){\r\n    int array_size;\r\n    scanf(\"\"%d\"\",&array_size);\r\n    \r\n    long long int array[array_size];\r\n    \r\n    for(int index = 0 ; index < array_size ; index++){\r\n        scanf(\"\"%lld\"\",&array[index]);\r\n    }\r\n    arr_reverse(array_size,array); \r\n   for(int index = 0 ; index < array_size ; index++){\r\n        printf(\"\"%lld \"\",array[index]);\r\n    }\r\n    \r\n}", "7": "#include<stdio.h>\nint main()\n{\n\nint arr[1000], element, num, index, location;\nscanf(\"\"%d\"\", &num);\nfor (index = 0; index < num; i++)\nscanf(\"\"%d\"\", &arr[i]);\nscanf(\"\"%d\"\", &element);\nscanf(\"\"%d\"\", &location);\nfor (index = num; index >= location; i--)\narr[index] = arr[index - 1];\nnum++;\narr[location - 1] = element;\nfor (index = 0; index < num; index++)\nprintf(\"\"%d \"\", arr[index]);\nreturn  0;\n}", "8": "#include <stdio.h>\r\nint main()\r\n{\r\n\r\nint array[1000], position, itr, n;\r\nscanf(\"%d\", &n);\r\nfor (itr = 0; itr < n; itr++)\r\nscanf(\"%d\", &array[itr]);\r\nscanf(\"%d\", &position);\r\nif (position >= n+1)\r\nprintf(\"Deletion not possible\");\r\nelse\r\n{\r\nfor (itr= position - 1; itr < n - 1; itr++)\r\narray[itr] = array[itr+1];\r\nfor (itr= 0; itr< n - 1; itr++)\r\nprintf(\"%d \", array[itr]);\r\n}\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\nint main()\n{\n    int size1,size2,size3,ind1,ind2,ind3;\n    scanf(\"\"%d%d%d\"\",&size1,&size2,&size3);\n    long long int arr1[size1],arr2[size2],arr3[size3];\n    for(ind1=0;ind1<size1;ind1++)\n        scanf(\"\"%lld\"\",&arr1[ind1]);\n    for(ind2=0;ind2<size2;ind2++)\n        scanf(\"\"%lld\"\",&arr2[ind2]);\n    for(ind3=0;ind3<size3;ind3++)\n        scanf(\"\"%lld\"\",&arr3[ind3]);\n    ind1=ind2=ind3=0;\n    while(ind1<size1 && ind2<size2 && ind3<size3)\n    {\n        if(arr1[ind1] == arr2[ind2] && arr2[ind2] == arr3[ind3])\n        {\n            printf(\"\"%lld \"\",arr1[ind1]);\n            ind1++;\n            ind2++;\n            ind3++;\n        }\n        else if (arr1[ind1] < arr2[ind2]) ind1++;\n        else if (arr2[ind2] < arr3[ind3]) ind2++;\n        else ind3++;\n    }\n    return 0;\n}", "10": "#include <stdio.h>\nint main()\n{\n\nint flag[10000]={0},ind, pos, k, isUnique, Size,count=0;\nscanf(\"\"%d\"\", &Size);\nlong long int arr[Size];\n\nfor (ind = 0; ind < Size; ind++)\nscanf(\"\"%lld\"\", &arr[ind]);\nfor (ind = 0; ind < Size; ind++)\n{\nif(flag[ind]==0)\nfor(pos= i nd+ 1; pos < Size; pos++)\n{\nif(arr[ind] == arr[pos])\n{\nflag[pos]=flag[ind]=1;\n}\n}}\nfor (ind = 0; ind < Size; ind++)\n{\nif(flag[ind]==0)\n{\nprintf(\"\"%lld \"\", arr[ind]);\ncount++;\n}\n}\nif(count==0)\nprintf(\"\"No unique elements in the array\"\");\nreturn 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Array_Level_2": {"1": "#include <stdio.h>  \nvoid rotate(int N,int arr[],int ROT)\n{\n    int ind,itr=0,end;\n    for(;itr<(ROT%N);itr++)\n    {    \n        end=arr[N-1];    \n        for(ind=N-1;ind>0;(arr[ind]=arr[ind-1]),ind--); \n        arr[0]=end;    \n    }    \n\n}\nint main()    \n{    \n    int  N,ROT,index=0,ind;\n    scanf(\"\"%d\"\",&N);\n    int arr[N];\n    for(;index<N;scanf(\"\"%d\"\",&arr[index]),index++);\n    scanf(\"\"%d\"\",&ROT);\n    rotate(N,arr,ROT); \n    for(ind=0;ind<N;printf(\"\"%d \"\", arr[ind]),ind++);\n}", "2": "#include <stdio.h>  \nvoid rotate(int N,int arr[],int ROT)\n{\n    int ind,itr=0,start;\n    for(;itr<(ROT%N);itr++)\n    {    \n        start=arr[0];    \n        for(ind=0;ind<N-1;(arr[ind]=arr[ind+1]),ind++); \n        arr[N-1]=start;    \n    }    \n}\nint main()    \n{    \n    int  N,ROT,index=0,ind;\n    scanf(\"\"%d\"\",&N);\n    int arr[N];\n    for(;index<N;scanf(\"\"%d\"\",&arr[index]),index++);\n    scanf(\"\"%d\"\",&ROT);\n    rotate(N,arr,ROT); \n   for(ind=0;ind<N;printf(\"\"%d \"\", arr[ind]),ind++);\n   return 0;\n}", "3": "#include<stdio.h>\nvoid arr_rotation(int no_ele,int arr[],int no_rotation)\n{  \n    int index,temp;\n    no_rotation=no_rotation%(no_ele/2);\nwhile(no_rotation)\n{\ntemp=arr[no_ele-1];\nfor(index=no_ele-1;index>no_ele/2;index--)\narr[index]=arr[index-1];\narr[no_ele/2]=temp;\nno_rotation--;\n}\nfor(index=0;index<no_ele;index++)\nprintf(\"%d \",arr[index]);\n}\nint main()\n{\nint no_ele,index;\nscanf(\"%d\",&no_ele);\nint arr[no_ele];\nfor(index=0;index<no_ele;index++)\nscanf(\"\"%d\"\",&arr[index]);\nint no_rotation;\nscanf(\"%d\",&no_rotation);\narr_rotation(no_ele,arr,no_rotation);\nreturn 0;\n}", "4": "\"#include<stdio.h>\r\nvoid rotation(int N,int arr[],int ROT)\r\n{  \r\n    int index,temp;\r\n    ROT=ROT%(N/2);\r\n    while(ROT)\r\n    {\r\n        temp=arr[N/2];\r\n        for(index=N/2;index<N-1;index++)\r\n        arr[index]=arr[index+1];\r\n        arr[N-1]=temp;\r\n        ROT--;\r\n    }\r\n    for(index=0;index<N;index++)\r\n    printf(\"\"%d \"\",arr[index]);\r\n}\r\nint main()\r\n{\r\n    int N,index=0,ROT;\r\n    scanf(\"\"%d\"\",&N);\r\n    int arr[N];\r\n    for(;index<N;scanf(\"\"%d\"\",&arr[index++]));\r\n    scanf(\"\"%d\"\",&ROT);\r\n    rotation(N,arr,ROT);\r\n    return 0;\r\n}\"", "5": "#include<stdio.h>\n#include<limits.h>\nint main()\n{\n    int N;\n    scanf(\"\"%d\"\",&N);\n    int arr[N],max=INT_MIN,itr=0,ind,count;\n    for(;itr<N;scanf(\"\"%d\"\",&arr[itr]),itr++);\n    for(count=0;count<N;count++)\n    {\n        int sum=0;\n        for(ind=0;ind<N;ind++)\n        {\n            sum=sum+arr[ind]*((ind+count)%N);\n        }\n        if(sum>max)\n        max=sum;\n    }\n    printf(\"\"%d\"\",max);\n}", "6": "\"#include<stdio.h>\nint KthELEMENT(int N,int K,int arr[])\n{  \n    int ind,itr;\n    if(K>N) return 0;\n    else \n    for(itr=0;itr<N;itr++)\n        for(ind=0;ind<N-itr;ind++)\n            if(arr[ind]>arr[ind+1])\n            {\n                arr[ind]=arr[ind]^arr[ind+1];\n                arr[ind+1]=arr[ind]^arr[ind+1];\n                arr[ind]=arr[ind]^arr[ind+1];\n            }\n    return arr[K-1];\n}\nint main()\n{\n    int N,K,index=0,ans;\n    scanf(\"\"%d %d\"\",&N,&K);\n    int arr[N];\n    for(;index<N;scanf(\"\"%d\"\",&arr[index]),index++);\n    ans=KthELEMENT(N,K,arr);\n    (ans==0)?printf(\"\"Out of Range\"\"):printf(\"\"%d\"\",ans);\n}", "7": "\"#include <stdio.h>\r\nint main()\r\n{\r\n    int itr,ind=0,K,N;\r\n    scanf(\"\"%d\"\",&N);\r\n    int arr[N];\r\n    for(;ind<N;scanf(\"\"%d\"\",&arr[ind]),ind++);\r\n    for(K=0;K<N;K++)\r\n    for(itr=K+1;itr<N;itr++)\r\n    if(arr[K]==arr[itr])\r\n    {\r\n        for(ind=itr;ind<N;(arr[ind]=arr[ind+1]),ind++);\r\n        N--;\r\n        itr--;\r\n    }\r\n    for(ind=0;ind<N;printf(\"\"%d \"\",arr[ind]),ind++);\r\nreturn 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#define min(x,y) (x<y)?(x):(y)\r\nint minswap(int *arr,int n,int k) \r\n{\r\n\tint count=0,ind=0,max;\r\n\tfor(;ind<n;ind++)\r\n\t\tif(arr[ind]<=k) count++;\r\n\tfor(ind=0;ind<count;ind++)\r\n\t\tif(arr[ind]>k) max++;\r\n\tint ans=max;\r\n\tfor(int front=0,rear=count;rear<n;front++,rear++) \r\n\t{\r\n\t\tif(arr[front]>k) max--;\r\n\t\tif(arr[rear]>k) max++;\r\n\t\tans=min(ans,max);\r\n\t}\r\n\treturn ans;\r\n}\r\nint main() \r\n{\r\n    int N,ind=0,K;\r\n    scanf(\"%d\",&N);\r\n\tint arr[N];\r\n\tfor(;ind<N;scanf(\"%d\",&arr[ind]),ind++);\r\n\tscanf(\"%d\",&K);\r\n\tprintf(\"%d\",minswap(arr,N,K));\r\n}\r\n", "9": "#include<stdio.h>\r\nint increase(int *arr,int num)\r\n{\r\n    int itr;\r\n    for(itr=0;itr<num-1;itr++)\r\n    {\r\n        if(arr[itr]<arr[itr+1])\r\n        return 0;\r\n    }\r\n    return 1;\r\n}\r\nint decrease(int *arr,int num)\r\n{\r\n    int itr;\r\n    for(itr=0;itr<num-1;itr++)\r\n    {\r\n        if(arr[itr]>arr[itr+1])\r\n        return 0;\r\n    }\r\n    return 1;\r\n}\r\nint main()\r\n{\r\n    int arr[100],N,ind=0;\r\n    scanf(\"\"%d\"\",&N);\r\n    for(;ind<N;scanf(\"\"%d\"\",&arr[ind++]));\r\n    (increase(arr,N)||decrease(arr,N))?printf(\"\"Monotonic\"\"):printf(\"\"Not Monotonic\"\");\r\n}\r\n", "10": "#include<stdio.h>\nint main()\n{\n    int arr[100],N,ind=0,count;\n    scanf(\"%d\",&N);\n    for(;ind<N;scanf(\"%d\",&arr[ind]),ind++);\n    for(count=0;count<N;count++)\n    {\n        int inc=0,dec=0;\n        ind=0;\n        while((ind+count)%N<N+1 && arr[(ind+count)%N]<arr[(ind+count+1)%N])\n        {\n            inc++;\n            ind++;\n        }\n        while((ind+count)%N<N+1 && arr[(ind+count)%N]>arr[(ind+count+1)%N])\n        {\n            dec++;\n            ind++;\n        }\n        if(inc+dec==N-1)\n        break;\n    }\n    (count<N)?printf(\"Bitonic\"):printf(\"Not Bitonic\");\n    return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Array_Level_3": {"1": "#include<stdio.h>\nvoid quicksort(int *arr,int first,int last)\n{\n int start,end, pivot, temp;\n if(first<last){\n pivot=first;\n start=first;\n end=last;\n while(start<end)\n {\n while(arr[start]<=arr[pivot]&&start<last)\n start++;\n while(arr[end]>arr[pivot])\n end--;\n if(start<end){\n temp=arr[start];\n arr[start]=arr[end];\n arr[end]=temp;\n }\n }\n temp=arr[pivot];\narr[pivot]=arr[end];\n arr[end]=temp;\n quicksort(arr,first,end-1);\n quicksort(arr,end+1,last);\n }\n}\nint main(){\n int ind, size;\n scanf(\"\"%d\"\",&size);\n int arr[size];\n for(ind=0;ind<size;ind++)\n scanf(\"\"%d\"\",&arr[ind]);\n quicksort(arr,0,size-1);\n for(ind=0;ind<size;ind++)\n printf(\"\"%d \"\",arr[ind]);\n return 0;\n}\n", "2": "#include <stdio.h>\n#define max(a,b) (a)>(b)?(a):(b)\nint Largest_Sum(int *arr, int size, int val_k)\n{\n        int res = 0;\n        for (int ind=0; ind<val_k; ind++)\n        res += arr[ind];\n        int curr_sum = res;\n        for (int ind=val_k; ind<size; ind++)\n        {\n        curr_sum += arr[ind] - arr[ind-val_k];\n        res = max(res, curr_sum);\n        }\n\n        return res;\n}\n\nint main()\n{\n    int size,val_k,ind;\n    scanf(\"\"%d\"\",&size);\n    int arr[size];\n    for(ind=0;ind<size;scanf(\"\"%d\"\",&arr[ind++]));\n    scanf(\"\"%d\"\",&val_k);\n        printf(\"\"%d\"\",Largest_Sum(arr, size, val_k));\n        return 0;\n}\n", "3": "#include<stdio.h>\r\n#include<malloc.h>\r\nint* collectEven(int *arr,int size)\r\n{\r\n int *result,rIndex=0,index;\r\n result=(int*)malloc(size*sizeof(int));\r\n for(index=0;index<size;index++)\r\n {\r\n if(arr[index]%2==0)\r\n result[rIndex++]=arr[index];\r\n }\r\n result[rIndex]=-1;\r\n return result;\r\n}\r\nint main()\r\n{\r\n int size,arr[100000],index,*result;\r\n scanf(\"%d\",&size);\r\n for(index=0;index<size;index++)\r\n scanf(\"%d\",&arr[index]);\r\n result=collectEven(arr,size);\r\n for(index=0;result[index]!=-1;index++)\r\n printf(\"%d \",result[index]);\r\n return 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n    int size,ind,e_ind,shift,safe;\r\n    scanf(\"\"%d\"\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"\"%d\"\",&arr[ind++]));\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        while(arr[ind]%2!=0)\r\n            ind++;\r\n        for(e_ind=ind+1; e_ind<size&&arr[e_ind]%2==0; e_ind++);\r\n        if(e_ind >= size)\r\n            break;\r\n        safe = arr[e_ind];\r\n        for(shift=e_ind; shift>=ind; shift--)\r\n            arr[shift] = arr[shift-1];\r\n        arr[ind]=safe;\r\n    }\r\n    for(ind=0;ind<size;printf(\"\"%d \"\",arr[ind++]));\r\n    return 0;\r\n}\r\n\r\n\r\n", "5": "#include<stdio.h>\r\nint main()\r\n{\r\n    int size,ind,e_ind,shift,safe;\r\n    scanf(\"\"%d\"\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"\"%d\"\",&arr[ind++]));\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        while(arr[ind]<0)\r\n            ind++;\r\n        for(e_ind=ind+1; e_ind<size&&arr[e_ind]>=0; e_ind++);\r\n        if(e_ind >= size)\r\n            break;\r\n        safe = arr[e_ind];\r\n        for(shift=e_ind; shift>=ind; shift--)\r\n            arr[shift] = arr[shift-1];\r\n        arr[ind]=safe;\r\n    }\r\n    for(ind=0;ind<size;printf(\"\"%d \"\",arr[ind++]));\r\n    return 0;\r\n}\r\n\"", "6": "#include<stdio.h>\nint main()\n{\nint size,value_k,ind,ind1,sum=0;\n scanf(\"\"%d\"\",&size);\n int arr[size];\n float ans[size];\n for(ind=0;ind<size;ind++)\n scanf(\"\"%d\"\",&arr[ind]);\n scanf(\"\"%d\"\",&value_k);\n for(ind=0;ind<size;ind++)\n {\n for(ind1=ind;ind1<ind+value_k;ind1++)\n {\n sum+=arr[ind1%size];\n }\n ans[ind]=(float)sum/value_k;\n sum=0;\n }\n for(ind=0;ind<size;ind++)\n printf(\"\"%.2f \"\",ans[ind]);\n return 0;\n}", "7": "#include<stdio.h>\nint Search(int *arr, int low, int high, int value)\n{\n if (arr[high] <= value)\n return high;\n if (arr[low] > value)\n return low;\n int mid = (low + high)/2;\n if (arr[mid] <= value && arr[mid+1] > value)\n return mid;\n if(arr[mid] < value)\n return Search(arr, mid+1, high, value);\n\n return Search(arr, low, mid - 1, value);\n}\nvoid K_Nearest(int *arr, int value, int ele_k, int size)\n{\n int left = Search(arr, 0, size-1, value);\n int right = left+1;\n int count = 0;\n if (arr[left] == value) left--;\n while (left >= 0 && right < size && count < ele_k)\n {\n if (value - arr[left] < arr[right] - value)\n printf(\"\"%d \"\", arr[left--]);\n else\n printf(\"\"%d \"\", arr[right++]);\n count++;\n }\n while (count < ele_k && left >= 0)\n {\n printf(\"\"%d \"\", arr[left--]);\n count++;\n }\n while (count < ele_k && right < size)\n {\n printf(\"\"%d \"\", arr[right++]);\n count++;\n }\n}\nint main()\n{\n int size,ind;\n scanf(\"\"%d\"\",&size);\n int arr[size];\n for(ind=0;ind<size;ind++)\n scanf(\"\"%d\"\",&arr[ind]);\n int value, ele_k;\n scanf(\"\"%d%d\"\",&value,&ele_k);\n K_Nearest(arr, value, ele_k, size);\n return 0;\n}", "8": "#include <stdio.h>\nint Count(int *arr, int size, int sum)\n{\n        int count = 0; \n    for (int ind1 = 0; ind1 < size; ind1++)\n                for (int ind2 = ind1 + 1; ind2 < size; ind2++)\n                        if (arr[ind1] + arr[ind2] == sum)\n                                count++;\n        return count;\n}\nint main()\n{\n    int size,sum,ind;\n    scanf(\"\"%d\"\",&size);\n    int arr[size];\n    for(ind=0;ind<size;scanf(\"\"%d\"\",&arr[ind++]));\n    scanf(\"\"%d\"\",&sum);\n        printf(\"\"%d \"\",Count(arr, size, sum));\n        return 0;\n}\n", "9": "#include<stdio.h>\r\n#include<limits.h>\r\nint main()\r\n{\r\n int size,ind,ind1,ind2,sum;\r\n long long int count=0,ele_k;\r\n scanf(\"\"%d\"\",&size);\r\n int arr[size];\r\n for(ind=0;ind<size;ind++)\r\n scanf(\"\"%d \"\",&arr[ind]);\r\n scanf(\"\"%lld\"\",&ele_k);\r\n for(ind=0;ind<size-2;ind++)\r\n {\r\n for(ind1=ind+1;ind1<size-1;ind1++)\r\n {\r\nfor(ind2=ind1+1;ind2<size;ind2++)\r\n{\r\n sum=arr[ind]+arr[ind1]+arr[ind2];\r\n if(sum>ele_k)\r\n count++;\r\n }\r\n }\r\n }\r\n printf(\"\"%lld\"\",count);\r\n return 0;\r\n}\r\n", "10": "#include<stdio.h>\n#include<limits.h>\nint main()\n{\n int arr[10000],size,ind,sum=0,max=INT_MIN;\n scanf(\"\"%d\"\",&size);\n for(ind=0;ind<size;ind++)\n scanf(\"\"%d\"\",&arr[ind]);\n for(ind=0;ind<size;ind++)\n {\n sum=sum+arr[ind];\n if(sum>max)\n max=sum;\nif(sum<0)\n sum=0;\n }\n printf(\"\"%d\"\",max);\n return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "backtracking": {"1": "#include<stdio.h>\n#include<stdlib.h>\n#define N 8\nvoid display(int **sudoku)\n{\n    //printf(\"Solution no : %d\\n\",cnt++);\n    for(int i=0;i<N;printf(\"\"\\n\"\"),i++)\n        for(int j=0;j<N;j++)\n            printf(\"%d \",sudoku[i][j]);\n    printf(\"\\n\");\n}\nint issafe(int **sudoku,int row,int col,int digit)\n{\n    for(int i=0;i<N;i++)\n        if(sudoku[row][i]==digit)\n            return 0;\n    for(int i=0;i<N;i++)\n        if(sudoku[i][col]==digit)\n            return 0;\n    int x=row/4*4,y=col/4*4,count=0;\n    for(int i=x;i<x+4;i++)\n        for(int j=y;j<y+4;j++)\n        {\n            if(sudoku[i][j]==digit) count++;\n            if(count>2) return 0;\n        }\n}\nint solve(int **sudoku,int row,int col)\n{\n    static int solution=0;\n    if(row==N-1 && col==N)\n    {\n        solution=1;\n        display(sudoku);\n        return solution;\n    }\n    else\n    {\n        if(col==N)\n        {\n            col=0;\n            row++;\n        }\n        if(sudoku[row][col]==0 && solution==0)\n        {\n            for(int i=1;i<=N;i++)\n            {\n                if(issafe(sudoku,row,col,i) && solution==0)\n                {\n                    sudoku[row][col]=i;\n                    solve(sudoku,row,col+1);\n                    sudoku[row][col]=0;\n                }\n            }\n        }\n        else\n        {\n            solve(sudoku,row,col+1);\n        }\n    }\n    return solution;\n}\nint main()\n{\n    int **sudoku;\n    sudoku=(int**)calloc(N,sizeof(int*));\n    for(int i=0;i<N;i++)\n        sudoku[i]=(int*)calloc(N,sizeof(int));\n    int row,col;\n    for(int row=0;row<N;row++)\n    {\n        for(int col=0;col<N;col++)\n        {\n            scanf(\"%d\",&sudoku[row][col]);\n        }\n    }\n    if(solve(sudoku,0,0)) /*display(sudoku)*/;\n    else printf(\"No\");\n    //display(sudoku);\n}\n", "2": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint N,cnt=1;\nint x[8]={ 2, 1, -1, -2, -2, -1, 1, 2 };\nint y[8]={ 1, 2, 2, 1, -1, -2, -2, -1 };\nvoid display(int **board)\n{\n    printf(\"Solution no: %d\\n\",cnt++);\n    for(int row=0;row<N;printf(\"\"\\n\"\"),row++)\n    for(int col=0;col<N;printf(\"%02d \",board[row][col++]));\n    printf(\"\\n\\n\");\n}\nint issafe(int **board,int row,int col)\n{\n    if(row>=0 && col>=0 && row<N && col<N && board[row][col]==-1) \n        return 1;\n    return 0;\n}\nint solve(int ** board,int row,int col,int move)\n{\n    static int solution=0;\n    if(move==N*N+1)\n    {\n        display(board);\n        solution=1;\n    }\n    for(int i=0;i<8;i++)\n    {\n        int next_row=x[i]+row;\n        int next_col=y[i]+col;\n        if(issafe(board,next_row,next_col))\n        {\n            board[next_row][next_col]=move;\n            solve(board,next_row,next_col,move+1);\n            board[next_row][next_col]=-1;\n        }\n    }\n    return solution;\n}\nint main()\n{\n    scanf(\"\"%d\"\",&N);\n    int **board=(int **)malloc(N*sizeof(int*));\n    for(int ind=0;ind<N;ind++)\n    {\n        board[ind]=(int *)malloc(N*sizeof(int));\n        memset(board[ind],-1,N*sizeof(int));\n    }\n    board[0][0]=1;\n    if(!solve(board,0,0,2)) printf(\"Not Available\");\n    return 0;\n}\n\n\n\n", "3": "#include<stdio.h>\nvoid RemoveDuplicates(char * str)\n{\n    if(*(str+0)=='\\\\0')\n    {\n        return;\n    }\n    if(*(str+0)==*(str+1))\n    {\n        int ind=0;\n        while(str[ind]!='\\\\0')\n        {\n            *(str+ind)=*(str+(ind+1));\n            ind++;\n        }\n        RemoveDuplicates(str);\n    }\n    RemoveDuplicates(str+1);\n}\nint main()\n{\n    int testcases;\n    scanf(\"%d\",&testcases);\n    for(int itr=1;itr<=testcases;itr++)\n    {\n        char str[100000];\n        scanf(\"%s\",str);\n        RemoveDuplicates(str);\n        printf(\"%s\",str);\n    }\n}", "4": "#include <stdio.h>\n#define MAX_SIZE 100\nvoid findCombinations(int arr[], int data[], int start, int end, int index, int key, int sum)\n{\n    if (sum == key) \n    {\n        for (int ind = 0; ind < index; ind++) {\n            printf(\"%d \", data[ind]);\n        }\n        printf(\"\\n\");\n        return;\n    }\n    for (int ind = start; ind <= end && sum + arr[ind] <= key; ind++) \n    {\n        data[index] = arr[ind];\n        findCombinations(arr, data, ind , end, index + 1, key, sum + arr[ind]);\n    }\n}\nint main()\n{\n    int data[MAX_SIZE];\n    int n, key;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int ind = 0; ind < n; ind++) \n    {\n        scanf(\"%d\", &arr[ind]);\n    }\n    scanf(\"%d\", &key);\n    findCombinations(arr, data, 0, n - 1, 0, key, 0);\n    return 0;\n}", "5": "#include <stdio.h>\n#include <string.h>\nvoid solve(int num,char *input)\n{\n char result[1024];\n if(num==0)\n    {\n        printf(\"%s\\n\",input);\n        return;\n    }\n    else\n    {\n     char prev = input[0];\n     int count = 1;\n     int ind, res_ind = 0;           \n        for(ind=1;input[ind]; ind++)\n        {\n            if(input[ind] == prev)\n            {\n                count++;\n            } \n            else\n            {\n                result[res_ind++] = count + '0';\n                result[res_ind++] = prev;\n                count = 1;\n            }\n            prev = input[ind];\n        } \n        result[res_ind++] = count + '0';\n        result[res_ind++] = prev;\n        result[res_ind]='\\\\0';\n        solve(num-1,result);\n    }\n}\nint main()\n{\n char input[1024]=\"1\";\n int num;  \n scanf(\"%d\",&num);\n    solve(num-1,input);\n return 0;\n}", "6": "#include<stdio.h>\n#include<malloc.h>\n#include<string.h>\nint cnt=1;\nvoid display(int **maze,int N,int M)\n{\n    printf(\"Path : %d\\n\",cnt++);\n    for(int i=0;i<N;printf(\"\\n\"),i++)\n    for(int j=0;j<M;printf(\"%2d \",maze[i][j]),j++);\n    printf(\"\\n\");\n}\nint isSafe(int row,int col,int r_size,int c_size)\n{\n    if(row>=0 && row<r_size && col>=0 && col<c_size)\n        return 1;\n    else \n        return 0;\n}\nvoid solve(int ** maze,int row,int col,int N,int M,int val)\n{\n    if(row==N-1 && col==M-1)\n    {\n        display(maze,N,M);\n    }\n    else\n    {\n        int next_i,next_j;\n        next_i=row;next_j=col+1;\n        if(isSafe(next_i,next_j,N,M))\n        {\n            maze[next_i][next_j]=val;\n            solve(maze,next_i,next_j,N,M,val);\n        }\n        next_i=row+1;\n        next_j=col;\n        if(isSafe(next_i,next_j,N,M))\n        {\n            maze[next_i][next_j]= val;\n            solve(maze,next_i,next_j,N,M,val);\n        }\n    }\n    maze[row][col]=0;\n}\nint main()\n{\n    int N,M;\n    scanf(\"%d %d\",&N,&M);\n    int **maze;\n    maze=(int**)malloc(sizeof(int*)*N);\n    for(int ind=0;ind<N;ind++)\n    {\n        maze[ind]=(int*)malloc(sizeof(int)*M);\n        memset(maze[ind],0,M*sizeof(int));\n    }\n    maze[0][0]=1;\n    solve(maze,0,0,N,M,1);\n}", "7": "#include<stdio.h>\nlong long int Fibonacci(int N)\n{\n    if(N<=1) return N;\n    return Fibonacci(N-1) + Fibonacci(N-2);\n}\nint main()\n{\n    int N;\n    scanf(\"%d\",&N);\n    long long int res=Fibonacci(N);\n    printf(\"%lld\",res);\n}", "8": "#include<stdio.h>\n#include<malloc.h>\nshort int size,cnt=1;\nvoid display(char ** board)\n{\n    printf(\"Solution No : %d\\n\",cnt++);\n    for(int row=0;row<size;printf(\"\\n\"),row++)\n        for(int col=0;col<size;col++)\n            printf(\"%c \",board[row][col]);\n    printf(\"\\n\");\n}\nint isSafe(char ** board,int row,int col)\n{\n    int i,j;\n    for(i=row;i>=0;i--)\n        if(board[i][col]=='Q') return 0;\n    for(i=row,j=col;j>=0 && i>=0;j--,i--)\n        if(board[i][j]=='Q') return 0;\n    for(i=row,j=col;j<size && i>=0;j++,i--)\n        if(board[i][j]=='Q') return 0;\n    return 1;\n}\nint NQueen(char ** board,int row)\n{\n    if(row==size)\n    {\n        display(board);\n        return 1;\n    }\n    else\n    {\n        for(int col=0;col<size;col++)\n        {\n            if(isSafe(board,row,col))\n            {\n                board[row][col]='Q';\n                if(NQueen(board,row+1));\n                board[row][col]='-';\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    scanf(\"%hi\",&size);\n    char ** board;\n    board=(char**)malloc(sizeof(char*)*size);\n    for(int ind=0;ind<size;ind++)\n        board[ind]=(char*)malloc(sizeof(char)*size);\n    for(int row=0;row<size;row++)\n        for(int col=0;col<size;col++)\n            board[row][col]='-';\n    if(!(NQueen(board,0))) printf(\"No Solution\");\n}\n", "9": "#include<stdio.h>\n#include<math.h>\nint row,cnt=1;\nvoid display(int size,int arr[size][2])\n{\n    printf(\"Test case %d Solution\\n\",cnt++);\n    for(int ind=0;ind<size;ind++)\n    {\n        printf(\"{%d , %d}\\n\",arr[ind][0],arr[ind][1]);\n    }\n    printf(\"\\n\");\n}\nvoid TowerOfHanoi(int size,int arr[size][2],int N,int from,int aux,int to)\n{\n    if(N)\n    {\n        TowerOfHanoi(size,arr,N-1,from,to,aux);\n        arr[row][0]=from;\n        arr[row][1]=to;\n        row++;\n        TowerOfHanoi(size,arr,N-1,aux,from,to);\n    }\n}\nint main()\n{\n    int T,N;\n    scanf(\"%d\",&T);\n    for(int i=1;i<=T;i++)\n    {\n        scanf(\"%d\",&N);\n        int size=pow(2,N)-1;\n        int arr[size][2];\n        row=0;\n        TowerOfHanoi(size,arr,N,1,2,3);\n        display(size,arr);\n    }\n}", "10": "\"#include<stdio.h>\n#include<malloc.h>\n#include<string.h>\nint cnt=1;\nvoid display(int **matrix,int N,int M)\n{\n    printf(\"\"Path : %d\\n\"\",cnt++);\n    for(int i=0;i<N;printf(\"\"\\n\"\"),i++)\n    for(int j=0;j<M;printf(\"\"%2d \"\",matrix[i][j]),j++);\n    printf(\"\"\\n\"\");\n}\nint isSafe(int row,int col,int r_size,int c_size)\n{\n    if(row>=0 && row<r_size && col>=0 && col<c_size)\n        return 1;\n    else \n        return 0;\n}\nvoid solve(int ** matrix,int row,int col,int N,int M,int val)\n{\n    if(row==N-1 && col==M-1)\n    {\n        display(matrix,N,M);\n    }\n    else\n    {\n        int next_i,next_j;\n        next_i=row;next_j=col+1;\n        if(isSafe(next_i,next_j,N,M))\n        {\n            matrix[next_i][next_j]=val;\n            solve(matrix,next_i,next_j,N,M,val);\n        }\n        next_i=row+1;\n        next_j=col;\n        if(isSafe(next_i,next_j,N,M))\n        {\n            matrix[next_i][next_j]= val;\n            solve(matrix,next_i,next_j,N,M,val);\n        }\n    }\n    matrix[row][col]=0;\n}\nint main()\n{\n    int N,M;\n    scanf(\"\"%d %d\"\",&N,&M);\n    int **matrix;\n    matrix=(int**)malloc(sizeof(int*)*N);\n    for(int ind=0;ind<N;ind++)\n    {\n        matrix[ind]=(int*)malloc(sizeof(int)*M);\n        memset(matrix[ind],0,M*sizeof(int));\n    }\n    matrix[0][0]=1;\n    solve(matrix,0,0,N,M,1);\n}\"\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Basic_I/P_O/P_Level_0": {"1": "#include<stdio.h>\nint main() \n{\n printf(\"\"Let's learn 'C' together with MySlate Team\"\");\n return 0;\n}", "2": "#include<stdio.h>\nint main() \n{\n printf(\"\"Success is when your \"\"signature\"\" becomes \"\"autograph\"\"\"\");\n return 0;\n}", "3": "#include<stdio.h>\nint main() \n{\n printf(\"\"\\\\\\n\"\");\n return 0;\n}", "4": "#include<stdio.h>\nint main() \n{\n printf(\"\"%%%%\"\");\n return 0;\n}", "5": "#include<stdio.h>\nint main() \n{\n printf(\"\"\\\\\"\");\n return 0;\n}", "6": "#include<stdio.h>\nint main() \n{\nlong long int num;\nscanf(\"\"%lld\"\",&num);\nprintf(\"\"%lld\"\",num);\nreturn 0;\n}", "7": "\"#include<stdio.h>\nint main() \n{\nchar ch;\nscanf(\"\"%c\"\",&ch);\nprintf(\"\"%c\"\",ch);\nreturn 0;\n}\"", "8": "#include<stdio.h> \nint main()\n{\n    int num1=20,num2=10;\n    printf(\"\"%d %d\"\",num1,num2);\n    return 0;\n}", "9": "#include<stdio.h> \r\nint main()\r\n{\r\nlong int num1,num2;\r\nscanf(\"%ld %ld\",&num1,&num2);\r\nprintf(\"%05ld\\n%5ld\",num1,num2);\r\nreturn 0;\r\n}", "10": "#include <stdio.h>\nint main()\n{\n    long long int num;\n    scanf(\"\"%lld\"\",&num);\n    printf(\"\"%+lld\"\",num);\n    return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Basic_I/P_O/P_Level _1": {"1": "#include<stdio.h> \nint main()\n{\n    char ch;\n    scanf(\"\"%c\"\",&ch);\n    printf(\"\"%c:%d\"\",ch,ch);\n    return 0;\n}", "2": "#include<stdio.h> \nint main()\n{\n  int val;\n  scanf(\"\"%d\"\",&val);\n  if(val>=0 && val<=127)\n    printf(\"\"%d:%c\"\",val,val);\n  else \n    printf(\"\"%d:Invalid Input\"\",val);\n   return 0;\n}", "3": "#include<stdio.h>\nint main()\n{\nlong double fnum;\nscanf(\"\"%Lf\"\",&fnum);\nprintf(\"\"%.2Lf\"\",fnum);\nreturn 0;\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nlong double num;\r\nscanf(\"\"%Lf\"\",&num);\r\nprintf(\"\"%20.4Lf\"\",num);\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\nint main()\n{\nlong double num;\nint precision;\nscanf(\"\"%Lf %d\"\",&num,&precision); \nprintf(\"\"%.*Lf\"\",precision,num);\nreturn 0;\n}", "6": "#include<stdio.h>\nint main()\n{\nlong double fnum;\nscanf(\"\"%Lf\"\",&fnum);\nprintf(\"\"%.0Lf\"\",fnum);\nreturn 0;\n}\n", "7": "#include<stdio.h> \nint main()\n{\n    int num;\n    scanf(\"\"%i\"\",&num);\n    printf(\"\"%d\"\",num);\n    return 0;\n}", "8": "#include<stdio.h> \nint main()\n{\n    float fnum;\n    scanf(\"\"%f\"\",&fnum);\n    printf(\"\"%e\"\",fnum);\n    return 0;\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n    long long int llnum;\r\n    scanf(\"%lld\",&llnum);\r\n    printf(\"%llX\",llnum);\r\n    return 0;\r\n}", "10": "#include<stdio.h>\nint main()\n{\ndouble num;\nscanf(\"\"%lf\"\",&num);\nprintf(\"\"%g\"\",num);\nreturn 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Basic_I/P_O/P_Level_2": {"1": "#include <stdio.h>\nint main()\n{\n   long long int N1,N2;\n   scanf(\"\"%lld %lld\"\",&N1,&N2);\n   printf(\"\"Sum of %lld and %lld is %lld\"\",N1,N2,N1+N2);\n   return 0;\n}\n", "2": "#include <stdio.h>\n#include<stdlib.h>\nint main()\n{\n   int N1,N2;\n   scanf(\"\"%d%d\"\",&N1,&N2);\n   printf(\"\"%d\"\",abs(N1-N2));\n   return 0;\n}\n", "3": "#include <stdio.h>\nint main()\n{\n    float N1,N2;\n    scanf(\"\"%f%f\"\",&N1,&N2);\n    printf(\"\"%.2f\"\",N1*N2);\n   return 0;\n}", "4": "#include <stdio.h>\nint main()\n{\n    int N1,N2;\n    scanf(\"\"%d%d\"\",&N1,&N2);\n    long double ans;\n    ans=(long double)N1/N2;\n    printf(\"\"The quotient when %d is divided by %d is %.16Lf\"\",N1,N2,ans);\n    printf(\"\"\\nThe remainder when %d is divided by %d is %d\"\",N1,N2,N1%N2);\n}\n", "5": "\"#include<stdio.h>\nint main()\n{\n  int N1,N2,temp;\n  scanf(\"\"%d%d\"\",&N1,&N2);\n  temp=N1;\n  N1=N2;\n  N2=temp;\n  printf(\"\"num1=%d\\nnum2=%d\"\",N1,N2);\n  return 0;\n}\"", "6": "\"#include<stdio.h>\nint main()\n{\n  int num1,num2;\n  scanf(\"\"\"\"%d%d\"\"\"\",&num1,&num2);\n  num1=(num1+num2);\n  num2=num1-num2;\n  num1=num1-num2;\n  printf(\"\"\"\"num1=%d\\nnum2=%d\"\"\"\",num1,num2);\n  return 0;\n}\"", "7": "\"#include<stdio.h>\r\nint main()\r\n{\r\nint num;\r\nscanf(\"\"%d\"\",&num);\r\nprintf(\"\"%d\"\",3-num);\r\n}\"", "8": "\"#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n  int num;\n  scanf(\"\"%d\"\",&num);\n  printf(\"\"%d\"\",abs(num));\n  return 0;\n}\n\"", "9": "\"#include<stdlib.h>\n#include<stdio.h>\nint main()\n{\n    int tot_sec;\n    int hour;\n    int min;\n    int sec;\n    scanf(\"\"%d\"\", &tot_sec);\n    hour = tot_sec/3600;\n    min  = (tot_sec%3600)/60;\n    sec  = (tot_sec%3600)%60;\n    printf(\"\"%02d:HOUR %02dMIN :%02dSEC\"\", hour, min, sec);\n    return EXIT_SUCCESS;\n}\n\n\"", "10": "\"#include<stdio.h>\nint main()\n{\n long long int nod;\n int days,week,year;\n scanf(\"\"%lld\"\",&nod);\n year=nod/365;\n week=(nod%365)/7;\n days=(nod%365)%7;\n printf(\"\"Number of Years:%d\\n\"\",year);\n printf(\"\"Number of Week:%d\\n\"\",week);\n printf(\"\"Number of Days:%d\"\",days);\n return 0;\n}\n\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_bst_level_0": {"1": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nvoid Ascending_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        Ascending_Traversal(root->left);\r\n        printf(\"%d \",root->data);\r\n        Ascending_Traversal(root->right);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    Ascending_Traversal(root);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nvoid Descending_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        Descending_Traversal(root->right);\r\n        printf(\"%d \",root->data);\r\n        Descending_Traversal(root->left);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    Descending_Traversal(root);\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nint Search_Element(BST_NODE *root, int ele)\r\n{\r\n    BST_NODE *tptr;\r\n    for(tptr=root; tptr!=NULL && tptr->data!=ele ; ((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n\r\n    if(tptr==NULL)\r\n        return 0;\r\n    if(tptr->data == ele)\r\n        return 1;\r\n\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    int element;\r\n    scanf(\"%d\",&element);\r\n    if(Search_Element(root,element) == 1)\r\n        printf(\"Element found\");\r\n    else\r\n        printf(\"Element not found\");\r\n    return 0;\r\n}\r\n", "4": "\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nvoid PreOrder_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        printf(\"%d \",root->data);\r\n        PreOrder_Traversal(root->left);\r\n        PreOrder_Traversal(root->right);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    PreOrder_Traversal(root);\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nvoid PostOrder_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        PostOrder_Traversal(root->left);\r\n        PostOrder_Traversal(root->right);\r\n        printf(\"%d \",root->data);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    PostOrder_Traversal(root);\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nint Maximum_Value(BST_NODE *root)\r\n{\r\n    BST_NODE *tptr = root , *prev=NULL;\r\n\r\n    while(tptr!=NULL)\r\n    {\r\n        prev=tptr;\r\n        tptr = tptr->right;\r\n    }\r\n    return prev->data;\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    printf(\"%d\",Maximum_Value(root));\r\n    return 0;\r\n}\r\n\r\n", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nint Minimum_Value(BST_NODE *root)\r\n{\r\n    BST_NODE *tptr = root , *prev=NULL;\r\n\r\n    while(tptr!=NULL)\r\n    {\r\n        prev=tptr;\r\n        tptr = tptr->left;\r\n    }\r\n    return prev->data;\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    printf(\"%d\",Minimum_Value(root));\r\n    return 0;\r\n}\r\n\r\n\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nvoid Inorder_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        Inorder_Traversal(root->left);\r\n        printf(\"%d \",root->data);\r\n        Inorder_Traversal(root->right);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL;\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    for(ind=0;ind<size; ind++)\r\n    {\r\n        Insert_Node(&root, arr[ind]);\r\n    }\r\n    Inorder_Traversal(root);\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nint Check_BST(BST_NODE *root, BST_NODE *shadow)\r\n{\r\n    if (root!=NULL)\r\n    {\r\n        if (!Check_BST(root->left, shadow))\r\n            return 0;\r\n        if (shadow != NULL && root->data <= shadow->data)\r\n            return 0;\r\n        shadow = root;\r\n\r\n        return Check_BST(root->right,shadow);\r\n    }\r\n    return 1;\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL,*shadow=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    if(Check_BST(root,shadow)==1)\r\n        printf(\"YES\");\r\n    else\r\n        printf(\"NO\");\r\n    return 0;\r\n}\r\n", "10": "\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct bst_node\r\n{\r\n    struct bst_node *left;\r\n    int data;\r\n    struct bst_node *right;\r\n};\r\ntypedef struct bst_node BST_NODE;\r\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\r\n{\r\n    BST_NODE *newnode,*tptr,*prev=NULL;\r\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = newnode;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(ele < prev->data)\r\n            prev->left = newnode;\r\n        else\r\n            prev->right = newnode;\r\n    }\r\n}\r\nBST_NODE* Node_Creation(int ele)\r\n{\r\n    BST_NODE *newnode;\r\n    newnode = (BST_NODE*)malloc(sizeof(BST_NODE));\r\n    newnode->left = newnode->right = NULL;\r\n    newnode->data = ele;\r\n    return newnode;\r\n}\r\nvoid Node_To_Be_Inserted(BST_NODE **root_ptr,BST_NODE *node)\r\n{\r\n    BST_NODE *tptr,*prev;\r\n    if(*root_ptr == NULL)\r\n        *root_ptr = node;\r\n    else\r\n    {\r\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((node->data < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\r\n        if(node->data < prev->data)\r\n            prev->left = node;\r\n        else\r\n            prev->right = node;\r\n    }\r\n}\r\nvoid Inorder_Traversal(BST_NODE *root)\r\n{\r\n    if(root!=NULL)\r\n    {\r\n        Inorder_Traversal(root->left);\r\n        printf(\"%d \",root->data);\r\n        Inorder_Traversal(root->right);\r\n    }\r\n}\r\nint main()\r\n{\r\n    BST_NODE *root=NULL,*shadow=NULL,*node;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        Insert_Node(&root,num);\r\n    }\r\n    int ele;\r\n    scanf(\"%d\",&ele);\r\n    node = Node_Creation(ele);\r\n    Node_To_Be_Inserted(&root,node);\r\n    Inorder_Traversal(root);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_bst_level_1": {"1": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nvoid Find_Middle(BST_NODE *root, int count)\n{\n    static int mid=0;\n    if(root != NULL)\n    {\n        Find_Middle(root->left,count);\n        mid++;\n        if(mid == ((count/2)+1))\n            printf(\"%d\",root->data);\n        Find_Middle(root->right,count);\n    }\n}\nvoid find_mid(BST_NODE* root)\n{\n int count=0;\n Find_Middle(root,count-1);\n}\nint main()\n{\n    BST_NODE *root=NULL;\n    int num,count=0;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        count++;\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\nfind_mid(root);\n \n    return 0;\n}\n\n", "2": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nint Smallest_K_Elements(BST_NODE *root,int k)\n{\n    static count=0;\n    BST_NODE *left_child;\n    if(root!=NULL)\n    {\n        left_child = Smallest_K_Elements(root->left,k);\n        if(left_child!=NULL)\n            return left_child;\n        count++;\n        if(count == k)\n            return root->data;\n        Smallest_K_Elements(root->right,k);\n    }\n}\nint main()\n{\n    BST_NODE *root=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    int value_k;\n    scanf(\"%d\",&value_k);\n    printf(\"%d\" ,Smallest_K_Elements(root,value_k));\n    return 0;\n}\n\n", "3": "#include<stdio.h>\n#include<stdlib.h>\n#include<limits.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nint Closest_Element(BST_NODE *root,int k)\n{\n    static int mid;\n    if(root!=NULL)\n    {\n        Closest_Element(root->left,k);\n        if(root->data <= k)\n            mid = root->data;\n        Closest_Element(root->right,k);\n    }\n    return mid;\n}\nint main()\n{\n    BST_NODE *root=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    int value_k;\n    scanf(\"%d\",&value_k);\n    printf(\"%d\",Closest_Element(root,value_k));\n    return 0;\n}\n\n\n", "4": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nint Find_Sum(BST_NODE *root, int start, int end)\n{\n    static int sum=0;\n    if(root!=NULL)\n    {\n        Find_Sum(root->left,start,end);\n        if(root->data>=start && root->data<=end)\n            sum = sum + root->data;\n        Find_Sum(root->right,start,end);\n    }\n    return sum;\n}\nint main()\n{\n    BST_NODE *root=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    int start,end;\n    scanf(\"%d%d\",&start,&end);\n    printf(\"%d\",Find_Sum(root,start,end));\n    return 0;\n}\n", "5": "#include<limits.h>\n#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nint Maximum_Difference(BST_NODE *root)\n{\n    static int min=INT_MAX,max=INT_MIN;\n    if(root!=NULL)\n    {\n        Maximum_Difference(root->left);\n        if(root->data < min)\n            min = root->data;\n        if(root->data > max)\n            max = root->data;\n        Maximum_Difference(root->right);\n    }\n    return max - min;\n}\nint main()\n{\n    BST_NODE *root=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    printf(\"%d\" ,Maximum_Difference(root));\n    return 0;\n}\n", "6": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nvoid Level_Order(BST_NODE *root,int count, int level)\n{\n    if(root!=NULL)\n    {\n        if(count == level)\n            printf(\"%d \",root->data);\n        Level_Order(root->left ,count+1, level);\n        Level_Order(root->right,count+1,level);\n    }\n}\n void level_print(BST_NODE * root,int level)\n{\n   int count=0;\n   Level_Order(root,count,level);\n}\n\nint main()\n{\n    BST_NODE *root=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    int level;\n    scanf(\"%d\",&level);\n    level_print(root,level); \n    return 0;\n}\n", "7": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\nBST_NODE* Find_Root(BST_NODE *root, int value)\n{\n    static BST_NODE *flag=NULL;\n    if(root!=NULL)\n    {\n        Find_Root(root->left,value);\n        if(root->data == value)\n            flag=root;\n        Find_Root(root->right,value);\n    }\n    return flag;\n}\nint Find_Difference(BST_NODE *root, int value)\n{\n       static int sum1=0, sum2=0;\n       if(root!=NULL)\n       {\n           Find_Difference(root->left , value);\n           if(root->data < value)\n                sum1 = sum1 + root->data;\n           else if(root->data > value)\n                sum2 = sum2 + root->data;\n           Find_Difference(root->right,value);\n       }\n       if(sum1>sum2)\n            return sum1-sum2;\n       else\n            return sum2-sum1;\n}\nint find_diff(BST_NODE * root , int value)\n{\n   BST_NODE * new_root = Find_Root(root,value);\n   return Find_Difference(new_root,value);\n}\nint main()\n{\n    BST_NODE *root=NULL,*new_root;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root,num);\n    }\n    int value,diff;\n    scanf(\"%d\",&value);\n    diff=find_diff(root,value);\n    printf(\"Difference : %d\",diff);\n    return 0;\n}\n", "8": "#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\n\nvoid Search(int ele, BST_NODE *root,int pairsum,int *flag_ptr)\n{\n    int sum=0;\n    if(root!=NULL)\n    {\n        Search(ele,root->left,pairsum,flag_ptr);\n        sum = ele + root->data;\n        if(sum == pairsum)\n            *flag_ptr=1;\n        Search(ele,root->right,pairsum,flag_ptr);\n    }\n}\nvoid find_pair_sum(BST_NODE *root1, BST_NODE *root2,int pairsum,int *flag_ptr)\n{\n    int flag=0;\n    if(root1!=NULL)\n    {\n        flag=0;\n        Search(root1->data,root2,pairsum,&flag);\n        if(flag==1)\n            *flag_ptr=1;\n        find_pair_sum(root1->left,root2,pairsum,flag_ptr);\n        find_pair_sum(root1->right,root2,pairsum,flag_ptr);\n    }\n    return flag_ptr;\n}\nint main()\n{\n    BST_NODE *root1=NULL,*root2=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root1,num);\n    }\n     while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root2,num);\n    }\n    int pairsum,flag;\n    scanf(\"%d\",&pairsum);\n    flag=0;\n    find_pair_sum(root1,root2,pairsum,&flag);\n    if(flag==1)\n        printf(\"YES\");\n    else\n        printf(\"NO\");\n    return 0;\n}\n", "9": "\n#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\n\nint Search(int ele, BST_NODE *root,int *flag_ptr)\n{\n\n    if(root!=NULL)\n    {\n        Search(ele,root->left,flag_ptr);\n        if(root->data == ele)\n                *flag_ptr=1;\n        Search(ele,root->right,flag_ptr);\n    }\n}\nvoid find_common(BST_NODE *root1, BST_NODE *root2)\n{\n    int flag=0;\n    if(root1!=NULL)\n    {\n        flag=0;\n        Search(root1->data,root2,&flag);\n        if(flag==1)\n            printf(\"%d \",root1->data);\n        find_common(root1->left,root2);\n        find_common(root1->right,root2);\n    }\n}\nint main()\n{\n    BST_NODE *root1=NULL,*root2=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root1,num);\n    }\n     while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root2,num);\n    }\n    find_common(root1,root2);\n    return 0;\n}\n", "10": "\n#include<stdio.h>\n#include<stdlib.h>\nstruct bst_node\n{\n    struct bst_node *left;\n    int data;\n    struct bst_node *right;\n};\ntypedef struct bst_node BST_NODE;\nvoid Insert_Node(BST_NODE **root_ptr , int ele)\n{\n    BST_NODE *newnode,*tptr,*prev=NULL;\n    newnode = (BST_NODE*)malloc(1*sizeof(BST_NODE));\n    newnode->left = newnode->right = NULL;\n    newnode->data = ele;\n    if(*root_ptr == NULL)\n        *root_ptr = newnode;\n    else\n    {\n        for(prev=NULL,tptr=*root_ptr; tptr!=NULL; prev=tptr,((ele < tptr->data) ? (tptr=tptr->left) : (tptr=tptr->right)));\n        if(ele < prev->data)\n            prev->left = newnode;\n        else\n            prev->right = newnode;\n    }\n}\n\nint Search(int ele, BST_NODE *root,int *flag_ptr)\n{\n\n    if(root!=NULL)\n    {\n        Search(ele,root->left,flag_ptr);\n        if(root->data == ele)\n                *flag_ptr=1;\n        Search(ele,root->right,flag_ptr);\n    }\n}\nvoid Traverse(BST_NODE *root1, BST_NODE *root2)\n{\n    int flag=0;\n    if(root1!=NULL)\n    {\n        flag=0;\n        Search(root1->data,root2,&flag);\n        if(flag==1)\n            printf(\"%d \",root1->data);\n        Traverse(root1->left,root2);\n        Traverse(root1->right,root2);\n    }\n}\nint main()\n{\n    BST_NODE *root1=NULL,*root2=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root1,num);\n    }\n     while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        Insert_Node(&root2,num);\n    }\n    Traverse(root1,root2);\n    return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_bt_level_0": {"1": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct node\r\n{\r\n   //Enter your code here\r\n};\r\ntypedef struct node BTNODE;\r\nstruct qnode\r\n{\r\n    BTNODE * BT_add;\r\n    struct qnode * qnext;\r\n};\r\ntypedef struct qnode QNODE;\r\n\r\nvoid enque(QNODE * * front_ptr , QNODE ** rear_ptr, BTNODE * enq_val)\r\n{\r\n    QNODE * newQnode;\r\n    newQnode=(QNODE*)malloc(sizeof(QNODE));\r\n    newQnode->BT_add=enq_val;\r\n    newQnode->qnext=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        (*front_ptr)=(*rear_ptr)=newQnode;\r\n    else\r\n    {\r\n        (*rear_ptr)->qnext=newQnode;\r\n        (*rear_ptr)=newQnode;\r\n    }\r\n}\r\nBTNODE * deque(QNODE * * front_ptr , QNODE ** rear_ptr)\r\n{\r\n    BTNODE * toReturn=NULL;\r\n    QNODE* toFree=NULL;\r\n    if((*front_ptr)==NULL||(*rear_ptr)==NULL)\r\n        return toReturn;\r\n    else\r\n    {\r\n        toReturn=(*front_ptr)->BT_add;\r\n        toFree=(*front_ptr);\r\n        (*front_ptr)=(*front_ptr)->qnext;\r\n        if((*front_ptr)==NULL)\r\n            (*rear_ptr)=NULL;\r\n        free(toFree);\r\n        return toReturn;\r\n    }\r\n}\r\nBTNODE * create_node(int input)\r\n{\r\n    BTNODE* newnode=NULL;\r\n    newnode=(BTNODE*)malloc(sizeof(BTNODE));\r\n    newnode->data=input;\r\n    newnode->lchild=newnode->rchild=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(BTNODE * * root_ptr, int input)\r\n{\r\n    BTNODE * newnode;\r\n    newnode=create_node(input);\r\n    if((*root_ptr)==NULL)\r\n        (*root_ptr)=newnode;\r\n    else\r\n    {\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(*root_ptr));\r\n        int upd_flag=0;\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            if(deq_val->lchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->lchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild==NULL && upd_flag==0)\r\n            {\r\n                deq_val->rchild=newnode;\r\n                upd_flag=1;\r\n            }\r\n            else if(upd_flag==0)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid level_order(BTNODE *root)\r\n{\r\n        QNODE * front=NULL;\r\n        QNODE * rear=NULL;\r\n        BTNODE * deq_val;\r\n        enque(&front,&rear,(root));\r\n        while(1)\r\n        {\r\n            deq_val=deque(&front,&rear);\r\n            if(deq_val==NULL)\r\n                break;\r\n            printf(\"%d \",deq_val->data);\r\n            if(deq_val->lchild)\r\n            {\r\n                enque(&front,&rear,deq_val->lchild);\r\n            }\r\n            if(deq_val->rchild)\r\n            {\r\n                enque(&front,&rear,deq_val->rchild);\r\n            }\r\n        }\r\n}\r\n\r\nint main()\r\n{\r\n  BTNODE * root=NULL;\r\n  int input;\r\n   while(1)\r\n  {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1)\r\n            break;\r\n        insert_node(&root,input);\r\n  }\r\n level_order(root);\r\n  return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Bitwise_Level_0": {"1": "#include<stdio.h>\nint main()\n{\nlong long int num1,num2,ans;\nscanf(\"\"%lld %lld\"\",&num1,&num2);\nans=num1|num2;\nprintf(\"\"%lld\"\",ans);\nreturn 0;\n}", "2": "\"#include<stdio.h>\nint main()\n{\nint num1,num2,ans;\nscanf(\"\"%d %d\"\",&num1,&num2);\nans=num1&num2;\nprintf(\"\"%d\"\",ans);\n\nreturn 0;\n}\"", "3": "#include<stdio.h>\nint main()\n{\nlong long int num1,num2,res;\nscanf(\"%lld %lld\",&num1,&num2);\nres=num1^num2;\nprintf(\"%lld\",res);\nreturn 0;\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n  long long int num;\r\nscanf(\"%lld\",&num);\r\nif(num&1)\r\nprintf(\"Odd\");\r\nelse\r\nprintf(\"Even\");\r\nreturn 0;\r\n}\r\n", "5": "\"#include<stdio.h>\nint main()\n{\nlong long int num,mask=1;\nscanf(\"\"%lld\"\",&num);\nfor(mask=1;mask<=num;mask=mask<<1)\nnum=num^mask;\nprintf(\"\"%lld\"\",num);\nreturn 0;\n}\"", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nif(num&1)\r\nprintf(\"On\");\r\nelse\r\nprintf(\"Off\");\r\nreturn 0;\r\n}\r\n", "7": "\"#include<stdio.h>\nint main() {\n\nint num,count=0,bits;\nscanf(\"\"%d\"\",&num);\nbits=sizeof(int)*8;\nwhile(num!=0)\n{\nif(num&1)\ncount++;\nnum=num>>1;\n}\ncount=bits-count;\nprintf(\"\"%d\"\",count);\nreturn 0;\n}\"", "8": "\"#include<stdio.h>\nint main() {\n\nint num,count=0;\nscanf(\"\"%d\"\",&num);\nwhile(num!=0)\n{\nif(num&1==1)\ncount++;\nnum=num>>1;\n}\nprintf(\"\"%d\"\",count);\nreturn 0;\n}\"", "9": "\"#include<stdio.h>\nint main() \n{\n\nint num,power=1;\nscanf(\"\"%d\"\",&num);\nint ans=num;\nwhile(num) {\nans=ans|power;\npower<<=2;\nnum>>=2; }\nprintf(\"\"%d\"\",ans);\nreturn 0;\n}\"", "10": "\"#include<stdio.h>\n#include <stdio.h>\n#define BITS sizeof(int) * 8\nint main()\n{\n\nint num, msb;\nscanf(\"\"%d\"\", &num);\nmsb = 1 << (BITS - 1);\nif(num & msb)\nprintf(\"\"MSB bit is on\"\");\nelse\nprintf(\"\"MSB bit is off\"\");\nreturn 0;\n}\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Biwise_Level_1": {"1": "#include<stdio.h>\nint main()\n{\nlong long int num;\nscanf(\"\"%lld\"\",&num);\nif ((num & (num - 1)) == 0)\nprintf(\"\"YES\"\");\nelse\nprintf(\"\"NO\"\");\nreturn 0;\n}", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num1,num2,temp;\r\nscanf(\"%lld%lld\",&num1,&num2);\r\ntemp=num1;\r\nnum1=num2;\r\nnum2=temp;\r\nprintf(\"%lld %lld\",num1,num2);\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,bit,newnum;\r\nscanf(\"%lld %lld\",&num,&bit);\r\nnewnum=num|(1<<(bit-1));\r\nprintf(\"%lld\",newnum);\r\nreturn 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int number,bit,newnumber;\r\nscanf(\"%lld %lld\",&number,&bit);\r\nnewnumber=number&(~(1<<(bit-1)));\r\nprintf(\"%lld\",newnumber);\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int number;\r\nscanf(\"%lld\",&number);\r\nif(number&(number>>1))\r\nprintf(\"FALSE\");\r\nelse\r\nprintf(\"TRUE\");\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nint number,mask=1,count=0;\r\nscanf(\"%d\",&number);\r\nif((number&3)==0)\r\nprintf(\"Divisible By 4\");\r\nelse\r\nprintf(\"Not Divisible By 4\");\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\nint number,mask=1,count=0;\r\nscanf(\"%d\",&number);\r\nif((number&7)==0)\r\nprintf(\"Divisible By 8\");\r\nelse\r\nprintf(\"Not Divisible By 8\");\r\nreturn 0;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nint number,mask=1,count=0;\r\nscanf(\"%d\",&number);\r\nwhile((number&mask)==0)\r\n{\r\ncount++;\r\nmask=mask<<1;\r\n}\r\nprintf(\"Number of Trailing Zeros is %d\",count);\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nint number,mask=1<<31,count=0;\r\nscanf(\"%d\",&number);\r\nwhile((number&mask)==0)\r\n{\r\ncount++;\r\nmask=mask>>1;\r\n}\r\nprintf(\"Number of Leading Zeros is %d\",count);\r\nreturn 0;\r\n}", "10": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nint number,bin=0,pv=1,mask=1;\r\nscanf(\"%d\",&number);\r\nwhile(mask<=number)\r\n{\r\nbin=((number&mask)!=0)*pv+bin;\r\npv=pv*10;\r\nmask=mask<<1;\r\n}\r\nprintf(\"Binary Form : %d\",bin);\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Bitwise_Level_2": {"1": "#include<stdio.h>\nint main() \n{\n long long int number;\n scanf(\"\"%lld\"\", &number);\n printf(\"\"%lld\"\", (number<< 3) - number);\n return 0;\n}\n", "2": "#include<stdio.h>\nlong long int findSingle(int *array, int arrray_size)\n{\n int result = array[0];\n for (int index = 1; index < array_size; index++)\n result= result ^ array[index];\n return result;\n}\nint main()\n{\n int array[10000],index;\n int number;\n scanf(\"\"%lld\"\",&number);\n for(index=0;index<number;index++)\n scanf(\"\"%lld\"\",&array[index]);\n printf(\"\"%lld\"\",findSingle(array,number));\n return 0;\n}", "3": "#include<stdio.h>\nint main()\n{\n long long int number,oldnumber,newnumber;\n scanf(\"\"%lld %lld\"\",&number,&oldnumber);\n newnumber=number^(1<<oldnumber);\n printf(\"\"%lld\"\",newnumber);\n return 0;\n}", "4": "#include<stdio.h>\nint main()\n{\nunsigned int number,power=1;\nscanf(\"\"%d\"\",&number);\nif (number && !(number & (number - 1)))\n printf(\"\"%d\"\",number);\nelse\n {\n while (power < number)\n power <<= 1;\n printf(\"\"%d\\n\"\",power);\n }\nreturn 0;\n}\n", "5": "#include<stdio.h>\r\nint main() {\r\nint number,kvalue,index,answer=0;\r\nscanf(\"\"%d %d\"\",&number,&kvalue);\r\nint flag=kvalue;\r\nint array[number];\r\nfor(index=0;index<number;index++)\r\nscanf(\"\"%d\"\",&array[index]);\r\nfor(index=0;index<number;index++) {\r\n if(array[index]>kvalue)\r\n {\r\n kvalue=kvalue;\r\n }\r\n if(array[index]%kvalue==0)\r\n {\r\n answer|=array[index];\r\n }\r\n kvalue=flag;\r\n\r\n}\r\nprintf(\"\"%d\"\",answer);\r\nreturn 0;\r\n}", "6": "#include <stdio.h>\nlong long int is_palindrome(long long int N)\n{\n    long long int rev=0,mask=N;\n    while(K)\n    {\n        rev = (rev<<1) | (mask&1);\n        mask= mask>>1;\n    }\n    return N==rev;\n}\nint main() {\n    long long int N;\n    scanf(\"\"%lld\"\",&N);\n    if(is_palindrome(N)==1)\n        printf(\"\"Palindrome\"\");\n    else \n        printf(\"\"Not\"\");\n    return 0;\n}", "7": "#include<stdio.h>\nint fibonacci(int number)\n{\n if(number==1)\n return 1;\n if(number==2)\n return 2;\n if(number==3)\n return 1^2;\nreturn ((number%3)+1);\n}\nint main()\n{\n long long int number,count;\n scanf(\"\"%lld\"\",&number);\n for(count=1;count<=number;count++)\n printf(\"\"%d \"\",fibonacci(count));\n return 0;\n}", "8": "#include<stdio.h>\nint main()\n{\n\nlong long int number1,number2,count=0;\nscanf(\"\"%lld%lldd\"\",&number1,&number2);\nwhile(number1||number2)\n{\n if((number1&1)!=(number2&1))\n count++;\n number1>>=1,number2>>=1;\n}\nprintf(\"\"%lld\"\",count);\nreturn 0;\n}", "9": "#include<stdio.h>\nint josephus(int number)\n{\n long long mask=1;\n number=number<<1;\n number=number+1;\n while(mask<=number)\n mask=mask<<1;\n mask=mask>>1;\n number=number^mask;\n return number;\n}\n\nint main()\n{\n long long soldier;\n scanf(\"\"%lld\"\",&soldier);\n printf(\"\"The last alive soldier is %d\"\", josephus(soldier));\n return 0;\n}", "10": "#include<stdio.h>\nint main()\n{\nlong long int number;\nscanf(\"\"%lld\"\",&number);\nif(number&1)\n{\n number>>=1;\n while(number>1)\n {\n if(number&1)\n break;\n number>>=1;\n }\n if(number==1)\n printf(\"\"Extra Perfect Number\"\");\n else\n printf(\"\"Not\"\");\n}\nelse\nprintf(\"\"Not\"\");\nreturn 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Brute Force Algorithm_L0": {"1": "#include<stdio.h> \n#include<string.h>\nint checkNumber(long long int Num)\n{\n        long long int temp = Num;\n        while (temp > 0) {\n                if (temp % 1000 == 133)\n                        temp /= 1000;\n                else if (temp % 100 == 13)\n                        temp /= 100;\n                else if (temp % 10 == 1)\n                        temp /= 10;\n                else {\n                        return 0;\n                }\n        }\n\n        return 1;\n}\nint main()\n{\n        long long int Num; \n        scanf(\"%lld\",&Num);\n        if(checkNumber(Num)==1)\n        {\n            printf(\"YES\");\n        }\n        else\n        {\n            printf(\"NO\");\n        }\n        return 0;\n}", "2": "#include<stdio.h>\nint main()\n{\n int flag = 0;\n long long int num;\n scanf(\"\"%lld\"\",&num);\n if(num<4)\n {\n  printf(\"\"-1\"\");\n  return 0;\n }\n for (int itr1=num/7;itr1>=0;itr1--)\n {\n   int itr2=num-(itr1*7);\n   if(itr1%4 == 0)\n   {\n     flag = 1;\n     for(int Traverse1=0;Traverse1<itr2/4;Traverse1++)\n     {\n             printf(\"\"4\"\");\n     }\n     for(int Traverse2=0;Traverse2<itr1;Traverse2++)\n     {\n             printf(\"\"7\"\");\n     }\n     break;\n   }\n }\n if(!flag) \n {\n   printf(\"\"-1\"\");\n }\n}", "3": " ", "4": "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char username[100000];\n    int counts[26]={0};\n    int distinct_chars=0;\n    scanf(\"%[^\\n]s\",username);\n    int string_len=strlen(username);\n    for (int itr=0;itr<string_len;itr++) \n    {\n        int index=username[itr]-'a';\n        if (counts[index] == 0)\n        {\n            distinct_chars++;\n        }\n        counts[index]++;\n    }\n    if(distinct_chars%2==0)\n    {\n        printf(\"FEMALE\\n\");\n    } else \n    {\n        printf(\"MALE\\n\");\n    }\n    return 0;\n}", "5": "#include <stdio.h>\nint main()\n{\n    int First_item_cost,initial_doller,number_of_items,total_cost=0;\n    scanf(\"\"%d %d %d\"\",&First_item_cost,&initial_doller,&number_of_items);\n    for (int itr=1;itr<=number_of_items;itr++)\n    {\n        total_cost+=itr*First_item_cost;\n    }\n    int borrow=(total_cost>initial_doller)?total_cost-initial_doller:0;\n    printf(\"\"%d\"\", borrow);\n    return 0;\n}\n", "6": "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char word[1000000];\n    scanf(\"\"%s\"\",word);\n    long int sum_of_alpha=0,position; \n    for(int itr=0;word[itr]!='\\\\0';itr++)\n    {\n            position=word[itr]-'a';  \n            sum_of_alpha=sum_of_alpha+(position%5);\n    }\n    printf(\"\"%ld\"\",sum_of_alpha); \n    return 0;\n}", "7": "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    int Army1,Army2,Army3;  \n    scanf(\"\"%d %d %d\"\",&Army1,&Army2,&Army3); \n    if(Army3+Army2<Army1)\n    {\n       printf(\"\"YES\"\");       \n    }\n    else if(Army3+Army1<Army2)\n    {\n       printf(\"\"YES\"\");       \n    }\n     else if(Army1+Army2<Army3)\n    {\n       printf(\"\"YES\"\");       \n    }\n    else\n    {\n        printf(\"\"NO\"\");\n    }\n    return 0;\n}", "8": "#include<stdio.h>\nint main()\n{\n    int year;\n    scanf(\"\"%d\"\",&year);\n    while(1)\n    {\n        year++;\n        int digits[10]={0};\n        int temp=year;\n        int distinct=1;\n        while (temp!=0) {\n            int digit=temp%10;\n            if (digits[digit]==1)\n            {\n                distinct=0;\n                break;\n            }\n            else\n            {\n                digits[digit]=1;\n            }\n            temp/=10;\n        }\n        if(distinct==1)\n        {\n            printf(\"\"%d\"\",year);\n            break;\n        }\n    }\n    return 0;\n}", "9": "#include<stdio.h>\nint main() \n{\n    int day,month,year;\n    scanf(\"\"%d/%d/%d\"\",&day,&month,&year);\n    int days=day;\n    int month1=(month<=2)?month+12:month;\n    int year1=(month<=2)?year-1:year;\n    int  rem=year1%100;\n    int quo=year1/100;\n    int value=(days+13*(month1+1)/5+rem+rem/4+quo/4+5*quo)%7;\n    value--;\n    switch(value)\n    {\n        case 0:\n            printf(\"\"Sunday\"\");\n            break;\n        case 1:\n            printf(\"\"Monday\"\");\n            break;\n        case 2:\n            printf(\"\"Tuesday\"\");\n            break;\n        case 3:\n            printf(\"\"Wednesday\"\");\n            break;\n        case 4:\n            printf(\"\"Thursday\"\");\n            break;\n        case 5:\n            printf(\"\"Friday\"\");\n            break;\n        case 6:\n            printf(\"\"Saturday\"\");\n            break;\n    }\n    return 0;\n}", "10": "#include<stdio.h>\nint count_digits(int number,int digit)\n{\n    int count=0;\n    while (number>0) {\n        if (number%10==digit)\n        {\n            count++;\n        }\n        number/=10;\n    }\n    return count;\n}\nint main()\n{\n    int number;\n    scanf(\"\"%d\"\",&number);\n    int count=count_digits(number,3);\n    int itr= number+1;\n    while (count<3)\n    {\n        count=count_digits(itr,3);\n        itr++;\n    }\n    printf(\"\"%d\"\",itr-1);\n    return 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_cll_level_0": {"1": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int inputl;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n       insert_at_end(input,&start,&end);\r\n\r\n    }\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int input;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n       insert_at_end(input,&start,&end);\r\n\r\n    }\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nvoid reverse_display(CLL_NODE *end)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=end;tptr->prev!=end;tptr=tptr->prev)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n       insert_at_end(input,&start,&end);\r\n\r\n    }\r\n    reverse_display(end);\r\n\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n//search\r\nint cll_search(int search_val,CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n    {\r\n        if(search_val==tptr->data)\r\n            return 1;\r\n    }\r\n    if(search_val==tptr->data)//for last node\r\n        return 1;\r\n    else\r\n        return 0;\r\n}\r\n\r\n//main function\r\nint main()\r\n{\r\n    int input,search_val,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_end(input,&start,&end);\r\n    }\r\n    scanf(\"%d\",&search_val);\r\n    return_val= cll_search(search_val,start);\r\n    if(return_val==1)\r\n        printf(\"Element Found\");\r\n    else\r\n        printf(\"Element Not Found\");\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//Insertion at the begining\r\nvoid insert_at_begin(int input,CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*start_ptr)=newnode;\r\n    }\r\n}\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_begin(input,&start,&end);\r\n    }\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_end(input,&start,&end);\r\n    }\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n\r\n//delete_at_begin\r\nint delete_at_begin(CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * toFree;\r\n\r\n    if((*start_ptr)&&(*start_ptr)->next)\r\n    {\r\n        toFree=*start_ptr;\r\n        (*end_ptr)->next=(*start_ptr)->next;\r\n        (*start_ptr)=(*start_ptr)->next;\r\n        (*start_ptr)->prev=*end_ptr;\r\n        free(toFree);\r\n        return 1;\r\n    }\r\n    else if(*start_ptr)\r\n    {\r\n        free(*start_ptr);\r\n        (*start_ptr)=(*end_ptr)=NULL;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_end(input,&start,&end);\r\n    }\r\n    delete_at_begin(&start,&end);\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n\r\n//delete_at_end\r\nint delete_at_end(CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * toFree;\r\n    if((*end_ptr)&&(*end_ptr)->prev)\r\n    {\r\n        toFree=*end_ptr;\r\n        (*start_ptr)->prev=(*end_ptr)->prev;\r\n        (*end_ptr)=(*end_ptr)->prev;\r\n        (*end_ptr)->next=(*start_ptr);\r\n        toFree->prev=toFree->next=NULL;\r\n        free(toFree);\r\n        return 1;\r\n    }\r\n    else if(*end_ptr)\r\n    {\r\n        free(*end_ptr);\r\n        (*start_ptr)=(*end_ptr)=NULL;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_end(input,&start,&end);\r\n    }\r\n    delete_at_end(&start,&end);\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n//Insertion at the begining\r\nvoid insert_at_begin(int input,CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*start_ptr)=newnode;\r\n    }\r\n}\r\n\r\n//sorted insertion\r\nvoid sorted_insert(int input,CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * tptr=NULL;\r\n    if((*start_ptr)==NULL||(*end_ptr)==NULL)\r\n        *start_ptr=*end_ptr=create_node(input);\r\n    else if(input<=(*start_ptr)->data)//ins at begin\r\n        insert_at_begin(input,start_ptr,end_ptr);\r\n    else if(input>= (*end_ptr)-> data)//ins at end\r\n        insert_at_end(input,start_ptr,end_ptr);\r\n    else //ins at mid\r\n    {\r\n        CLL_NODE *newnode=create_node(input);\r\n        for(tptr= (*start_ptr) ; input > tptr->data; tptr=tptr->next);\r\n        newnode->next=tptr;\r\n        newnode->prev=tptr->prev;\r\n        tptr->prev->next=newnode;\r\n        tptr->prev=newnode;\r\n    }\r\n}\r\n\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n\r\n//main function\r\nint main()\r\n{\r\n    int input,num,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        sorted_insert(input,&start,&end);\r\n    }\r\n\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<stdlib.h>\r\n//structure\r\nstruct cll_node\r\n{\r\n    int data;\r\n    struct cll_node* next;\r\n    struct cll_node* prev;\r\n    };\r\n//Typedef\r\ntypedef struct cll_node CLL_NODE;\r\n//node creation\r\nCLL_NODE * create_node(int input)\r\n{\r\n    CLL_NODE * newnode=(CLL_NODE*)malloc(sizeof(CLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=newnode->prev=NULL;\r\n    return newnode;\r\n}\r\n//insertion at the end\r\nvoid insert_at_end(int input,CLL_NODE **start_ptr,CLL_NODE** end_ptr)\r\n{\r\n    CLL_NODE *newnode=create_node(input);\r\n    if((*start_ptr==NULL)||(*end_ptr==NULL))\r\n        (*start_ptr)=(*end_ptr)=newnode;\r\n    else\r\n    {\r\n        newnode->next=(*start_ptr);\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)->next=newnode;\r\n        (*start_ptr)->prev=newnode;\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\n\r\n//forward display\r\nvoid forward_display(CLL_NODE *start)\r\n{\r\n    CLL_NODE* tptr;\r\n    for(tptr=start;tptr->next!=start;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"%d \",tptr->data);\r\n}\r\n//delete_at_begin\r\nint delete_at_begin(CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * toFree;\r\n\r\n    if((*start_ptr)&&(*start_ptr)->next)\r\n    {\r\n        toFree=*start_ptr;\r\n        (*end_ptr)->next=(*start_ptr)->next;\r\n        (*start_ptr)=(*start_ptr)->next;\r\n        (*start_ptr)->prev=*end_ptr;\r\n        free(toFree);\r\n        return 1;\r\n    }\r\n    else if(*start_ptr)\r\n    {\r\n        free(*start_ptr);\r\n        (*start_ptr)=(*end_ptr)=NULL;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n//delete_at_end\r\nint delete_at_end(CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * toFree;\r\n    if((*end_ptr)&&(*end_ptr)->prev)\r\n    {\r\n        toFree=*end_ptr;\r\n        (*start_ptr)->prev=(*end_ptr)->prev;\r\n        (*end_ptr)=(*end_ptr)->prev;\r\n        (*end_ptr)->next=(*start_ptr);\r\n        toFree->prev=toFree->next=NULL;\r\n        free(toFree);\r\n        return 1;\r\n    }\r\n    else if(*end_ptr)\r\n    {\r\n        free(*end_ptr);\r\n        (*start_ptr)=(*end_ptr)=NULL;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n//search delete\r\nint search_delete(int search_val,CLL_NODE **start_ptr,CLL_NODE **end_ptr)\r\n{\r\n    CLL_NODE * tptr;\r\n    tptr=*start_ptr ;\r\n    do\r\n    {\r\n        if(tptr->data==search_val)\r\n        {\r\n            if(tptr==(*start_ptr))//del at begin\r\n            {\r\n                delete_at_begin(start_ptr,end_ptr);\r\n            }\r\n            else if(tptr==(*end_ptr))//del at end\r\n            {\r\n                delete_at_end(start_ptr,end_ptr);\r\n            }\r\n            else //del at mid\r\n            {\r\n                tptr->prev->next= tptr->next;\r\n                tptr->next->prev=tptr->prev;\r\n                free(tptr);\r\n            }\r\n            return 1;\r\n        }\r\n       tptr=tptr->next;\r\n    }while(tptr!=(*start_ptr));\r\n     return -1;//val not found\r\n\r\n}\r\n\r\n//main function\r\nint main()\r\n{\r\n    int input,search_val,return_val;\r\n    CLL_NODE * start=NULL,* end=NULL;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&input);\r\n        if(input==-1) break;\r\n        insert_at_end(input,&start,&end);\r\n    }\r\n     scanf(\"%d\",&search_val);\r\n     return_val=search_delete(search_val,&start,&end);\r\n     if(return_val == -1)\r\n        printf(\"Element Not Found\");\r\n     else\r\n        forward_display(start);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "combinatorial_level_0": {"1": "#include<stdio.h>\r\nint Power(int val,int count)\r\n{\r\n    int itr,power=1;\r\n    for(itr=1;itr<=count;itr++)\r\n        power=power * val;\r\n    return power;\r\n}\r\nint Spell_Number(char *str)\r\n{\r\n    int ind,ans=1,count,itr;\r\n    for(ind=0; str[ind]; ind++)\r\n    {\r\n        count=1;\r\n        for(itr=ind+1;str[itr];itr++)\r\n        {\r\n            if(str[itr] == str[ind])\r\n            {\r\n                count++;\r\n                ind++;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        ans = ans * Power(2,count-1);\r\n    }\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    printf(\"%d\",Spell_Number(str));\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nint Even_Sum(int *arr,int left, int right,long long int sum)\r\n{\r\n    static long long int count=0;\r\n    int rem=1e9 + 7;\r\n    if(left > right)\r\n    {\r\n        if(sum%2==0)\r\n        count++;\r\n        return ;\r\n    }\r\n    Even_Sum(arr,left+1,right,sum+arr[left]);\r\n    Even_Sum(arr,left+1,right,sum);\r\n    return count%rem;\r\n}\r\nint Count_Even_Subset(int *arr,int size)\r\n{\r\n    int res = Even_Sum(arr,0,size-1,0);\r\n    return res-1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Count_Even_Subset(arr,size));\r\n    return 0;\r\n}\r\n\r\n", "3": "#include<stdio.h>\r\nint Power(int val,int count)\r\n{\r\n    int itr,power=1;\r\n    for(itr=1;itr<=count;itr++)\r\n        power=power * val;\r\n    return power;\r\n}\r\nint XOR_Subset_Sum(int *arr,int size)\r\n{\r\n    int ind,ans=0,sum;\r\n    for(ind=0;ind<size;ind++)\r\n        ans = ans | arr[ind];\r\n    sum = ans * Power(2,size-1);\r\n    return sum;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",XOR_Subset_Sum(arr,size));\r\n    return 0;\r\n}", "4": "#include<stdio.h>\r\nint Count_Paths(int tot_row,int tot_col)\r\n{\r\n    int count=1,itr;\r\n    for(itr=tot_col; itr < (tot_row+tot_col-1); itr++)\r\n    {\r\n        count = count * itr;\r\n        count/=(itr - tot_col + 1);\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int tot_row,tot_col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    printf(\"%d\",Count_Paths(tot_row,tot_col));\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint Count_Ways(int num)\r\n{\r\n    long long int num1,num2,temp,itr;\r\n    if(num==1)\r\n        return 0;\r\n    if(num==2)\r\n        return 1;\r\n    num1=0;\r\n    num2=1;\r\n    for(itr=3;itr<=num;itr++)\r\n    {\r\n            temp=(itr-1)*(num1+num2);\r\n            num2=num1;\r\n            num1=temp;\r\n    }\r\n        return num1;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    printf(\"%d\",Count_Ways(num));\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nint Power(int val,int count)\r\n{\r\n    int itr,power=1;\r\n    for(itr=1;itr<=count;itr++)\r\n        power = power * val;\r\n    return power;\r\n}\r\nint Even_Subset(int *arr,int size)\r\n{\r\n    int ind,itr,count=0,ans;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(arr[ind]!=-1)\r\n        {\r\n            if(arr[ind]%2==0)\r\n            {\r\n                count++;\r\n                for(itr=ind+1;itr<size;itr++)\r\n                    if(arr[ind]==arr[itr])\r\n                        arr[itr]=-1;\r\n            }\r\n        }\r\n    }\r\n    ans = Power(2,count)-1;\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Even_Subset(arr,size));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint Count_Even_Sum(int num)\r\n{\r\n    int odd_cnt,even_cnt,res_cnt,rem=10e+7;\r\n    if(num&1)\r\n        odd_cnt = (num/2)+1;\r\n    else\r\n        odd_cnt = (num/2);\r\n    even_cnt = num/2;\r\n    res_cnt = ((odd_cnt *(odd_cnt-1))/2 * even_cnt)%rem;\r\n    res_cnt += (((even_cnt * (even_cnt - 1) *(even_cnt - 2)) / 6))%rem;\r\n    return res_cnt;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    printf(\"%d\",Count_Even_Sum(num));\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint Product_Subset_Sum(int *arr, int size)\r\n{\r\n    int ind,sum=1,rem=10e9+7;\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        sum = sum * (arr[ind] + 1);\r\n    }\r\n    return (sum-1)%rem;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Product_Subset_Sum(arr,size));\r\n    return 0;\r\n}", "9": "#include<stdio.h>\r\nint Golden_Number(int num)\r\n{\r\n    int itr,power=1;\r\n    for(itr=1;itr<=num+1;itr++)\r\n        power=power*2;\r\n    return power - 2;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num); \r\n    printf(\"%d\",Golden_Number(num));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint Find_Sequence(int num)\r\n{\r\n    int diff=1;\r\n    while(num>diff)\r\n    {\r\n        num = num - diff;\r\n        diff++;\r\n    }\r\n    return num;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    printf(\"%d\",Find_Sequence(num));\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Conditional_Statement_Level_0": {"1": "#include<stdio.h>\nint main()\n{\nlong long int num1,num2;\nscanf(\"%lld %lld\",&num1,&num2);\nif(num1==num2)\n{\nprintf(\"Equal\");\n}\nelse\n{\nprintf(\"Not Equal\");\n}\n return 0;\n}", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nif(num%2==0)\r\n{\r\nprintf(\"EVEN\");\r\n}\r\nelse\r\n{\r\nprintf(\"ODD\");\r\n}\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nif(num%3==0)\r\n{\r\nprintf(\"The number is divisible by 3\");\r\n}\r\nelse\r\n{\r\nprintf(\"The number is not divisible by 3 and gives a remainder %d\",(num%3));\r\n}\r\nreturn 0;\r\n}", "4": "#include<stdio.h>\r\nint main(){\r\n    int mark;\r\n    scanf(\"%d\",&mark);\r\n    if(mark>=35)\r\n    printf(\"PASS\");\r\n    else\r\n    printf(\"FAIL\");\r\n    return 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num1,num2;\r\nscanf(\"%lld %lld\",&num1,&num2);\r\nif(num1<num2)\r\nprintf(\"Minimum of %lld and %lld is %lld\",num1,num2,num1);\r\nelse\r\nprintf(\"Minimum of %lld and %lld is %lld\",num1,num2,num2);\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num1,num2;\r\nscanf(\"%lld %lld\",&num1,&num2);\r\nif(num1>num2)\r\nprintf(\"Maximum of %lld and %lld is %lld\",num1,num2,num1);\r\nelse\r\nprintf(\"Maximum of %lld and %lld is %lld\",num1,num2,num2);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nif(num>0)\r\n  printf(\"Positive\");\r\nelse if(num<0)\r\n  printf(\"Negative\");\r\nelse if(num==0)\r\n  printf(\"Zero\");\r\nreturn 0;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n  long long int num;\r\n  scanf(\"%lld\",&num);\r\n  if(num%3==0 && num%5==0)\r\n    printf(\"HIHELLO\"); \r\n  else if(num%3==0)\r\n    printf(\"HI\");\r\n  else if(num%5==0)\r\n    printf(\"HELLO\");\r\n else\r\n  printf(\"NONE\");\r\n  return 0;\r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n long long int x=0,y=0,step;\r\n char dir;\r\n scanf(\"%lld %c\",&step,&dir);\r\n if(dir=='R')\r\n x=x+step;\r\n else\r\n x=x-step;\r\n printf(\"(%lld,%lld)\",x,y);\r\nreturn 0;\r\n}", "10": "int main()\r\n{\r\nchar letter;\r\nscanf(\"%c\",&letter);\r\nif(letter=='a'||letter=='e'||letter=='i'||letter=='o'||letter=='u'||letter=='A'||letter=='E'||letter=='I'||letter=='O'||letter=='U')\r\n{\r\nprintf(\"Vowel\");\r\n}\r\nelse\r\n{\r\nprintf(\"Consonant\");\r\n}\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Conditional_Statement_Level_ 1": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\n  int year;\r\n  scanf(\"%d\",&year);\r\n  if(((year%4==0 && year%100!=0)||(year%400==0))\r\n    printf(\"Leap year\"); \r\n  else \r\n    printf(\"Not a Leap year\");\r\nreturn  0;\r\n}", "2": "#include<stdio.h>\r\nint main(){\r\n    long long int day;\r\n    scanf(\"%lld\",&day);\r\n    switch(day){\r\n        case 0 : printf(\"Sunday\"); break;#include<stdio.h>\r\nint main(){\r\n    long long int day;\r\n    scanf(\"%lld\",&day);\r\n    switch(day){\r\n        case 0 : printf(\"Sunday\"); break;\r\n        case 1 : printf(\"Monday\"); break;\r\n        case 2 : printf(\"Tuesday\"); break;\r\n        case 3 : printf(\"Wednesday\"); break;\r\n        case 4 : printf(\"Thursday\"); break;\r\n        case 5 : printf(\"Friday\"); break;\r\n        case 6 : printf(\"Saturday\"); break;\r\n        default : printf(\"Invalid\");\r\n    }\r\n}\r\n\r\n        case 1 : printf(\"Monday\"); break;\r\n        case 2 : printf(\"Tuesday\"); break;\r\n        case 3 : printf(\"Wednesday\"); break;\r\n        case 4 : printf(\"Thursday\"); break;\r\n        case 5 : printf(\"Friday\"); break;\r\n        case 6 : printf(\"Saturday\"); break;\r\n        default : printf(\"Invalid\");\r\n    }\r\n}\r\n", "3": "#include<stdio.h>\r\n\r\nint main(){\r\n    long long int month;\r\n    scanf(\"%lld\",&month);\r\n    switch(month){\r\n        case 1 : printf(\"January\"); break;\r\n        case 2 : printf(\"February\"); break;\r\n        case 3 : printf(\"March\"); break;\r\n        case 4 : printf(\"April\"); break;\r\n        case 5 : printf(\"May\"); break;\r\n        case 6 : printf(\"June\"); break;\r\n        case 7 : printf(\"July\"); break;\r\n        case 8 : printf(\"August\"); break;\r\n        case 9 : printf(\"September\"); break;\r\n        case 10 : printf(\"October\"); break;\r\n        case 11 : printf(\"November\"); break;\r\n        case 12 : printf(\"December\"); break;\r\n        default : printf(\"Invalid\");\r\n    }\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nchar letter;\r\nscanf(\"%c\",&letter);\r\nif(letter>=97&&letter<=122)\r\nprintf(\"LOWERCASE\");\r\nelse if(letter>=65&&letter<=90)\r\nprintf(\"UPPERCASE\");\r\nelse\r\n printf(\"NONE\");\r\n\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nchar ch;\r\nscanf(\"%c\",&ch);\r\nif(ch>=48&&ch<=57)\r\nprintf(\"NUMBER\");\r\nelse if((ch>=97&&ch<=122)||(ch>=65&&ch<=90))\r\nprintf(\"ALPHABET\");\r\nelse\r\nprintf(\"SPECIAL CHARACTER\");\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nint num;\r\ndouble ans;\r\nscanf(\"%d\",&num);\r\nif(num<=10000)\r\n{\r\nans=num+(num*0.2+num*0.8);\r\n}\r\nelse if(num<=20000)\r\n{\r\nans=num+(num*0.25)+(num*0.9);\r\n}\r\nelse\r\n{\r\nans=num+(num*0.3)+(num*0.95);\r\n}\r\nprintf(\"Rs.%.2lf\",ans);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint main(){\r\n    int mark;\r\n    scanf(\"%d\",&mark);\r\n    switch(mark){\r\n        case 91 ...100 : printf(\"Grade A\"); break;\r\n        case 76 ...90 : printf(\"Grade B\"); break;\r\n        case 61 ...75 : printf(\"Grade C\"); break;\r\n        case 0 ...60 : printf(\"Grade D\"); break;\r\n        default : break;\r\n    }\r\n    return 0;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\nint num1,num2,ans;\r\nchar op;\r\nscanf(\"%d %c %d\",&num1,&op,&num2);\r\nswitch(op)\r\n{\r\ncase '+':ans=num1+num2;break;\r\ncase '-':ans=num1-num2;break;\r\ncase '*':ans=num1*num2;break;\r\ncase '/':ans=num1/num2;break;\r\n}\r\nprintf(\"%d\",ans);\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\nint number;\r\ndouble ans;\r\nscanf(\"%d\",&number);\r\nif(number>250)\r\n{\r\nans=(50*0.50)+(100*0.75)+(100*1.20)+(number-250)*1.50;\r\n}\r\nelse if(number>150)\r\n{\r\nans=(50*0.50)+(100*0.75)+(number-150)*1.20;\r\n}\r\nelse if(number>50)\r\n{\r\nans=(50*0.50)+(number-50)*0.75;\r\n}\r\nelse\r\nans=number*0.5;\r\nans=ans+(ans*0.2);\r\nprintf(\"%.2lf\",ans);\r\nreturn 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n\r\nint main(){\r\n    long long int s1,s2,s3;\r\n    scanf(\"%lld%lld%lld\",&s1,&s2,&s3);\r\n    \r\n    if((s1+s2)>s3 && (s1+s3)>s2 && (s2+s3)>s1){\r\n        printf(\"Valid\");\r\n    }\r\n    else{\r\n        printf(\"Not Valid\");\r\n    }\r\n  return 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Conditional_Statement_Level _3": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\n    float weight,height,result;\r\n    scanf(\"%f %f\",&weight,&height);\r\n    result=(weight/height)/height;\r\n    result=result*10000;\r\n    if(result<18.5)\r\n      printf(\"Underweight\");\r\n    else if(result>=18.5&&result<=24.9)\r\n      printf(\"Healthyweight\");\r\n    else if(result>=25.0&&result<=29.9)\r\n      printf(\"Overweight\");\r\n    else\r\n      printf(\"Obesity\");\r\n}", "2": "'#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n    float hip_circumference,height,BAI;\r\n    char ch;\r\n    int age;\r\n    scanf(\"%f %f\",&hip_circumference,&height);\r\n    scanf(\"%d\\n\",&age);\r\n    scanf(\"%c\",&ch);\r\n    BAI=((hip_circumference/(pow(height/100,1.5)))-18);\r\n    if(ch=='f')\r\n    {\r\n        switch(age)\r\n        {\r\n        case 20 ... 39:\r\n            {\r\n                if(BAI<21)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=21&&BAI<=33)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=34&&BAI<=39)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n        case 40 ... 59:\r\n            {\r\n                if(BAI<23)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=23&&BAI<=35)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=36&&BAI<=41)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n         case 60 ... 79:\r\n            {\r\n                if(BAI<25)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=25&&BAI<=38)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=39&&BAI<=43)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   else if(ch=='m')\r\n    {\r\n        switch(age)\r\n        {\r\n        case 20 ... 39:\r\n            {\r\n                if(BAI<8)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=8&&BAI<=21)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=22&&BAI<=26)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n        case 40 ... 59:\r\n            {\r\n                if(BAI<11)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=11&&BAI<=23)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=24&&BAI<=29)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n         case 60 ... 79:\r\n            {\r\n                if(BAI<13)\r\n                    printf(\"Underweight\");\r\n                else if(BAI>=13&&BAI<=25)\r\n                     printf(\"Healthyweight\");\r\n                else if(BAI>=26&&BAI<=31)\r\n                     printf(\"Overweight\");\r\n                else\r\n                    printf(\"Obesity\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "3": "#include<stdio.h>\r\nint main()\r\n{\r\n    int waist_inches,hip_inches;\r\n    scanf(\"%d %d\\n\",&waist_inches,&hip_inches);\r\n    char gender;\r\n    scanf(\"%c\",&gender);\r\n    float WHR;\r\n    WHR=(float)waist_inches/hip_inches;\r\n    switch(gender)\r\n    {\r\n    case 'm':\r\n        {\r\n            if(WHR<0.90)\r\n                printf(\"Normalweight\");\r\n            else if(WHR>=0.90&&WHR<=0.99)\r\n                printf(\"Overweight\");\r\n            else\r\n                printf(\"Obesity\");\r\n            break;\r\n        }\r\n    case 'f':\r\n        {\r\n            if(WHR<0.80)\r\n                printf(\"Normalweight\");\r\n            else if(WHR>=0.80&&WHR<=0.84)\r\n                printf(\"Overweight\");\r\n            else\r\n                printf(\"Obesity\");\r\n            break;\r\n        }\r\n    }\r\n}\r\n", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n    int month_num,room_type,no_of_rooms,total_days,total;\r\n    scanf(\"%d %d %d %d\",&month_num,&room_type,&no_of_rooms,&total_days);\r\n    if(room_type==1)\r\n        total=(1000*no_of_rooms)*total_days;\r\n    else if(room_type==2)\r\n        total=(2000*no_of_rooms)*total_days;\r\n    else if(room_type==3)\r\n        total=(5000*no_of_rooms)*total_days;\r\n    else if(room_type==4)\r\n        total=(8000*no_of_rooms)*total_days;\r\n    switch(month_num)\r\n    {\r\n    case 1 ... 3:\r\n        {\r\n            printf(\"Rs.%.2f\",total-(total*0.05));\r\n            break;\r\n        }\r\n    case 4 ... 5:\r\n        {\r\n            printf(\"Rs.%.2f\",total-(total*0.10));\r\n            break;\r\n        }\r\n    case 6 ... 9:\r\n        {\r\n            printf(\"Rs.%.2f\",total-(total*0.20));\r\n            break;\r\n        }\r\n    case 10 ... 11:\r\n        {\r\n            printf(\"Rs.%.2f\",total-(total*0.15));\r\n            break;\r\n        }\r\n    case 12:\r\n        {\r\n            printf(\"Rs.%.2f\",total-(total*0.05));\r\n            break;\r\n        }\r\n    }\r\n}\r\n", "5": "#include<stdio.h>\r\nint main()\r\n{\r\n    int day_of_week,no_of_persons_Veg,no_of_persons_NonVeg,veg_amount,nonveg_amount;\r\n    float amount,offer;\r\n    scanf(\"%d %d %d\",&day_of_week,&no_of_persons_Veg,&no_of_persons_NonVeg);\r\n    int no_of_persons=no_of_persons_Veg+no_of_persons_NonVeg;\r\n    if(no_of_persons>=8)\r\n         no_of_persons=no_of_persons-(no_of_persons/8);\r\n    if(day_of_week==1 || day_of_week==7)\r\n    {\r\n            veg_amount=no_of_persons_Veg*850;\r\n            nonveg_amount=no_of_persons_NonVeg*950;\r\n    }\r\n    else\r\n    {\r\n             veg_amount=no_of_persons_Veg*750;\r\n             nonveg_amount=no_of_persons_NonVeg*850;\r\n    }\r\n    amount=veg_amount+nonveg_amount;\r\n    if(day_of_week!=4)\r\n     printf(\"%.2f\",amount);\r\n    else\r\n    {\r\n        offer=amount-(amount*0.10);\r\n        printf(\"%.2f\",offer);\r\n    }\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n    int start_hour,start_min;\r\n    int end_hour,end_min;\r\n    scanf(\"%d %d\",&start_hour,&start_min);\r\n    scanf(\"%d %d\",&end_hour,&end_min);\r\n    int total_sec1,result,hour,min;\r\n    int total_sec2;\r\n    total_sec1=(start_hour*3600)+(start_min*60);\r\n    total_sec2=(end_hour*3600)+(end_min*60);\r\n    if(total_sec1==total_sec2)\r\n         printf(\"On time\");\r\n    else if(total_sec1<total_sec2)\r\n    {\r\n        result=abs(total_sec1-total_sec2);\r\n        hour=result/3600;\r\n        min=(result%3600)/60;\r\n        if(hour>0)\r\n        {\r\n            printf(\"Late\\n\");\r\n            printf(\"%d:%02d hours after the start\",hour,min);\r\n        }\r\n        else\r\n        {\r\n            printf(\"Late\\n\");\r\n            printf(\"%d minutes after the start\",min);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        result=abs(total_sec1-total_sec2);\r\n        hour=result/3600;\r\n        min=(result%3600)/60;\r\n        if(hour>0)\r\n        {\r\n            printf(\"Early\\n\");\r\n            printf(\"%d:%02d hours before the start\",hour,min);\r\n        }\r\n        else if(hour==0 && min<=30)\r\n        {\r\n            printf(\"On time\\n\");\r\n            printf(\"%d minutes before the start\",min);\r\n        }\r\n        else\r\n        {\r\n            printf(\"Early\\n\");\r\n            printf(\"%d minutes before the start\",min);\r\n        }\r\n    }\r\n}\r\n", "7": "#include<stdio.h>\r\nint main()\r\n{\r\n    int kilometer,day_night;\r\n    scanf(\"%d %d\",&kilometer,&day_night);\r\n    if(kilometer<20)\r\n    {\r\n        if(day_night==1)\r\n            printf(\"Rs.%d\",kilometer*79);\r\n        else\r\n            printf(\"Rs.%d\",kilometer*90);\r\n    }\r\n    else if(kilometer>=20&&kilometer<=99)\r\n    {\r\n        printf(\"Rs.%d\",kilometer*9);\r\n    }\r\n    else\r\n    {\r\n        printf(\"Rs.%d\",kilometer*6);\r\n    }\r\n\r\n}\r\n", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n   int screening,total_adult,total_children,total;\r\n   float amount_after_gst;\r\n   scanf(\"%d %d %d\",&screening,&total_adult,&total_children);\r\n   if(screening==1)\r\n   {\r\n       total=((total_adult+total_children)*350)-(total_children*50);\r\n   }\r\n   else\r\n   {\r\n       total=((total_adult+total_children)*150)-(total_children*50);\r\n   }\r\n   amount_after_gst=total+(total*0.075);\r\n   printf(\"%.2f\",amount_after_gst);\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n    int hours,days,workers,total_days;\r\n    scanf(\"%d %d %d\",&hours,&days,&workers);\r\n    total_days=(10*days)*0.1;\r\n    total_days=(days*10-total_days)*workers;\r\n    if(total_days-hours>0)\r\n         printf(\"Yes! %d hours left\",total_days-hours);\r\n    else\r\n         printf(\"Not enough time! %d hours needed\",hours-total_days);\r\n}\r\n", "10": "#include<stdio.h>\r\nint main()\r\n{\r\n    int no_of_holidays,working_days,total,difference;\r\n    scanf(\"%d\",&no_of_holidays);\r\n    working_days=365-no_of_holidays;\r\n    total=(working_days * 63 + no_of_holidays * 127);\r\n    difference=30000-total;\r\n    if(difference>0)\r\n     printf(\"Tom sleeps well\\n%d hours and %d minutes more for play\",difference/60,difference%60);\r\n    else\r\n      printf(\"Tom will run away\\n%d hours and %d minutes less for play\",(difference/60)*-1,(difference%60)*-1);\r\n\r\n\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Divide_and_conquer_level_0": {"1": "#include<stdio.h>\r\nvoid Generate_Fib(int *fib,int n)\r\n{\r\n    fib[0]=0;\r\n    fib[1]=1;\r\n    int ind;\r\n    for(ind=2;ind<=n;ind++)\r\n        fib[ind] = (fib[ind-1] + fib[ind-2])%10;\r\n}\r\nint LastDigit(int N)\r\n{\r\n    int fib[60]={0};\r\n    Generate_Fib(fib,60);\r\n    return fib[N%60];\r\n}\r\nint main()\r\n{\r\n    int N;\r\n    scanf(\"%d\",&N);\r\n    printf(\"%d\",LastDigit(N));\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nint Find_Unique(int *arr, int size)\r\n{\r\n    int ind,res=0;\r\n    for(ind=0;ind<size; ind++)\r\n        res = res ^ arr[ind];\r\n    return res;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Find_Unique(arr,size));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid Sort_Array(int *arr,int size)\r\n{\r\n    int inner,outer,temp;\r\n    for(outer=0;outer<size;outer++)\r\n    {\r\n        for(inner=0;inner<(size-1)-outer;inner++)\r\n        {\r\n            if(arr[inner]>arr[inner+1])\r\n            {\r\n                temp=arr[inner];\r\n                arr[inner]=arr[inner+1];\r\n                arr[inner+1]=temp;\r\n            }\r\n        }\r\n    }\r\n}\r\nint Find_Median(int *arr,int size)\r\n{\r\n    int ind;\r\n    Sort_Array(arr,size);\r\n    if(size%2==1)\r\n        return arr[size/2];\r\n    else\r\n        return (arr[(size/2)-1]+arr[size/2])/2;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Find_Median(arr,size));\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nlong long int Calc_Power(int num, int val)\r\n{\r\n        long long int ans = 1, rem = 1e9 + 7,itr;\r\n        for (itr = 1; itr <= val; itr++) {\r\n                ans *= num;\r\n                ans %= rem;\r\n        }\r\n        return ans;\r\n}\r\nint main()\r\n{\r\n        int num,val;\r\n        scanf(\"%d%d\",&num,&val);\r\n        printf(\"%lld\",Calc_Power(num,val));\r\n        return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint Count_Arrangement(int *arr,int size)\r\n{\r\n    int ind,ind1,count=0;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        for(ind1=ind;ind1<size-1;ind1++)\r\n        {\r\n            if(arr[ind1] > arr[ind1+1])\r\n                count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Count_Arrangement(arr,size));\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nunsigned long long int Reverse(char *str)\r\n{\r\n    unsigned long long int dec=0,power=1;\r\n    int temp,front,rear,len,ind;\r\n    for(len=0;str[len];len++);\r\n    for(front=0,rear=len-1; front<rear; front++,rear--)\r\n    {\r\n        temp = str[front];\r\n        str[front]=str[rear];\r\n        str[rear]=temp;\r\n    }\r\n    for(ind=len-1; ind>=0; ind--)\r\n    {\r\n            dec += ((str[ind]-'0') * power);\r\n            power*=2;\r\n    }\r\n    return dec;\r\n}\r\nint main()\r\n{\r\n    char str[100];\r\n    scanf(\"%s\",str);\r\n    printf(\"%llu\",Reverse(str));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint Count_Bits(int num)\r\n{\r\n    int count = 0,mask = 1,ind;\r\n        for (ind = 0; ind < 32; ind++) {\r\n            if ((num & mask) != 0) {\r\n                count++;\r\n            }\r\n            mask <<= 1;\r\n        }\r\n        return count;\r\n}\r\nConvertToDec(char *str)\r\n{\r\n    int len,num=0,power=1,ind;\r\n   for(len=0;str[len];len++);\r\n   for(ind=len-1;ind>=0;ind--)\r\n   {\r\n       num = num + (str[ind] - 48) * power;\r\n       power*=2;\r\n   }\r\n   return num;\r\n}\r\nint main()\r\n{\r\n    char str[32];\r\n    scanf(\"%s\",str);\r\n    int dec;\r\n    dec = ConvertToDec(str);\r\n    printf(\"%d\",Count_Bits(dec));\r\n    return 0;\r\n}\r\n\r\n\r\n", "8": "#include<stdio.h>\r\n#include<limits.h>\r\nint Max_Occur(int *arr, int size)\r\n{\r\n    int ind,ind1,count;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        int count=1;\r\n        for(ind1=ind+1;ind1<size;ind1++)\r\n        {\r\n            if(arr[ind1]!=INT_MIN)\r\n            {\r\n                if(arr[ind]==arr[ind1])\r\n                {\r\n                    arr[ind1] = INT_MIN;\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        if(count > size/2)\r\n            return arr[ind];\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size* sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Max_Occur(arr,size));\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nint ConvertDec(char *str)\r\n{\r\n    int ind,len=0,num=0,power=1;\r\n    for(len=0;str[len];len++);\r\n    for(ind=len-1; ind>=0; ind--)\r\n    {\r\n        num = num + (str[ind]-48) * power;\r\n        power*=2;\r\n    }\r\n    return num;\r\n}\r\nint Find_Product(char *str1,char *str2)\r\n{\r\n    int num1,num2,prod;\r\n    num1 = ConvertDec(str1);\r\n    num2 = ConvertDec(str2);\r\n    return num1*num2;\r\n}\r\nint main()\r\n{\r\n    char str1[1000],str2[1000];\r\n    scanf(\"%s %s\",str1,str2);\r\n    printf(\"%d\",Find_Product(str1,str2));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint Count_Sequence(int num1, int num2)\r\n{\r\n        if (num1 < num2)\r\n                return 0;\r\n        if (num2 == 0)\r\n                return 1;\r\n        return Count_Sequence(num1 - 1, num2) +\r\n                Count_Sequence(num1 / 2, num2 - 1);\r\n}\r\nint main()\r\n{\r\n        int num1,num2;\r\n        scanf(\"%d%d\",&num1,&num2);\r\n        printf(\"%d\",Count_Sequence(num1,num2));\r\n        return 0;\r\n}\r\n\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_dll_level_0": {"1": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n   display(start);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n   forward_display(start);\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\n\r\nvoid reverse_display(DLL_NODE *end)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=end;tptr;tptr=tptr->prev)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    reverse_display(end);\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nint search_element(int search_key,DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr!=NULL;tptr=tptr->next)\r\n    {\r\n        if(search_key==tptr->data)\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    int search_key,return_ans;\r\n    scanf(\"%d\",&search_key);\r\n    return_ans=search_element(search_key,start);\r\n    if(return_ans==1)\r\n        printf(\"Element Found\");\r\n    else\r\n        printf(\"Element Not Found\");\r\n\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\n\r\n\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_begin(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*start_ptr)->prev=newnode;\r\n        newnode->next=(*start_ptr);\r\n        (*start_ptr)=newnode;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_begin(num,&start,&end);\r\n    }\r\n  forward_display(start);\r\n\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n\r\n   forward_display(start);\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\n\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nvoid delete_at_begin(DLL_NODE **start_ptr)\r\n{\r\n    DLL_NODE * toFree=NULL;\r\n\r\n   if(*start_ptr)\r\n    {\r\n        toFree=(*start_ptr);\r\n        (*start_ptr)=(*start_ptr)->next;\r\n        (*start_ptr)->prev=NULL;\r\n         free(toFree);\r\n    }\r\n\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    delete_at_begin(&start);\r\n  forward_display(start);\r\n\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nvoid delete_at_end(DLL_NODE **end_ptr)\r\n{\r\n     DLL_NODE * toFree;\r\n     if(*end_ptr)\r\n    {\r\n        toFree=*end_ptr;\r\n        (*end_ptr)=(*end_ptr)->prev;\r\n        (*end_ptr)->next=NULL;\r\n        free(toFree);\r\n    }\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    delete_at_end(&end);\r\n   forward_display(start);\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid sorted_insert(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n       for(tptr=(*start_ptr);tptr!=NULL&&tptr->data<input;tptr=tptr->next);\r\n       if(tptr==(*start_ptr))\r\n       {\r\n           newnode->next=tptr;\r\n           tptr->prev=newnode;\r\n           (*start_ptr)=newnode;\r\n       }\r\n       else if(tptr==NULL)\r\n       {\r\n           (*end_ptr)->next=newnode;\r\n           newnode->prev=(*end_ptr);\r\n           (*end_ptr)=newnode;\r\n       }\r\n       else\r\n       {\r\n           newnode->next=tptr;\r\n           newnode->prev=tptr->prev;\r\n           tptr->prev->next=newnode;\r\n           tptr->prev=newnode;\r\n       }\r\n    }\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        sorted_insert(num,&start,&end);\r\n    }\r\n    forward_display(start);\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nstruct dll_node\r\n{\r\n    int data;\r\n    struct dll_node *prev,*next;\r\n};\r\ntypedef struct dll_node DLL_NODE;\r\nvoid forward_display(DLL_NODE *start)\r\n{\r\n    DLL_NODE *tptr;\r\n    for(tptr=start;tptr;tptr=tptr->next)\r\n        printf(\"%d \",tptr->data);\r\n    printf(\"\\n\");\r\n}\r\nDLL_NODE  *create_node(int input)\r\n{\r\n    DLL_NODE * newnode=(DLL_NODE*)malloc(sizeof(DLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    newnode->prev=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *newnode;\r\n    DLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if((*start_ptr)==NULL)\r\n    {\r\n        *start_ptr=*end_ptr=newnode;\r\n    }\r\n    else\r\n    {\r\n        (*end_ptr)->next=newnode;\r\n        newnode->prev=(*end_ptr);\r\n        (*end_ptr)=newnode;\r\n    }\r\n}\r\nint search_delete(int search_key,DLL_NODE **start_ptr,DLL_NODE **end_ptr)\r\n{\r\n    DLL_NODE *tptr;\r\n   for(tptr=(*start_ptr);tptr!=NULL&&tptr->data!=search_key;tptr=tptr->next);\r\n        if(tptr==(*start_ptr))\r\n        {\r\n            (*start_ptr)=(*start_ptr)->next;\r\n            tptr->prev=tptr->next=NULL;\r\n            free(tptr);\r\n            return 1;\r\n        }\r\n        else if(tptr!=NULL&&tptr->data==search_key)\r\n        {\r\n            tptr->prev->next=tptr->next;\r\n            tptr->prev=tptr->next=NULL;\r\n            free(tptr);\r\n            return 1;\r\n        }\r\n            return -1;\r\n}\r\nint main()\r\n{\r\n    DLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    int search_key,return_ans;\r\n    scanf(\"%d\",&search_key);\r\n    return_ans=search_delete(search_key,&start,&end);\r\n    if(return_ans==-1)\r\n        printf(\"Element Not Found\");\r\n    else\r\n        forward_display(start);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Dynamic_Level0": {"1": "#include<stdio.h>\nlong long int find_fibo(int input)\n{\n   long long int prev,prev_to_prev,curr;\n   prev_to_prev=0;\n   prev=1;\n   int ctr;\n   if(input==1)\n    return 1;\n   for(ctr=2;ctr<=input;ctr++)\n   {\n        curr=prev+prev_to_prev;\n        prev_to_prev=prev;\n        prev=curr;\n   }\n    return curr;\n}\nint main()\n{\n   int input;\n   long long int res;\n   scanf(\"\"%d\"\",&input);\n   res=find_fibo(input);\n   printf(\"\"%lld\"\",res);\n   return 0;\n}\n\n", "2": "#include<stdio.h>\nlong long int find_lucas(int input)\n{\n   long long int prev,prev_to_prev,curr;\n   prev_to_prev=2;\n   prev=1;\n   int ctr;\n   if(input==1)\n    return 1;\n   for(ctr=2;ctr<=input;ctr++)\n   {\n        curr=prev+prev_to_prev;\n        prev_to_prev=prev;\n        prev=curr;\n   }\n    return curr;\n}\nint main()\n{\n   int input;\n   long long int res;\n   scanf(\"\"%d\"\",&input);\n   res=find_lucas(input);\n   printf(\"\"%lld\"\",res);\n   return 0;\n}\n\n", "3": "#include<stdio.h>\nlong long int find_tribo(int input)\n{\n   long long int prev,prev_to_prev,p_to_p_to_p,curr;\n   p_to_p_to_p=0;\n   prev_to_prev=1;\n   prev=1;\n   int ctr;\n   if(input==1)\n    return 0;\n   if(input==2)\n    return 1;\n   for(ctr=3;ctr<=input;ctr++)\n   {\n        curr=prev+prev_to_prev+p_to_p_to_p;\n        p_to_p_to_p=prev_to_prev;\n        prev_to_prev=prev;\n        prev=curr;\n   }\n    return curr;\n}\nint main()\n{\n   int input;\n   long long int res;\n   scanf(\"\"%d\"\",&input);\n   res=find_tribo(input);\n   printf(\"\"%lld\"\",res);\n   return 0;\n}\n\n", "4": "#include<stdio.h>\nint possible_word_count(char str[])\n{\n\t\t    int ind;\n\t\t    int zero_flag=0;\n\t\t    int combine_flag=0;\n\t\t    int prev=1,prevtoprev=0;\n\t\t     for(ind=0;str[ind];ind++);\n\t\t    ind=ind-1;\n\t\t    while(ind>=0)\n\t\t    {\n    \t\t    if(ind>0&&str[ind]=='0'&&str[ind-1]=='0')\n    \t\t        return 0;\n    \t\t    if(str[ind]=='0')\n    \t\t    {\n    \t\t        zero_flag=1;\n    \t\t        combine_flag=0;\n    \t\t        ind--;\n    \t\t    }\n    \t\t    else if(zero_flag==1)\n    \t\t    {\n    \t\t        if(str[ind]>'2')\n    \t\t            return 0;\n    \t\t        zero_flag=0;\n    \t\t        combine_flag=0;\n    \t\t        prevtoprev=prev;\n    \t\t        ind--;\n    \t\t    }\n    \t\t    else if(combine_flag==0)\n    \t\t    {\n    \t\t        zero_flag=0;\n    \t\t        combine_flag=1;\n    \t\t        prevtoprev=prev;\n                    ind--;\n    \t\t    }\n    \t\t    else\n    \t\t    {\n    \t\t       int val=(str[ind]-48)*10+(str[ind+1]-48);\n    \t\t       if(val<=26)\n    \t\t       {\n    \t\t            int sum=(prev+prevtoprev)%1000000007;;\n    \t\t           prevtoprev=prev;\n    \t\t           prev=sum;\n    \t\t       }\n    \t\t       else\n    \t\t       {\n    \t\t           prevtoprev=prev;\n    \t\t       }\n    \t\t        zero_flag=0;\n    \t\t        combine_flag=1;\n                    ind--;\n    \t\t    }\n\t\t    }\n\n\t\t    return prev;\n}\nint main()\n{\n    char str[10000];\n    int res=0;\n    scanf(\"\"%s\"\",str);\n    res=possible_word_count(str);\n    printf(\"\"%d\"\",res);\n    return 0;\n}\n", "5": "#include<stdio.h>\nlong long staircase_jumper(int input)\n    {\n        if(input==1)\n            return 1;\n        if(input==2)\n            return 2;\n        long long int prev1;\n        long long int prev2;\n        long long int prev3;\n        long long int res=0;\n\n        int val;\n        prev1=prev2=1;\n        prev3=2;\n            for(val=3;val<=input;val++)\n            {\n                res=(prev1+prev2+prev3)%1000000007;\n                prev1=prev2;\n                prev2=prev3;\n                prev3=res;\n            }\n        return res;\n    }\nint main()\n{\n    int tot_steps;\n    int res=0;\n    scanf(\"\"%d\"\",&tot_steps);\n    res=staircase_jumper(tot_steps);\n    printf(\"\"%d\"\",res);\n    return 0;\n}\n", "6": "#include<stdio.h>\n int box_cricket( int tot_runs)\n{\n         int table[tot_runs+1];\n        memset(table, 0, sizeof(table));\n        table[0]=1;\n        int val;\n        for(val=2;val<=tot_runs;val+=2)\n           table[val]=table[val]+table[val-2];\n        for(val=4;val<=tot_runs;val+=2)\n           table[val]=table[val]+table[val-4];\n        for(val=6;val<=tot_runs;val+=2)\n           table[val]=table[val]+table[val-6];\n        return table[tot_runs];\n}\nint main()\n{\n   int tot_runs;\n   scanf(\"\"%d\"\",&tot_runs);\n   int res;\n   res=box_cricket(tot_runs);\n   printf(\"\"%d\"\",res);\n   return 0;\n}\n\n", "7": "#include<stdio.h>\nlong long int particle_generator(int day_num){\n\t    long long int dp[41]={0,1};\n\t     dp[0]=0;\n\t     dp[1]=1;\n\t    int val;\n\t    for(val=2;val<=7;val+=1)\n\t    {\n\t        dp[val]=dp[val-1]*3;\n\t    }\n\t    if(day_num <= 7 )\n\t    {\n\t        return dp[day_num];\n\t    }\n\t    for(val=7 ; val<=day_num; val++)\n\t    {\n\t        long long int sub_val;\n\t        sub_val=(dp[val-7]/3)*2;\n\t        if(sub_val==0)\n\t            sub_val=1;\n\t        dp[val]=(dp[val-1]-(sub_val))*3;\n\t    }\n\t    return dp[day_num];\n\t}\n\nint main()\n{\n    int day_num;\n    scanf(\"\"%d\"\",&day_num);\n    long long int res;\n    res=particle_generator(day_num);\n    printf(\"\"%lld\"\",res);\n      return 0;\n}\n\n", "8": "#include<stdio.h>\nlong long int find_perrin(int input)\n{\n   long long int prev,prev_to_prev,p_to_p_to_p,curr;\n   p_to_p_to_p=3;\n   prev_to_prev=0;\n   prev=2;\n   int ctr;\n   if(input==1)\n    return 0;\n   if(input==2)\n    return 2;\n   for(ctr=3;ctr<=input;ctr++)\n   {\n        curr=prev_to_prev+p_to_p_to_p;\n        p_to_p_to_p=prev_to_prev;\n        prev_to_prev=prev;\n        prev=curr;\n   }\n    return curr;\n}\nint main()\n{\n   int input;\n   long long int res;\n   scanf(\"\"%d\"\",&input);\n   res=find_perrin(input);\n   printf(\"\"%lld\"\",res);\n   return 0;\n}\n\n", "9": "#include <stdio.h>\n#include<stdlib.h>\nint prime_digit_sum(int input)\n{\n\tint * dp= calloc((input+1),sizeof(int));\n\tdp[0]=dp[1]=0;\n\tint val;\n\tint res;\n\tdp[2]=1;\n\tfor(val=3;val<=input;val+=1)\n\t{\n\t\tif(dp[val-2]!=0)\n\t\t{\n\t\t\tif(dp[val]==0)\n\t\t\t\tdp[val]=dp[val-2]+1;\n\t\t\telse if(dp[val-2]+1 < dp[val])\n\t\t\t\tdp[val]=dp[val-2]+1;\n\t\t}\n\t}\n\tint prime_val;\n\tfor(prime_val=3;prime_val<=7;prime_val+=2)\n\t{\n\t\tdp[prime_val]=1;\n\t\tfor(val=prime_val+1;val<=input;val+=1)\n\t\t{\n\t\t\tif(dp[val-prime_val]!=0)\n\t\t\t{\n\t\t\t\tif(dp[val]==0)\n\t\t\t\t\tdp[val]=dp[val-prime_val]+1;\n\t\t\t\telse if((dp[val-prime_val]+1) < dp[val])\n\t\t\t\t\tdp[val]=dp[val-prime_val]+1;\n\t\t\t}\n\t\t}\n\t}\n\tif(dp[input]!=0)\n\t   res=dp[input];\n\telse\n\t\tres=-1;\n\tfree(dp);\n\treturn res;\n\n}\nint main(){\n  int input;\n  int res;\n\tscanf(\"\"%d\"\",&input);\n  res=prime_digit_sum(input);\n  printf(\"\"%d\"\",res);\n  return 0;\n}\n", "10": "#include <stdio.h>\nint main(){\n  char str[100001];\n  int res[100001];\n  int len;\n  scanf(\"\"%s\"\",str);\n  for(len=0;str[len]!=NULL;len++);\n  int ind;\n  int odd_ctr=0;\n  for(ind=len-1;ind>=0; ind--)\n  {\n\t  if(str[ind]%2==1)\n\t  {\n\t\t  odd_ctr++;\n\t  }\n\t  res[ind]=odd_ctr;\n  }\n  for(ind=0;ind<len;ind+=1)\n    printf(\"\"%d \"\",res[ind]);\n  return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Function_Level_0": {"1": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main()\n{\n    int num;\n    scanf(\"\"%d\"\", &num);\n    double res;\n    res = sqrt(num);\n    printf(\"\"%.2lf \"\", res);\n\n\n    return EXIT_SUCCESS;\n}\n", "2": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main()\n{\n    int base, expo;\n    scanf(\"\"%d%d\"\", &base, &expo);\n    double res;\n    res = pow(base , expo);\n    printf(\"\"%.0lf \"\", res);\n\n    return EXIT_SUCCESS;\n}\n", "3": "#include<stdio.h>\n#include<stdlib.h>\nint find_sum_of_factors( long int);\nint main()\n{\n    long int num, sum;\n    scanf(\"\"%ld\"\", &num);\n    sum = find_sum_of_factors(num);\n    if ( sum == num )\n        printf(\"\"Perfect number\"\");\n    else if ( sum > num)\n        printf(\"\"Abundant number\"\");\n    else\n        printf( \"\"Deficient number\"\");\n    return EXIT_SUCCESS;\n}\nint find_sum_of_factors( long int num)\n{\n    long int sum;\n    long int ftr;\n    sum = 1;\n    for ( ftr = 2; ftr <= num/2; ftr+=1)\n    {\n        if ( num % ftr ==0)\n            sum += ftr;\n    }\n    return sum;\n}\n", "4": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint isPrime( long int);\r\nint main()\r\n{\r\n    long int itr, start, end;\r\n    scanf(\"%ld %ld\", &start, &end);\r\n\r\n    for ( itr = start ; itr <= end ; itr+=1)\r\n    {\r\n        if (isPrime(itr))\r\n            printf(\"%ld \", itr);\r\n\r\n    }\r\n    return 0;\r\n}\r\nint isPrime( long int num)\r\n{\r\n    long int ftr;\r\n    if(num==1)\r\n    {\r\n      return 0;\r\n    }\r\n    for ( ftr = 2; ftr <= num/2; ftr+=1)\r\n    {\r\n        if ( num % ftr ==0)\r\n            return 0;\r\n    }\r\n    return 1;\r\n}", "5": "#include<stdio.h>\n#include<stdlib.h>\nlong int Reverse( long int);\nlong long int Square_number ( long int );\nint main()\n{\n    long int num, rev_num, rev_rev_sqr_num;\n    long long int sqr_num, rev_sqr_num;\n    scanf(\"\"%ld\"\", &num);\n\n    sqr_num = Square_number(num);\n    rev_num = Reverse(num);\n    rev_sqr_num = Square_number(rev_num);\n    rev_rev_sqr_num = Reverse(rev_sqr_num);\n\n    if ( sqr_num == rev_rev_sqr_num)\n        printf(\"\"Adam Number\"\");\n    else\n        printf(\"\"Not Adam\"\");\n\n    return EXIT_SUCCESS;\n}\nlong int Reverse(long int num)\n{\n    long int rev_num;\n    int digit;\n    rev_num =0;\n    while ( num)\n    {\n        digit = num % 10;\n        num /=10;\n        rev_num = rev_num * 10 + digit;\n    }\n    return rev_num;\n\n}\nlong long int Square_number ( long int num)\n{\n    return num * num;\n}\n", "6": "#include<stdio.h>\n#include<stdlib.h>\nint Numberofdigit( long long int);\nint main()\n{\n    long long int num;\n    scanf(\"%lld\", &num);\n    printf(\"%d\", Numberofdigit(num));\n\n    return EXIT_SUCCESS;\n}\nint Numberofdigit( long long int num)\n{\n    int count;\n    count =0;\n    while ( num)\n    {\n        count +=1;\n        num /=10;\n    }\n    return count;\n}\n", "7": "#include<stdio.h>\n#include<stdlib.h>\nint Diffmaxmin_digit( long long int);\nint main()\n{\n    long long int num;\n    scanf(\"%lld\", &num);\n    printf(\"%d\", Diffmaxmin_digit(num));\n\n    return EXIT_SUCCESS;\n}\nint Diffmaxmin_digit( long long int num)\n{\n    int digit, max ,min;\n\n    min = 9;\n    max =0;\n    while ( num)\n    {\n        digit = num % 10;\n        if ( max < digit)\n            max = digit;\n        else if ( min > digit)\n            min = digit;\n        num /=10;\n    }\n    return max-min;\n}\n", "8": "#include<stdio.h>\n#include<stdlib.h>\nint Numberoffactors( long long int);\nint main()\n{\n    long long int num;\n    scanf(\"%lld\", &num);\n    printf(\"%d\", Numberoffactors(num));\n\n    return EXIT_SUCCESS;\n}\nint Numberoffactors( long long int num)\n{\n     int count;\n        long long int ftr;\n\n        for ( ftr = 2,count =2; ftr <= num /2; ftr+=1)\n        {\n            if ( num % ftr == 0)\n                count +=1;\n        }\n        return count;\n}", "9": "#include<stdio.h>\n#include<stdlib.h>\nlong long int Decto_bin( long long int);\nint main()\n{\n    long long int num;\n    scanf(\"%lld\", &num);\n    printf(\"%lld\", Decto_bin(num));\n\n    return EXIT_SUCCESS;\n}\nlong long int Decto_bin( long long int num)\n{\n    int digit;\n    long long int bin_num, power;\n    bin_num =0;\n    power = 1;\n    while ( num)\n    {\n        digit = num % 2;\n        bin_num = digit * power + bin_num;\n        power *=10;\n        num /=2;\n    }\n    return bin_num;\n}\n", "10": "#include<stdio.h>\nint Max_char(char input1,char input2)\n{\n    if(input1>input2)\n    return input1;\n    else\n    return input2;\n}\nint main()\n{\n    char ch1,ch2,num;\n    scanf(\"%c %c\",&ch1,&ch2);\n    num=Max_char(ch1,ch2);\n    printf(\"%c\",num);\n    return 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Function_Level_1": {"1": "#include<stdio.h>\r\n#include<stdlib.h>\r\nlong long int Sum( long int, long int);\r\nlong long int Difference( long int, long int);\r\nlong long int Product( long int, long int);\r\nlong long int Quotient( long int, long int);\r\nlong long int Remainder( long int, long int);\r\nint main()\r\n{\r\n    long int num1, num2;\r\n\r\n    scanf(\"%ld%ld\", &num1, &num2);\r\n    printf(\"%lld \", Sum(num1, num2));\r\n    printf(\"%lld \", Difference(num1, num2));\r\n    printf(\"%lld \", Product(num1, num2));\r\n    printf(\"%lld \", Quotient(num1, num2));\r\n    printf(\"%lld \", Remainder(num1, num2));\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\nlong long int Sum(long int num1, long int num2)\r\n{\r\n    return num1 + num2;\r\n}\r\nlong long int Difference(long int num1, long int num2)\r\n{\r\n    return num1 - num2;\r\n}\r\nlong long int Product(long int num1, long int num2)\r\n{\r\n    return num1 * num2;\r\n}\r\nlong long int Quotient(long int num1, long int num2)\r\n{\r\n    return num1 / num2;\r\n}\r\nlong long int Remainder(long int num1, long int num2)\r\n{\r\n    return num1 % num2;\r\n}\r\n", "2": "#include<stdlib.h>\r\nint alphabets_counter(char *);\r\nint main()\r\n{\r\n    char str[10000];\r\n    scanf(\"%[^\\n]s\", str);\r\n    printf(\"%d \",alphabets_counter(str));\r\n    return EXIT_SUCCESS;\r\n}\r\nint alphabets_counter( char * str)\r\n{\r\n    int ind, alpha;\r\n    alpha =0;\r\n    for ( ind =0; str[ind]!='\\\\0'; ind+=1)\r\n    {\r\n        if (( str[ind]>= 'A' && str[ind]<= 'Z') || ( str[ind]>= 'a' && str[ind]<= 'z'))\r\n            alpha +=1;\r\n    }\r\n    return alpha;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint find_no_digits( long int );\r\nlong int power(int , int );\r\nlong int isArmstrong(long int) ;\r\nint main()\r\n{\r\n    long int num;\r\n    scanf(\"%ld\", &num);\r\n    if (isArmstrong(num)==1)\r\n        printf(\"YES\");\r\n    else\r\n       printf(\"NO\");\r\n    return EXIT_SUCCESS;\r\n}\r\nint find_no_digits( long int num)\r\n{\r\n    int count;\r\n    count =0;\r\n    while(num)\r\n    {\r\n        count+=1;\r\n        num/=10;\r\n    }\r\n    return count;\r\n}\r\nlong int power( int base, int expo)\r\n{\r\n    long int power;\r\n    int itr;\r\n    for ( itr =1, power =1; itr <=expo; itr+=1)\r\n        power = power * base;\r\n    return power;\r\n}\r\nlong int isArmstrong( long int num)\r\n{\r\n    int number_dig, digit;\r\n    long int sum,copy;\r\n    number_dig = find_no_digits(num);\r\n   copy=num;\r\n    sum =0;\r\n    while ( num)\r\n    {\r\n        digit = num % 10;\r\n        sum += power( digit, number_dig);\r\n        num/=10;\r\n    }\r\n   num=copy;\r\n    if(num==sum)\r\n          return 1;\r\n    else \r\n      return 0;\r\n}", "4": "#include<stdio.h>\r\n#include<stdlib.h>\r\nlong int diff_rev_num(long int) ;\r\nint main()\r\n{\r\n    long int num;\r\n    scanf(\"%ld\", &num);\r\n    printf(\"%ld \",diff_rev_num( num));\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\n\r\nlong int diff_rev_num( long int num)\r\n{\r\n    int digit;\r\n    long int revnum;\r\n    long int copy;\r\n    copy=num;\r\n \r\n    revnum =0;\r\n    while ( num)\r\n    {\r\n        digit = num % 10;\r\n        revnum = revnum * 10 + digit;\r\n        num/=10;\r\n    }\r\n    return copy - revnum;\r\n\r\n}", "5": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid Vow_con_segg(char []);\r\nchar str[10000];\r\nint main()\r\n{\r\n    scanf(\"%[^\\n]s\", str);\r\n    Vow_con_segg(str);\r\n    printf(\"%s\", str);\r\n    return EXIT_SUCCESS;\r\n}\r\nvoid Vow_con_segg(char str[])\r\n{\r\n    int itr ,ind, start=0, FLAG, temp;\r\n    for ( ind =0;  str[ind]!='\\\\0'; ind+=1)\r\n    {\r\n        if (!((( str[ind]>='a') && (str[ind]<='z'))|| ( str[ind]>='A' && str[ind]<='Z')))\r\n            continue;\r\n        switch (str[ind])\r\n        {\r\n        case 'a':\r\n        case 'A':\r\n        case 'e':\r\n        case 'E':\r\n        case 'i':\r\n        case 'I':\r\n        case 'o':\r\n        case 'O':\r\n        case 'u':\r\n        case 'U':\r\n            FLAG =1;\r\n            break;\r\n        default:\r\n            FLAG =0;\r\n        }\r\n        if ( FLAG)\r\n        {\r\n            for ( itr = ind, temp = str[ind]; itr>start && str[ind]!='\\\\0' ; itr-=1)\r\n            {\r\n                str[itr] = str[itr-1];\r\n            }\r\n            str[start] = temp;\r\n            start +=1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nlong long int Multiplier(long int *);\r\nint main()\r\n{\r\n    long long int num1, num2;\r\n    scanf(\"%ld\", &num1);\r\n    printf(\"%lld \", Multiplier(&num1));\r\n    return EXIT_SUCCESS;\r\n}\r\nlong long int Multiplier(long int *num1)\r\n{\r\n    return *num1 * 7;\r\n}\r\n\r\n\r\n", "7": "#include<stdlib.h>\r\nvoid Swapper(long long int *, long long int *);\r\nint main()\r\n{\r\n    long long int num1, num2;\r\n    scanf(\"%lld%lld\", &num1, &num2);\r\n    Swapper( &num1, &num2);\r\n    printf(\"%lld %lld\", num1, num2);\r\n    return EXIT_SUCCESS;\r\n}\r\nvoid Swapper(long long int *num1, long long int *num2)\r\n{\r\n    long long int temp;\r\n    temp  = *num1;\r\n    *num1 = *num2;\r\n    *num2 = temp;\r\n}\r\n\r\n\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid  arr_max_rep_three(int *, int);\r\nint main()\r\n{\r\n    int no_of_ele, ind;\r\n    scanf(\"%d\", &no_of_ele);\r\n    int *arr;\r\n    arr = (int *)malloc( no_of_ele * sizeof( int));\r\n    for ( ind =0; ind < no_of_ele;ind+=1)\r\n    {\r\n        scanf(\"%d\", &arr[ind]);\r\n    }\r\n     arr_max_rep_three(arr, no_of_ele);\r\n     for ( ind =0; ind < no_of_ele;ind+=1)\r\n    {\r\n        printf(\"%d \", arr[ind]);\r\n    }\r\n    return EXIT_SUCCESS;\r\n}\r\nvoid  arr_max_rep_three( int * arr, int no_of_ele)\r\n{\r\n    int ind, max;\r\n    for ( ind =0; ind < no_of_ele-2; ind+=1)\r\n    {\r\n        max = arr[ind] > arr[ind+1]?arr[ind]: arr[ind+1];\r\n        max = max > arr[ind+2] ? max : arr[ind+2];\r\n        arr[ind] = max;\r\n    }\r\n    max = arr[ind] > arr[ind+1]?arr[ind]: arr[ind+1];\r\n    arr[ind] = max;\r\n\r\n}\r\n\r\n\r\n\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct DATE\r\n{\r\n    int day;\r\n    int month;\r\n    int year;\r\n};\r\nstruct DATE Create_date();\r\nint main()\r\n{\r\n    struct DATE date_main;\r\n   int day_num,month_num,year_num;\r\n  scanf(\"%d%d%d\",&day_num,&month_num,&year_num);\r\n   date_main = Create_date(day_num,month_num,year_num);\r\n\r\n    printf(\"%02d/%02d/%4d\", date_main.day,date_main.month, date_main.year);\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\nstruct DATE Create_date(int day_num,int month_num,int year_num)\r\n{\r\n    struct DATE dob;\r\n   dob.day=day_num;\r\n   dob.month=month_num;\r\n   dob.year= year_num;\r\n    return dob;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<stdlib.h> \r\n#include<string.h>\r\nstruct DATE\r\n{\r\n    int day;\r\n    int month;\r\n    int year;\r\n};\r\nstruct stud_id\r\n{\r\n    char name[30];\r\n    long long int reg_num;\r\n    struct DATE dob;\r\n};\r\nstruct stud_id Create_id(char inp_name[] ,long long int register_no,int dd,int mm,int yy);\r\nint main()\r\n{\r\n    struct stud_id stud_main;\r\n    char inp_name[30];\r\n    long long int register_no;\r\n    int dd;\r\n    int mm;\r\n    int yy;\r\n     scanf(\"%[^\\n]s\",inp_name);\r\n     scanf(\"%lld\",&register_no);\r\n     scanf(\"%d %d %d\",&dd,&mm,&yy);\r\n    stud_main = Create_id(inp_name,register_no,dd,mm,yy);\r\n    printf(\"%s %lld %02d/%02d/%02d\",stud_main.name, stud_main.reg_num,stud_main.dob.day,\r\n           stud_main.dob.month, stud_main.dob.year);\r\n    return EXIT_SUCCESS;\r\n}\r\nstruct stud_id Create_id(char inp_name[] ,long long int register_no,int dd,int mm,int yy)\r\n{\r\n    struct stud_id new_id;\r\n    strcpy(new_id.name,inp_name);\r\n    new_id.reg_num=register_no;\r\n    new_id.dob.day=dd;\r\n    new_id.dob.month=mm;\r\n    new_id.dob.year=yy;\r\n    return new_id;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Function_Level_2": {"1": "#include<stdio.h>\n#include<stdlib.h>\nchar s[1000000]; \nvoid string_expand(char *);\nint main()\n{\n    char str[1000000]; \n    scanf(\"%s\",str); \n    string_expand(str);\n    printf(\"%s\",s);\n    \n}\nvoid string_expand( char * str)\n{\n   \n   int i,count,k=0; \n   char temp; \n   for(i=0;str[i]!='\\\\0';)\n   {\n      temp=str[i]; \n      i++; \n      count=0; \n      while(str[i]>='0'&&str[i]<='9')\n      {\n          count=count*10+(str[i]-48);\n          i++;\n      }\n      for(int j=1;j<=count;j++)\n      {\n          s[k++]=temp;\n      }\n   }\n   s[k]='\\\\0'; \n  \n}", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid array_rotater( int *, int , int);\r\nint main()\r\n{\r\n    int no_of_ele, ind, rotations;\r\n    int *arr;\r\n    scanf(\"%d\", &no_of_ele);\r\n    arr = ( int *)malloc( no_of_ele * sizeof(int));\r\n\r\n    for ( ind =0; ind < no_of_ele; ind +=1)\r\n    {\r\n        scanf(\"%d\", &arr[ind]);\r\n    }\r\n    scanf(\"%d\", &rotations);\r\n    array_rotater ( arr,no_of_ele, rotations);\r\n\r\n    for ( ind =0; ind < no_of_ele; ind +=1)\r\n    {\r\n        printf(\"%d \", arr[ind]);\r\n    }\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\nvoid array_rotater( int * arr,int no_of_ele, int rotataion)\r\n{\r\n    int ind, temp, rot_ctr;\r\n\r\n    for ( rot_ctr =0; rot_ctr < rotataion; rot_ctr+=1)\r\n    {\r\n        temp = arr[no_of_ele-1];\r\n        for ( ind = no_of_ele-1; ind >0;ind-=1)\r\n        {\r\n            arr[ind] = arr[ind-1];\r\n        }\r\n        arr[ind] = temp;\r\n    }\r\n\r\n}", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nvoid array_reverse( int *, int , int);\r\nvoid array_group_rev(int * , int, int );\r\nint main()\r\n{\r\n    int no_of_ele, ind, group_size;\r\n    int *arr;\r\n    scanf(\"%d\", &no_of_ele);\r\n    arr = ( int *)malloc( no_of_ele * sizeof(int));\r\n\r\n    for ( ind =0; ind < no_of_ele; ind +=1)\r\n    {\r\n        scanf(\"%d\", &arr[ind]);\r\n    }\r\n    scanf(\"%d\", &group_size);\r\n    array_group_rev ( arr,no_of_ele, group_size);\r\n\r\n    for ( ind =0; ind < no_of_ele; ind +=1)\r\n    {\r\n        printf(\"%d \", arr[ind]);\r\n    }\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\nvoid array_reverse( int * arr,int start, int end)\r\n{\r\n    int ind, temp;\r\n\r\n    while ( start < end)\r\n    {\r\n        temp = arr[start];\r\n        arr[start] = arr[end];\r\n        arr[end] = temp;\r\n        start +=1;\r\n        end-=1;\r\n    }\r\n}\r\nvoid array_group_rev(int * arr, int no_of_ele, int group_size)\r\n{\r\n    int ind, itr;\r\n    itr =group_size-1;\r\n    for ( ind =0; itr < no_of_ele; ind = itr+1, itr+=group_size)\r\n    {\r\n        array_reverse ( arr, ind, itr);\r\n    }\r\n    array_reverse ( arr, ind, no_of_ele-1);\r\n\r\n}\r\n", "4": "#include<stdio.h>\r\n#include<limits.h>\r\nstruct group\r\n{\r\n    int * res_arr;\r\n    int  res_no_ele;\r\n};\r\nint isAvail(int check_val, int arr[] , int no_ele)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<no_ele;ind+=1)\r\n        if(arr[ind]==check_val)\r\n            return 1;\r\n    return 0;\r\n}\r\nstruct group  arr_union(int * arr1 , int no_ele1 , int * arr2, int no_ele2)\r\n{\r\n  int * res;\r\n  struct group toReturn;\r\n  res=(int*)malloc((no_ele1+no_ele2+1)*sizeof(int));\r\n  int res_ind=0;\r\n  int ind;\r\n  for(ind=0;ind<no_ele1;ind+=1)\r\n  {\r\n      if(isAvail(arr1[ind],res,res_ind)==0)\r\n        res[res_ind++]=arr1[ind];\r\n  }\r\n  for(ind=0;ind<no_ele2;ind+=1)\r\n  {\r\n      if(isAvail(arr2[ind],res,res_ind)==0)\r\n        res[res_ind++]=arr2[ind];\r\n  }\r\n  toReturn.res_arr=res;\r\n  toReturn.res_no_ele=res_ind;\r\n  return toReturn;\r\n}\r\nint main()//entry point\r\n{\r\n  int no_ele1;\r\n  int no_ele2;\r\n  int * arr1;\r\n  int * arr2;\r\n  int ind;\r\n  struct group res;\r\n  scanf(\"%d\",&no_ele1);\r\n  arr1=(int*)malloc(no_ele1*sizeof(int));\r\n  for(ind=0; ind<no_ele1;ind+=1)\r\n    scanf(\"%d\",&arr1[ind]);\r\n  scanf(\"%d\",&no_ele2);\r\n  arr2=(int*)malloc(no_ele2*sizeof(int));\r\n  for(ind=0; ind<no_ele2;ind+=1)\r\n    scanf(\"%d\",&arr2[ind]);\r\n  res = arr_union(arr1,no_ele1,arr2,no_ele2);\r\n  for(ind=0; ind<res.res_no_ele;ind+=1)\r\n    printf(\"%d \",res.res_arr[ind]);\r\n\r\n  return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<limits.h>\r\nstruct group\r\n{\r\n    int * res_arr;\r\n    int  res_no_ele;\r\n};\r\nint isAvail(int check_val, int arr[] , int no_ele)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<no_ele;ind+=1)\r\n        if(arr[ind]==check_val)\r\n            return 1;\r\n    return 0;\r\n}\r\nstruct group  arr_intersect(int * arr1 , int no_ele1 , int * arr2, int no_ele2)\r\n{\r\n  int * res;\r\n  struct group toReturn;\r\n  res=(int*)malloc(no_ele1*sizeof(int));\r\n  int res_ind=0;\r\n  int ind;\r\n  int ind1;\r\n  int ind2;\r\n  for(ind1=0;ind1<no_ele1;ind1+=1)\r\n  {\r\n      for(ind2=0;ind2<no_ele2;ind2+=1)\r\n       {\r\n           if(arr1[ind1]==arr2[ind2])\r\n           {\r\n               if(isAvail(arr1[ind1],res,res_ind)==0)\r\n               {\r\n                   res[res_ind++]=arr1[ind1];\r\n               }\r\n               break;\r\n           }\r\n       }\r\n   }\r\n  toReturn.res_arr=res;\r\n  toReturn.res_no_ele=res_ind;\r\n  return toReturn;\r\n}\r\nint main()//entry point\r\n{\r\n  int no_ele1;\r\n  int no_ele2;\r\n  int * arr1;\r\n  int * arr2;\r\n  int ind;\r\n  struct group res;\r\n  scanf(\"%d\",&no_ele1);\r\n  arr1=(int*)malloc(no_ele1*sizeof(int));\r\n  for(ind=0; ind<no_ele1;ind+=1)\r\n    scanf(\"%d\",&arr1[ind]);\r\n  scanf(\"%d\",&no_ele2);\r\n  arr2=(int*)malloc(no_ele2*sizeof(int));\r\n  for(ind=0; ind<no_ele2;ind+=1)\r\n    scanf(\"%d\",&arr2[ind]);\r\n  res = arr_intersect(arr1,no_ele1,arr2,no_ele2);\r\n  for(ind=0; ind<res.res_no_ele;ind+=1)\r\n    printf(\"%d \",res.res_arr[ind]);\r\n\r\n  return 0;\r\n}\r\n", "6": "    #include<stdio.h>\r\n#include<limits.h>\r\nstruct group\r\n{\r\n    int * res_arr;\r\n    int  res_no_ele;\r\n};\r\nstruct group  arr_expand(int * arr , int * counter, int no_ele)\r\n{\r\n  int * res;\r\n  struct group toReturn;\r\n  int res_len;\r\n  int res_ind=0;\r\n  int ind;\r\n  int ctr;\r\n\r\n  res_len=0;\r\n  for(ind=0;ind<no_ele ;ind+=1)\r\n    res_len+=counter[ind];\r\n  res=(int*)malloc(res_len*sizeof(int));\r\n  for(ind=0;ind<no_ele;ind+=1)\r\n  {\r\n      for(ctr=1;ctr<=counter[ind];ctr+=1)\r\n      {\r\n          res[res_ind++]=arr[ind];\r\n      }\r\n  }\r\n  toReturn.res_arr=res;\r\n  toReturn.res_no_ele=res_len;\r\n  return toReturn;\r\n}\r\nint main()//entry point\r\n{\r\n  int no_ele;\r\n  int * arr;\r\n  int * counter;\r\n  int ind;\r\n  struct group res;\r\n  scanf(\"%d\",&no_ele);\r\n  arr=(int*)malloc(no_ele*sizeof(int));\r\n  for(ind=0; ind<no_ele;ind+=1)\r\n    scanf(\"%d\",&arr[ind]);\r\n  counter=(int*)malloc(no_ele*sizeof(int));\r\n  for(ind=0; ind<no_ele;ind+=1)\r\n    scanf(\"%d\",&counter[ind]);\r\n  res = arr_expand(arr,counter,no_ele);\r\n  for(ind=0; ind<res.res_no_ele;ind+=1)\r\n    printf(\"%d \",res.res_arr[ind]);\r\n  return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<limits.h>\r\nstruct group\r\n{\r\n    int * unique_arr;\r\n    int * freq_arr;\r\n    int  res_no_ele;\r\n};\r\nint isAvail(int check_val, int arr[] , int no_ele)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<no_ele;ind+=1)\r\n        if(arr[ind]==check_val)\r\n            return ind;\r\n    return -1;\r\n}\r\nstruct group  count_freq(int * arr , int no_ele)\r\n{\r\n  int * res;\r\n  int *counter;\r\n  struct group toReturn;\r\n  res=(int*)malloc(no_ele*sizeof(int));\r\n  counter=(int*)calloc(no_ele,sizeof(int));\r\n  int res_ind=0;\r\n  int ind;\r\n  int avail_ind;\r\n  for(ind=0;ind<no_ele;ind+=1)\r\n  {\r\n      avail_ind=isAvail(arr[ind],res,res_ind);\r\n      if(avail_ind==-1)\r\n      {\r\n          res[res_ind]=arr[ind];\r\n          counter[res_ind++]=1;\r\n      }\r\n      else\r\n      {\r\n          counter[avail_ind]++;\r\n      }\r\n  }\r\n\r\n  toReturn.unique_arr=res;\r\n  toReturn.freq_arr=counter;\r\n  toReturn.res_no_ele=res_ind;\r\n  return toReturn;\r\n}\r\nint main()//entry point\r\n{\r\n  int no_ele;\r\n\r\n  int * arr;\r\n\r\n  int ind;\r\n  struct group res;\r\n  scanf(\"%d\",&no_ele);\r\n  arr=(int*)malloc(no_ele*sizeof(int));\r\n  for(ind=0; ind<no_ele;ind+=1)\r\n    scanf(\"%d\",&arr[ind]);\r\n  res = count_freq(arr,no_ele);\r\n  printf(\"%d\\n\",res.res_no_ele);\r\n  for(ind=0; ind<res.res_no_ele;ind+=1)\r\n    printf(\"%d \",res.unique_arr[ind]);\r\n  printf(\"\\n\");\r\n  for(ind=0; ind<res.res_no_ele;ind+=1)\r\n    printf(\"%d \",res.freq_arr[ind]);\r\n\r\n  return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<limits.h>\r\nstruct group\r\n{\r\n    int * res_arr;\r\n    int  res_no_ele;\r\n};\r\nint find_max_ind(int arr[],int no_ele)\r\n{\r\n int max=INT_MIN;\r\n int max_ind;\r\n int ind;\r\n for(ind=0; ind<no_ele ; ind+=1)\r\n {\r\n     if(arr[ind]>max)\r\n     {\r\n         max=arr[ind];\r\n         max_ind=ind;\r\n     }\r\n }\r\n return max_ind;\r\n}\r\nstruct group  max_pro(int * arr , int no_ele, int max_product)\r\n{\r\n  int * res;\r\n  struct group toReturn;\r\n  res=(int*)malloc(100000*sizeof(int));\r\n  int res_ind=0;\r\n  int ind;\r\n  int max_ind;\r\n  int product=1;\r\n  for(ind=0;ind<no_ele;ind+=1)\r\n  {\r\n      product*=arr[ind];\r\n      if(product>max_product)\r\n      {\r\n            toReturn.res_arr=arr;\r\n            toReturn.res_no_ele=no_ele;\r\n            return toReturn;\r\n      }\r\n      res[res_ind++]=arr[ind];\r\n  }\r\n  while(product<=max_product)\r\n  {\r\n      max_ind=find_max_ind(res,res_ind);\r\n      if(res[max_ind]<=4)\r\n     {\r\n        toReturn.res_arr=res;\r\n        toReturn.res_no_ele=-1;\r\n        return toReturn;\r\n     }\r\n      product=product/res[max_ind];\r\n      product*=(res[max_ind]/2);\r\n      res[res_ind++]=res[max_ind]/2;\r\n\r\n      if(res[max_ind]%2==1)\r\n      {\r\n          res[max_ind]=res[max_ind]/2+1;\r\n      }\r\n      else\r\n          res[max_ind]=res[max_ind]/2;\r\n      product*=(res[max_ind]);\r\n  }\r\n  toReturn.res_arr=res;\r\n  toReturn.res_no_ele=res_ind;\r\n  return toReturn;\r\n}\r\nvoid swapper(int arr[] , int ind1 , int ind2)\r\n{\r\n    int temp;\r\n    temp=arr[ind1];\r\n    arr[ind1]=arr[ind2];\r\n    arr[ind2]=temp;\r\n}\r\nvoid arr_sorter(int arr[],int no_ele)\r\n{\r\n    int ind;\r\n    int ctr;\r\n    int temp;\r\n    int swap_flag=0;\r\n    for(ctr=1;ctr<=no_ele;ctr+=1)\r\n    {\r\n        swap_flag=0;\r\n        for(ind=0;ind<no_ele-ctr;ind+=1)\r\n        {\r\n           if(arr[ind]>arr[ind+1])\r\n           {\r\n               swapper(arr,ind,ind+1);\r\n               swap_flag=1;\r\n           }\r\n        }\r\n        if(swap_flag==0)\r\n            break;\r\n    }\r\n}\r\nint main()//entry point\r\n{\r\n  int no_ele;\r\n  int * arr;\r\n  int ind;\r\n  int max_product;\r\n  struct group res;\r\n  scanf(\"%d\",&no_ele);\r\n  arr=(int*)malloc(no_ele*sizeof(int));\r\n  for(ind=0; ind<no_ele;ind+=1)\r\n    scanf(\"%d\",&arr[ind]);\r\n  scanf(\"%d\",&max_product);\r\n  res = max_pro(arr,no_ele,max_product);\r\n  if(res.res_no_ele==-1)\r\n    printf(\"Not Possible\");\r\n  else\r\n  {\r\n     arr_sorter(res.res_arr,res.res_no_ele);\r\n     for(ind=0; ind<res.res_no_ele;ind+=1)\r\n       printf(\"%d \",res.res_arr[ind]);\r\n  }\r\n  return 0;\r\n}\r\n", "9": "", "10": "", "11": "", "12": "", "13": ""}, "Greedy_Level0": {"1": "#include<stdio.h>\r\nint Calculate_Steps(int height,int up, int down)\r\n{\r\n    int sum=0,count=0;\r\n    while(sum <= height)\r\n    {\r\n        if(sum+up >= height)\r\n        {\r\n            sum+=up;\r\n        }\r\n        else\r\n            sum += up - down;\r\n        count++;\r\n    }\r\n    return count;\r\n\r\n}\r\nint main()\r\n{\r\n    int height,up,down;\r\n    scanf(\"%d%d%d\",&height,&up,&down);\r\n    printf(\"%d\",Calculate_Steps(height,up,down));\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nvoid Largest_Permutation(int *arr, int size, int val)\r\n{\r\n        int hash[size + 1],res,ind,temp;\r\n        for (ind = 0; ind < size ; ind++)\r\n        hash[arr[ind]] = ind;\r\n\r\n        for (ind = 0; ind < size  && val; ind++)\r\n    {\r\n                if (arr[ind] == size - ind)\r\n                        continue;\r\n                temp = hash[size - ind];\r\n\r\n                hash[arr[ind]] = hash[size - ind];\r\n                hash[size - ind] = ind;\r\n\r\n                res = arr[temp];\r\n                arr[temp]=arr[ind];\r\n                arr[ind]=res;\r\n                --val;\r\n        }\r\n}\r\nint main()\r\n{\r\n    int size,ind,val;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(arr));\r\n    scanf(\"%d\",&val);\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",& arr[ind]);\r\n    Largest_Permutation(arr,size,val);\r\n    for(ind=0;ind<size;ind++)\r\n        printf(\"%d \",arr[ind]);\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid Sort_Array(int *arr,int size)\r\n{\r\n    int inner,outer,temp;\r\n    for(outer=0;outer<size;outer++)\r\n    {\r\n        for(inner=0;inner<(size-1)-outer;inner++)\r\n        {\r\n            if(arr[inner]>arr[inner+1])\r\n            {\r\n                temp = arr[inner];\r\n                arr[inner]=arr[inner+1];\r\n                arr[inner+1]=temp;\r\n            }\r\n        }\r\n    }\r\n}\r\nint Sum_of_Product(int *arr1,int *arr2,int size)\r\n{\r\n    int ind,sum=0;\r\n    Sort_Array(arr1,size);\r\n    Sort_Array(arr2,size);\r\n    for(ind=0;ind<size;ind++)\r\n        sum+=(arr1[ind] *arr2[size-ind-1]);\r\n    return sum;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr1,*arr2;\r\n    arr1 = (int*)malloc(size * sizeof(int));\r\n    arr2 = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr1[ind++]));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr2[ind++]));\r\n    printf(\"%d\",Sum_of_Product(arr1,arr2,size));\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nint Form_Number(int num1,int num2)\r\n{\r\n    int pv=1,temp,sum,num,dig;\r\n    while(num1--)\r\n        pv=pv*10;\r\n    for(num=pv-1; num>=0; num--)//num=99\r\n    {\r\n        temp = num;\r\n        sum=0;\r\n        while(num)\r\n        {\r\n            dig = num%10;\r\n            sum+=dig;\r\n            num/=10;\r\n        }\r\n        num=temp;\r\n        if(sum==num2)\r\n        {\r\n            return num;\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    int num1,num2;\r\n    scanf(\"%d%d\",&num1,&num2);\r\n    printf(\"%d\",Form_Number(num1,num2));\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint Count_Item(int *arr,int size,int k_val)\r\n{\r\n    int ind,sum=0,count=0;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n            if(arr[ind]<=k_val && sum <= k_val)\r\n            {\r\n                sum=sum+arr[ind];\r\n                count++;\r\n            }\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int size,ind,K_Value;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    scanf(\"%d\",&K_Value);\r\n    printf(\"%d\",Count_Item(arr,size,K_Value));\r\n    return 0;\r\n}\r\n\r\n\r\n", "6": "#include<stdio.h>\r\nint Least_Operation(int num)\r\n{\r\n    int count=0;\r\n    while(num)\r\n    {\r\n        if(num%2==0)\r\n            num=num/2;\r\n        else\r\n            num=num-1;\r\n        count++;\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    printf(\"%d\",Least_Operation(num));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<limits.h>\r\nint Calculate_Sum(int *arr,int size)\r\n{\r\n    int ind,min=INT_MAX,max=INT_MIN;\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        if(arr[ind]>max)\r\n            max=arr[ind];\r\n        if(arr[ind]<min)\r\n            min=arr[ind];\r\n    }\r\n    return max+min;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size*sizeof(int*));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Calculate_Sum(arr,size));\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint Passing_Message(int num)\r\n{\r\n    return num * (num-1);\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    printf(\"%d\",Passing_Message(num));\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nvoid Sort_Array(int *arr,int size)\r\n{\r\n    int inner,outer,temp;\r\n    for(outer=0;outer<size;outer++)\r\n    {\r\n        for(inner=0;inner<(size-1)-outer;inner++)\r\n        {\r\n            if(arr[inner]<arr[inner+1])\r\n            {\r\n                temp=arr[inner];\r\n                arr[inner]=arr[inner+1];\r\n                arr[inner+1]=temp;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nint Calculate_Miles(int*arr,int size)\r\n{\r\n    int ind,power=1,sum=0;\r\n    Sort_Array(arr,size);\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        sum += (power * arr[ind]);\r\n        power*=2;\r\n    }\r\n    return sum;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int*));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Calculate_Miles(arr,size));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<limits.h>\r\nchar* Remove_Digits(char *str, char ch)\r\n{\r\n    int ind,count=0,max=INT_MIN,num,pos,len,itr;\r\n    for(len=0;str[len];len++);\r\n    for(ind=0;str[ind];ind++)\r\n        if(str[ind]==ch)\r\n            count++;\r\n    ind=0;\r\n    while(count--)\r\n    {\r\n        num=0;\r\n        while(str[ind])\r\n        {\r\n            if(str[ind]==ch)\r\n            {\r\n                pos=ind;//pos=0\r\n                str[ind]=' ';\r\n                break;\r\n            }\r\n            ind++;\r\n        }\r\n        for(itr=0;str[itr];itr++)//68797\r\n        {\r\n            if(str[itr]==' ')\r\n                continue;\r\n            num = num*10+ (str[itr]-'0');\r\n        }\r\n        if(num > max)//68797\r\n            max = num;//max=68797\r\n        str[pos] = ch;//str[0] = 7\r\n        ind=pos+1;//ind=0\r\n    }\r\n    ind=len-2;\r\n    while(max)\r\n    {\r\n        str[ind]=(max%10)+'0';\r\n        max/=10;\r\n        ind--;\r\n    }\r\n    str[len-1]='\\\\0';\r\n    return str;\r\n}\r\nint main()\r\n{\r\n    char str[100],ch;\r\n    char *res;\r\n    scanf(\"%s %c\",str,&ch);\r\n    res = Remove_Digits(str,ch);\r\n    printf(\"%s\",res);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Hashing_level_0": {"1": "#include <stdio.h>\r\n#include <string.h>\r\nint check_isogram(char *str)\r\n{\r\n  int length = strlen(str),ind;\r\n  int mapHash[26] ={0};\r\n  for (ind =0;ind<length;ind++)\r\n  { \r\n    if(str[ind]>=65&&str[ind]<=90)\r\n      str[ind]=str[ind]+32;\r\n    mapHash[str[ind] - 'a']++;\r\n    if (mapHash[str[ind] - 'a'] > 1)\r\n      return 0;\r\n  }\r\n  return 1;\r\n}\r\nint main()\r\n{\r\n  char str[1000];\r\n  scanf(\"%s\",str);\r\n  if(check_isogram(str))\r\n    printf(\"TRUE\");\r\n  else\r\n    printf(\"FALSE\");\r\n  return 0;\r\n}\r\n", "2": "#include <stdio.h>\r\nint divideLadoo(int *arr,int N)\r\n{\r\n  int count=0,ind,map[100000]={0};\r\n  for(ind=0;ind<N;ind++)\r\n  {\r\n    map[arr[ind]]++;\r\n    if(map[arr[ind]]==1)\r\n      count++;\r\n  }\r\n  return count;\r\n}\r\nint main()\r\n{\r\n  int arr[100000],N,ind;\r\n  scanf(\"%d\",&N);\r\n  for(ind=0;ind<N;ind++)\r\n    scanf(\"%d\",&arr[ind]);\r\n  printf(\"%d\",divideLadoo(arr,N));\r\n  return 0;\r\n}\r\n", "3": "#include <stdio.h>\r\nvoid printUnique(int R1,int R2)\r\n{\r\n  int itr;\r\n  for(itr=R1;itr<=R2;itr++)\r\n  {\r\n    int num=itr;\r\n    int visited[10] = {0};\r\n    while (num)\r\n    {\r\n      if(visited[num % 10])\r\n        break;\r\n      visited[num%10] = 1;\r\n      num = num/10;\r\n    }\r\n    if(num == 0)\r\n      printf(\"%d \",itr);\r\n  }\r\n}\r\nint main()\r\n{\r\n  int R1,R2;\r\n  scanf(\"%d%d\",&R1,&R2);\r\n  printUnique(R1,R2);\r\n  return 0;\r\n}", "4": "#include <stdio.h>\r\nchar* decending_order_string(char str[])\r\n{\r\n  char alpha[26]={0};\r\n  int ind,ctr;\r\n  for(ind=0;str[ind]!='\\\\0';ind++)\r\n    alpha[str[ind]-97]++;\r\n  for(ind=25,ctr=0;ind>=0;ind--)\r\n    while(alpha[ind]--)\r\n      str[ctr++]=ind+97;\r\n  str[ctr]='\\\\0';\r\n  return str;\r\n}\r\nint main()\r\n{\r\n  char str[10000];\r\n  scanf(\"%s\",str);\r\n  printf(\"%s\",decending_order_string(str));\r\n  return 0;\r\n}", "5": "#include <stdio.h>\r\n#include <limits.h>\r\nint smallest_number(int *arr,int N,int K)\r\n{\r\n  int ind,num[100000]={0};\r\n  for(ind=0;ind<N;ind++)\r\n  {\r\n    num[arr[ind]]++;\r\n  }\r\n  for(ind=0;ind<100000;ind++)\r\n  {\r\n    if(num[ind]==K)\r\n      {   \r\n        return ind;\r\n      }\r\n  }\r\n  return -1;\r\n}\r\nint main()\r\n{\r\n  int N,ind,K,arr[10000];\r\n  scanf(\"%d\",&N);\r\n  for(ind=0;ind<N;ind++)\r\n    scanf(\"%d\",&arr[ind]);\r\n  scanf(\"%d\",&K);\r\n  if(smallest_number(arr,N,K)>=0)\r\n    printf(\"%d\",smallest_number(arr,N,K));\r\n  else \r\n    printf(\"-1\");\r\n  return 0;\r\n}\r\n", "6": "#include <stdio.h>\r\n#include <limits.h>\r\nvoid find_unique_element(int *arr,int N,int K)\r\n{\r\n  int ind,num[100000]={0};\r\n  for(ind=0;ind<N;ind++)\r\n  {\r\n    num[arr[ind]]++;\r\n  }\r\n  /*for(ind=0;ind<INT_MAX;ind++)\r\n  {\r\n    printf(\"%d \",num[ind]);\r\n  }*/\r\n  for(ind=0;ind<100000;ind++)\r\n  {\r\n    if(num[ind]!=K && num[ind]!=0)\r\n      {   \r\n        printf(\"%d\",ind);\r\n        return ;\r\n      }\r\n  }\r\n}\r\nint main()\r\n{\r\n  int N,ind,K,arr[10000];\r\n  scanf(\"%d%d\",&N,&K);\r\n  for(ind=0;ind<N;ind++)\r\n    scanf(\"%d\",&arr[ind]);\r\n  find_unique_element(arr,N,K);\r\n  return 0;\r\n}", "7": "#include <stdio.h>\r\nchar* uncommon_characters(char *str1,char *str2)\r\n{\r\n  char alpha1[26]={0},alpha2[26]={0},ind,ctr;\r\n  for(ind=0;str1[ind]!='\\\\0';ind++)\r\n    alpha1[str1[ind]-97]++;\r\n  for(ind=0;str2[ind]!='\\\\0';ind++)\r\n    alpha2[str2[ind]-97]++;  \r\n  for(ind=0,ctr=0;ind<26;ind++)\r\n    if(alpha1[ind]!=alpha2[ind] && !(alpha1[ind]>=1 && alpha2[ind]>=1))\r\n        str1[ctr++]=ind+97;\r\n  str1[ctr]='\\\\0';\r\n  return str1;\r\n}\r\nint main()\r\n{\r\n  char str1[10000],str2[10000];\r\n  scanf(\"%s\\n%s\",str1,str2);\r\n  printf(\"%s\",uncommon_characters(str1,str2));\r\n  return 0;\r\n}", "8": "#include <stdio.h>\r\nint pangram(char *str)\r\n{\r\n  char alpha[26]={0},ind;\r\n  for(ind=0;str[ind]!='\\\\0';ind++)\r\n    alpha[str[ind]-97]++;\r\n  for(ind=0;ind<26;ind++)\r\n    if(alpha[ind]==0)\r\n      return 0;\r\n  return 1;\r\n}\r\nint main()\r\n{\r\n  char str[10000];\r\n  scanf(\"%s\",str);\r\n  if(pangram(str))\r\n    printf(\"TRUE\");\r\n  else \r\n    printf(\"FALSE\");\r\n  return 0;\r\n}", "9": "#include <stdio.h>\r\nvoid Maximum_occurrence(char *str)\r\n{\r\n  char alpha[128]={0},ind,max=0,ch;\r\n  for(ind=0;str[ind]!='\\\\0';ind++)\r\n    alpha[str[ind]]++;\r\n  for(ind=0;ind<122;ind++)\r\n  {\r\n    if(alpha[ind]>max)\r\n    {\r\n      max = alpha[ind];\r\n      ch=ind;\r\n    }\r\n  }\r\n  printf(\"%c %d\",ch,max);\r\n}\r\nint main()\r\n{\r\n  char str[10000];\r\n  scanf(\"%[^\\n]s\",str);\r\n  Maximum_occurrence(str);\r\n  return 0;\r\n}", "10": "\n\n\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Looping_Level_0": {"1": "#include<stdio.h>\r\nint main() \r\n{\r\nlong long int input;\r\nscanf(\"%lld\",&input);\r\nfor(itr=1;itr<=input;itr++)\r\n   printf(\"%lld \",itr);\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nint main() \r\n{\r\nlong long int input,itr=1;\r\nscanf(\"%lld\",&input);\r\nfor(;itr<=input;itr+=2)\r\nprintf(\"%lld \",itr);\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\r\nint main() \r\n{\r\nlong long int start,end,itr;\r\nscanf(\"%lld%lld\",&start,&end);\r\n((start&1)==0)?(itr=start):(itr=start+1);\r\nfor(;itr<=end;itr+=2)\r\nprintf(\"%lld \",itr);\r\nreturn 0;\r\n}", "4": "\"#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n    long long int itr, odd_num;\r\n    long long int num;\r\n    unsigned long long int sum;\r\n    scanf(\"\"%lld\"\",&num);\r\n\r\n    for ( itr = 1,odd_num=1, sum =0; itr<= num ; itr+=1,sum +=odd_num, odd_num +=2);\r\n    printf(\"\"%llu \"\", sum);\r\n    return EXIT_SUCCESS;\r\n}\r\n\"", "5": "\"#include <stdio.h>\nint main()\n{\n   long long int sum=0,st,end,value;\n   scanf(\"\"%lld %lld\"\",&st ,&end);\n   for(value=st;value<=end;value+=1)\n        if(value%2==0)\n           sum=value+sum;\n   printf(\"\"%lld\"\",sum);\n   return 0;\n}\"", "6": "\"#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n    long long int itr;\r\n    long long int num;\r\n    unsigned long long int sum;\r\n    scanf(\"\"%lld\"\",&num);\r\n\r\n    for ( itr = 1, sum =0; itr<= num ; itr+=1)\r\n    {\r\n        if (( itr %3 == 0 ) || ( itr % 5 == 0 ))\r\n            sum += itr;\r\n    }\r\n    printf(\"\"%llu\"\", sum);\r\n\r\n\r\n\r\n    return EXIT_SUCCESS;\r\n}\r\n\"", "7": "\"#include<stdio.h>\r\n\r\nint main()\r\n\r\n{\r\n\r\nunsigned long long int num,i;\r\n\r\nunsigned long long int f=1;\r\n\r\nscanf(\"\"%llu\"\",&num);\r\n\r\nfor(i=1;i<=num;i++)\r\n\r\nf=f*i;\r\n\r\nprintf(\"\"%llu\"\",f);\r\n\r\nreturn 0;\r\n\r\n}\"", "8": "#include <stdio.h>\n\nint main()\n{\n    long long int num;\n    scanf(\"\"%lld\"\",&num);\n    int flag=0;\n    if(num%2==1)\n      printf(\"\"NO\"\");\n    else\n    {\n    while(num>2){\n        num/=2;\n        if(num%2==1)\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n      printf(\"YES\");\n     else \n       printf(\"NO\");\n    \n    }\n\n    return 0;\n}", "9": "\"#include <stdio.h>\n\nint main()\n{\n    long long int nlimit,multiplicand;\n    scanf(\"\"%lld%lld\"\",&nlimit,&multiplicand);\n    \n    for(long long int num=1;num<=nlimit;num++){\n        printf(\"\"%lld * %lld = %lld\\n\"\",num,multiplicand,num*multiplicand);\n    }\n    \n    return 0;\n}\"", "10": "\"#include<stdio.h>\nint main(){\n    int max,min,sum=0,val;\n    float avg,count=0;\n    scanf(\"\"%d\"\",&val);\n    max=val;\n    min=val;\n    for(;val!=-1;scanf(\"\"%d\"\",&val)){\n        sum+=val;\n        if(max<val){\n            max=val;\n        }\n        if(min>val){\n            min=val;\n        }\n        count++;\n    }\n    avg = sum/count;\n    \n    printf(\"\"Min = %d\\nMax = %d\\nSum = %d\\nAverage = %f\"\",min,max,sum,avg);\n    return 0;\n}\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Looping_Level_1": {"1": "\"#include<stdio.h> \nint main()\n{\n    long long int N,root;\n    scanf(\"\"%lld\"\",&N);\n    for(root=1;root*root<N;root++);\n    if(root*root>N)\n       printf(\"\"Perfect Square\"\");\n    else\n      printf(\"\"Not\"\");\n    return 0;\n}\"", "2": "\"#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n\r\nint num,factor=2,count,divide=1;\r\nscanf(\"\"%d\"\",&num);\r\nwhile(num!=1)\r\n{\r\ncount=0;\r\nwhile(num%factor==0)\r\n{\r\nnum=num/factor;\r\ncount++;\r\n}\r\nif(count%2==1)\r\ndivide=divide*factor;\r\nfactor++;\r\n}\r\nprintf(\"\"%d\"\",divide);\r\nreturn 0;\r\n}\"", "3": "\"#include<stdio.h>\n#include<math.h>\nint main()\n{\nint num,factor=2,count;\n scanf(\"\"%d\"\",&num);\n while(num!=1)\n {\n count=0;\n while(num%factor==0)\n {\n num=num/factor;\n count++;\n }\n if(count%3!=0)\n break;\n factor++;\n }\n if(num==1 && count%3==0)\n printf(\"\"Perfect Cube\"\");\n else\n printf(\"\"Not a Perfect Cube\"\");\n return 0;\n}\"", "4": "\"#include<stdio.h>\nint main(){\n    long long int num,pow,ans=1;\n    scanf(\"\"%lld%lld\"\",&num,&pow);\n    for(int ctr=1;ctr<=pow;ctr++){\n        ans*=num;\n    }\n    printf(\"\"%lld\"\",ans);\n    return 0;\n}\"", "5": "\"#include<stdio.h>\nint main()\n{\n    int num,divi,val;\n    scanf(\"\"%d%d\"\",&num,&divi);\n    for(val=1;divi<=num;val++)\n    {\n        num=num-divi;\n    }\n      printf(\"\"%d\"\",val-1);\n}\"", "6": "\"#include<stdio.h>\nint main()\n{\n    long long int number,multiple,value,sum=0;\n    scanf(\"\"%lld%lld\"\",&number,&multiple);\n    for(value=1;value<=multiple;value++)\n    {\n        sum=number+sum;\n    }\n      printf(\"\"%lld\"\",sum);\n      return 0;\n}\"", "7": "\"#include<stdio.h> \n  int main() {\n    int input,num,flag=0;\n    scanf(\"\"%d\"\",&input);\n    for(num=1;num<=input/2+1;num++) {\n      if((num*(num+1))/2==input) {\n        flag=1; \n        break; \n      } \n    } \n    if(flag==1) \n      printf(\"\"Triangular Number\"\");\n    else \n      printf(\"\"Not a Triangular Number\"\");\n  }\"", "8": "\"#include <stdio.h>\nint main()\n{\n    long long int inp,val;\n    int alpha;\n    scanf(\"\"%lld\"\",&inp);\n    for(val=1;val<=inp;val++,printf(\"\"\\n\"\"))\n    {\n        for(alpha=97;alpha<=122;alpha++)\n        printf(\"\"%c\"\",alpha);\n    }\n   return 0;\n}\"", "9": "\"#include<stdio.h>\nint main()\n{\nunsigned long long int num1,num2,num3;\nint N,itr;\n scanf(\"\"%d\"\",&N);\n num1=num2=1;\n if(N>=1)\n printf(\"\"%llu \"\",num1);\n if(N>=2)\n printf(\"\"%llu \"\",num2);\n for(itr=3;itr<=N;itr++)\n {\n num3=num1+num2;\n printf(\"\"%llu \"\",num3);\n num1=num2;\n num2=num3;\n }\nreturn 0;\n}\"", "10": "\"#include <stdio.h>\nint main()\n{\n long long int input;\n scanf(\"\"%lld\"\",&input);\n for (long long int num=1; num<=input; num++)\n {\nif (num%4==0)\n {\n continue;\n }\n printf(\"\"%lld \"\", num);\n}\n return 0;\n}\n\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_multi_dimensional_1": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\n\tint t;\r\n\tscanf(\"%d\",&t);\r\n\twhile(t)\r\n\t{\r\n\t\tint j,i,n,m,sum=0;\r\n\t\tint num1=0,num2=900005,l=0;\r\n\t\tscanf(\"%d %d\",&n,&m);\r\n\t\tint i1[n*m],j1[n*m],i2,j2;\r\n\t\tint a[n][m];\r\n        for(i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tfor(j=0;j<m;j++)\r\n\t\t\t{\r\n\t\t\t\tscanf(\"%d\",&a[i][j]);\r\n\t\t\t\tif(a[i][j]>=num1)\r\n\t\t\t\t num1=a[i][j];\r\n\t\t\t\tif(a[i][j]<=num2)\r\n\t\t\t\t\tnum2=a[i][j];\r\n\t\t\t}\r\n\t\t}  \r\n\t    for(i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tfor(j=0;j<m;j++)\r\n\t\t\t{\r\n\t\t\t\tif(a[i][j]==num1||a[i][j]==num2)\r\n\t\t\t\t{\r\n\t\t\t\t\ti1[l]=i;\r\n\t\t\t\t\tj1[l]=j;\r\n\t\t\t\t\tl++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(i=0;i<l;i++)\r\n\t\t /*printf(\"%d%d \",i1[i],j1[i]);\r\n\t\t printf(\"\\n\";\r\n\t\t */\r\n\t\tfor(i=0;i<l;i++)\r\n\t\t{\r\n\t\t\ti2=i1[i];\r\n\t\t\tj2=j1[i];\r\n\t\t\tfor(j=0;j<n;j++)\r\n\t\t\t a[j][j2]=-1;\r\n\t\t\tfor(j=0;j<m;j++)\r\n\t\t\t a[i2][j]=-1; \r\n\t\t}\r\n\t\t\r\n\t\tfor(i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tfor(j=0;j<m;j++)\r\n\t\t\t {\r\n\t\t\t\t if(a[i][j]!=-1)\r\n\t\t\t\t sum++;\r\n\t\t\t }\r\n\t\t}\r\n\t\tprintf(\"%d\\n\",sum);\r\n\t\tt--;\r\n\t}\r\n}", "2": "#include<stdio.h>\r\n    int main(){\r\n        int n,m;\r\n        scanf(\"%d %d\",&n,&m);\r\n        int p,q,c=0;\r\n        char str[n+1][m+1];\r\n        for(p=0;p<n;p++){\r\n            scanf(\"%s\\n\",&str[p][0]);\r\n        }\r\n        \r\n        for(p=0;p<n-3;p++){\r\n            for(q=0;q<m-3;q++){\r\n                if(str[p][q]=='s'){\r\n                    if(str[p+1][q+1]=='a'){\r\n                        if(str[p+2][q+2]=='b'){\r\n                            if(str[p+3][q+3]=='a'){\r\n                                c++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(p=0;p<n;p++){\r\n            for(q=0;q<m-3;q++){\r\n                if(str[p][q]=='s'){\r\n                    if(str[p][q+1]=='a'){\r\n                        if(str[p][q+2]=='b'){\r\n                            if(str[p][q+3]=='a'){\r\n                                c++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(p=0;p<n-3;p++){\r\n            for(q=0;q<m;q++){\r\n                if(str[p][q]=='s'){\r\n                    if(str[p+1][q]=='a'){\r\n                        if(str[p+2][q]=='b'){\r\n                            if(str[p+3][q]=='a'){\r\n                                c++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(p=3;p<n;p++){\r\n            for(q=0;q<m-3;q++){\r\n                if(str[p][q]=='s'){\r\n                    if(str[p-1][q+1]=='a'){\r\n                        if(str[p-2][q+2]=='b'){\r\n                            if(str[p-3][q+3]=='a'){\r\n                                c++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        printf(\"%d\",c);\r\n    }", "3": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\nint max(int a,int b)\r\n{\r\n\treturn (a>b)?a:b;\r\n}\r\nint minii(int a,int b)\r\n{\r\n\treturn (a<b)?a:b;\r\n}\r\nmain()\r\n{\r\n\tint matrix[8][3][3]={\r\n\t{{8,1,6},{3,5,7},{4,9,2}},\r\n\t{{6,1,8},{7,5,3},{2,9,4}},\r\n\t{{4,9,2},{3,5,7},{8,1,6}},\r\n\t{{2,9,4},{7,5,3},{6,1,8}},\r\n\t{{8,3,4},{1,5,9},{6,7,2}},\r\n\t{{4,3,8},{9,5,1},{2,7,6}},\r\n\t{{6,7,2},{1,5,9},{8,3,4}},\r\n\t{{2,7,6},{9,5,1},{4,3,8}} };\r\n\tint a[3][3],i,j,k;\r\n\tint cost[8]={0},min=10000;\r\n \r\n \r\n \r\n\tfor(i=0;i<3;i++)\r\n\t{\r\n\t\tfor(j=0;j<3;j++)\r\n\t\t{\r\n\t\t\tscanf(\"%u\",&a[i][j]);\r\n\t\t\tfor(k=0;k<8;k++)\r\n\t\t\t{\r\n\t\t\t\tcost[k]=cost[k]+abs(a[i][j]-matrix[k][i][j]);\r\n \r\n\t\t\t//\tprintf(\"%d %d  \",cost[k],k);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<8;i++)\r\n\t{\r\n\t//\tprintf(\"%d \",cost[i]);\t\r\n\t\tif(cost[i]<min)\r\n\t\t\tmin=cost[i];\r\n\t}\r\n\tprintf(\"%d\",min);\r\n \r\n}", "4": "/*\r\n// Sample code to perform I/O:\r\n \r\nscanf(\"%s\", name);              // Reading input from STDIN\r\nprintf(\"Hi, %s.\\n\", name);      // Writing output to STDOUT\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n int a[2000000][30];\r\nint main(){\r\n\t\r\n\t int n,q,i,temp,y,z;\r\n\t  int cnt,j;\r\n\tchar d;\r\n\tint min=3000000;\r\n\tscanf(\"%d%d\",&n,&q);\r\n\tfor(i=1;i<=n;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&temp);\r\n\tif(a[temp][0]!=0)\r\n\t{\r\n\t\tj=1;\r\n\t\twhile(a[temp][j]!=0)\r\n\t\tj++;\r\n\t\t\r\n\t\ta[temp][j]=i;\r\n\t}\r\n\t\telse\r\n\t\ta[temp][0]=i;\r\n\t}\r\n\twhile(q--){\r\n\t\t\r\n\t\tmin=3000000;\r\n\t\tscanf(\"%d%d%* \",&y,&z);\r\n\t\tscanf(\"%c\",&d);\r\n\t\ty++;\r\n\t\tif(d=='R'){\r\n\t\t\tif(a[z][0]!=0){\r\n\t\t\t\t\r\n\t\t\tj=0;\r\n\t\t\twhile(a[z][j]!=0)\r\n\t\t\r\n{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tcnt=a[z][j]-y;\r\n\t\t\t\tif(cnt<0)\r\n\t\t\t\tcnt+=n;\r\n\t\t\t\tif(min>cnt)\r\n\t\t\t\tmin=cnt;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\tmin=-1;\r\n\t\t}\r\n\t\telse if(d=='L')\r\n{\r\n\tif(a[z][0]!=0){\r\n\t\tj=0;\r\n\t\twhile(a[z][j]!=0){\r\n\t\t\t\r\n\t\t\r\n\t\tcnt=y-a[z][j];\r\n\t\tif(cnt<0)\r\n\t\tcnt+=n;\r\n\t\tif(min>cnt)\r\n\t\tmin=cnt;\r\n\t\tj++;\r\n\t}\r\n\t\r\n\t}\r\n\telse\r\n\tmin=-1;\r\n}\r\n \r\nprintf(\"%d\\n\",min);\r\n\t}\r\n\treturn 0;\r\n}", "5": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n#define MAX(a,b) (((a)>(b))?(a):(b))\r\n \r\n#define D 1000000\r\n \r\n#include <stdio.h>\r\n#include <string.h>\r\n \r\nint main(){\r\n \r\n    int M[D], S[D], hbg;\r\n    size_t t, n, m, x, a, b, top, maxr, max;\r\n \r\n    scanf(\"%zu\", &t);\r\n \r\n    while (t--)\r\n    {\r\n        max = 0;\r\n        scanf(\"%zu%zu\", &n, &m);\r\n        memset(M, 0, m*sizeof(int));\r\n        for (size_t i = 0; i < n; i++)\r\n        {\r\n            top = 0;\r\n            hbg = -1;\r\n            maxr = 0;\r\n            for (size_t j = 0; j < m; j++)\r\n            {\r\n                scanf(\"%zu\", &x);\r\n                M[j] = x ? M[j] + x : 0;\r\n \r\n                if (M[j])\r\n                {\r\n                    if (hbg == -1)\r\n                        hbg = j;\r\n \r\n                    if (top && M[S[top]] > M[j])\r\n                    {\r\n                        do{\r\n                            b = M[S[top]];\r\n                            top--;\r\n                            a = top ? j - S[top] - 1 : j - hbg;\r\n                            x = a < b ? a*a : b*b;\r\n                            maxr = MAX(x, maxr);\r\n                        }\r\n                        while (top && M[S[top]] > M[j]);\r\n                    }\r\n                    S[++top] = j;\r\n                }\r\n                else\r\n                {\r\n                    while (top)\r\n                    {\r\n                        b = M[S[top]];\r\n                        top--;\r\n                        a = top ? j - S[top] - 1 : j - hbg;\r\n                        x = a < b ? a*a : b*b;\r\n                        maxr = MAX(x, maxr);\r\n                    } \r\n                    hbg = -1;                        \r\n                }\r\n            }\r\n            while (top)\r\n            {\r\n                b = M[S[top]];\r\n                top--;\r\n                a = top ? m - S[top] - 1 : m - hbg;\r\n                x = a < b ? a*a : b*b;\r\n                maxr = MAX(x, maxr);\r\n            } \r\n            max = MAX(maxr, max);\r\n        }\r\n        printf(\"%zu\\n\", max);    \r\n    }\r\n}", "6": "#include <stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nint main(){\r\n\tint t;\r\n\tscanf(\"%d\",&t);\r\n\twhile(t--)\r\n\t{\r\n\t\tint n,m;\r\n\t\tscanf(\"%d%d\",&n,&m);\r\n\t\t//printf(\"%d %d\\n\",n,m);\r\n\t\tchar arr[n][m];\r\n\t\tint hi[n][26],count=0;\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t\tfor(int j=0;j<26;j++)\r\n\t\t\t\thi[i][j]=0;\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tscanf(\"\\n\";\r\n\t\t\tfor(int j=0;j<m;j++)\r\n\t\t\t{\r\n\t\t\t\tscanf(\"%c\",&arr[i][j]);\r\n\t\t\t\t//printf(\"%c\",arr[i][j]);\r\n\t\t\t\thi[i][arr[i][j]-'a']++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*for(int i=0;i<n;i++,printf(\"\\n\")\r\n\t\t\tfor(int j=0;j<26;j++)\r\n\t\t\t\tprintf(\"%d \",hi[i][j]);*/\r\n\t\tchar str[n*m];\r\n\t\tscanf(\"%s\",str);\r\n\t\t//printf(\"%s \",str);\r\n\t\t//printf(\"%d \",strlen(str));\r\n\t\tfor(int i=0,abc=0;i<strlen(str);i++,abc++)\r\n\t\t{\r\n\t\t\tif(hi[abc][str[i]-'a']>0)\r\n\t\t\t{\r\n\t\t\t\thi[abc][str[i]-'a']-=1;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tif(abc==n-1)\r\n\t\t\t\tabc=-1;\r\n\t\t}\r\n\t\tif(count==strlen(str))\r\n\t\t\tprintf(\"Yes\\n\";\r\n\t\telse\r\n\t\t\tprintf(\"No\\n\";\r\n\t}\r\n\treturn 0;\r\n}", "7": "#include <stdio.h>\r\nint max(int a, int b) {return a > b ? a : b;}\r\nint min(int a, int b) {return a < b ? a : b;}\r\nint grid[2501][2501], i, j, k, n, m, ans = 2500 * 2500, sum, gsum, x, y;\r\n \r\nint main()\r\n{\r\n    char str[2500];\r\n    scanf(\"%d%d\", &n, &m);\r\n    for(i = 0 ; i < n; i++) {\r\n        scanf(\"%s\", str);\r\n        for(j = 0; j < m; j++) {\r\n            grid[i][j] = str[j] - '0';\r\n        }\r\n    }\r\n    for(i = 0 ; i < n; i++) {\r\n        sum = 0;\r\n        for(j = 0; j < m; j++) {\r\n            sum += grid[i][j];\r\n            grid[i][j] = sum;\r\n            if(i - 1 >= 0)\r\n            grid[i][j] += grid[i - 1][j];\r\n            // printf(\"%d \", grid[i][j]);\r\n        }\r\n        // printf(\"\\n\";\r\n    }\r\n    \r\n    for(i = 2; i <= max(n, m); i++) {\r\n        sum = gsum = 0;\r\n        for(j = 0; j < n; j += i) {\r\n            for(k = 0; k < m; k += i) {\r\n                x = min(j + i - 1, n - 1);\r\n                y = min(k + i - 1, m - 1);\r\n                sum = grid[x][y];\r\n                // printf(\"%d %d %d\\n\", j, k, sum);\r\n                if(j - 1 >= 0 && k - 1 >= 0) sum += grid[j - 1][k - 1];\r\n                if(j - 1 >= 0) sum -= grid[j - 1][y];\r\n                if(k - 1 >= 0) {sum -= grid[x][k - 1];}\r\n                // printf(\"%d %d %d %d %d %d\\n\", j, k, x, y, sum, i*i-sum);\r\n                // if(y != k + i - 1)\r\n                // gsum += i * i - sum;\r\n                // else if(x != j + i - 1)\r\n                // gsum += i * i - sum;\r\n                // else\r\n                //if(j + i - 1 >= n || k + i - 1 >= m) {\r\n                    // printf(\"%d %d %d\\n\", j, k, sum);\r\n                    //gsum += sum;\r\n                //}\r\n                //else\r\n                gsum += min(sum, i * i - sum);\r\n                // printf(\"%d\\n\", gsum);\r\n            }\r\n        }\r\n        // printf(\"%d\\n\", gsum);\r\n        if(gsum < ans) ans = gsum;\r\n    }\r\n    printf(\"%d\", ans);\r\n    return 0;\r\n}", "8": "#include <stdio.h>\r\n \r\nint main(){\r\n\tint a[3][3];\r\n\tfor(int i=0;i<3;i++){\r\n\t\tfor(int j=0; j<3;j++){\r\n\t\t\tscanf(\"%d \", &a[i][j]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tint sum1=0;\r\n\tsum1 = a[0][0] + a[0][2] + a[1][1] + a[2][0] + a[2][2];\r\n\tprintf(\"%d \\n\", sum1);\r\n \r\n\tint sum2=0;\r\n\tsum2 = a[0][1] + a[1][0] + a[1][2] + a[2][1];\r\n\tprintf(\"%d \\n\", sum2);\r\n\t     // Writing output to STDOUT\r\n}", "9": "#include <stdio.h>\r\n    #include <stdlib.h>\r\n    #define SIZE 1001\r\n     \r\n    int main(void){\r\n        int i, j;\r\n        int n, x1, x2, y1, y2, cost = 0;\r\n        long long total_cost = 0;\r\n        int arr[SIZE][SIZE] = {0};\r\n        //let the 2D Array represents the field of Shyam Lal\r\n            scanf(\"%d\", &n);\r\n     \r\n            while(n--){\r\n     \r\n                scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\r\n                scanf(\"%d\", &cost);\r\n     \r\n                for(i = x1; i <= x2; i++){\r\n                    for(j = y1; j <= y2; j++){\r\n                        if(arr[i][j] == 0)\r\n                            arr[i][j] += cost;\r\n     \r\n                        else if(arr[i][j] > 0)\r\n                            arr[i][j] = (-1)*(arr[i][j] + cost);\r\n     \r\n                        else if(arr[i][j] < 0)\r\n                            arr[i][j] = arr[i][j] - cost;\r\n                    }\r\n                }\r\n            }\r\n     \r\n            for(i = 1; i < SIZE; i++){\r\n                for(j = 1; j < SIZE; j++){\r\n                    if(arr[i][j] < 0)\r\n                        total_cost += arr[i][j];\r\n                }\r\n            }\r\n            //Print the absolute value of result(total_cost)\r\n            printf(\"%lld\\n\", (-1) * total_cost);\r\n     \r\n        return 0;\r\n    }", "10": "#include <stdio.h>\r\n \r\nint main()\r\n{\r\n       int N;\r\n\t\tscanf(\"%d\",&N);\r\n        int matrix[N][N];\r\n        for (int i = 0; i <N; i++) {\r\n            for (int j = 0; j <N; j++) {\r\n                scanf(\"%d\",&matrix[i][j]);\r\n            }\r\n        }\r\n \r\n\t\tif(N<10){\r\n            printf(\"-1\";\r\n        }\r\n\t\telse{\r\n\t\t\t if(N==10&&matrix[0][0]==0){\r\n            \t printf(\"-1\";\r\n    \t\t }\r\n         \telse{\r\n        \t\t printf(\"1\";\r\n        \t}\r\n\t\t}\r\n    return 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "adv_multi_dimensional_2": {"1": "#include <stdio.h>\r\n \r\nint main(){\r\n\tint t,n;\r\n\tscanf(\"%d\", &t);\r\n\twhile(t>0)\r\n\t{\r\n\tscanf(\"%d\", &n);    \r\n\tchar a[n][n];\r\n\tint flag=1;\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\t\tscanf(\"%s\", a[i]);\r\n\t\t}\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tfor(int j=0;j<n;j++)\r\n\t\t{\r\n\t\t\tif((a[i][j]!=a[i][n-j-1]) || (a[i][j]!=a[n-i-1][j]))\r\n\t\t\t{\r\n\t\t\t\tflag=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(flag==0)\r\n\tprintf(\"NO\\n\"; \r\n\telse\r\n\tprintf(\"YES\\n\";      \r\n\tt--;\r\n\t}\r\n}", "2": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nll br[20][20];\r\nll sp[20][20];\r\nchar ar[20][20];\r\nll check(ll u, ll v)\r\n{\r\n\tif(ar[u][v]!='R')\r\n\t\treturn 0;\r\n\tfor(int k=0;k<=br[u][v]-1;k++)\r\n\t\tif(sp[u-k][v] || sp[u+k][v] || sp[u][v-k] || sp[u][v+k])\r\n\t\t\treturn 1;\r\n\treturn 0;\r\n}\r\nint main()\r\n{\r\n\tll n,m;\r\n\tcin>>n>>m;\r\n\t\r\n\t/*for(ll i=0;i<=n+1;i++)\r\n\t{\r\n\t\tfor(ll j=0;j<=m+1;j++){\r\n\t\t\r\n\t\tar[i][j]='#';\r\n\t}\r\n}*/\r\n\tfor(ll i=1;i<=n;i++)\r\n\t{\r\n\t\tfor(ll j=1;j<=m;j++)\r\n\t\t{\r\n\t\t\tcin>>ar[i][j];\r\n\t\t}\r\n\t}\r\n\tfor(ll i=1;i<=n;i++)\r\n\t{\r\n\t\tfor(ll j=1;j<=m;j++)\r\n\t\t{\r\n\t\t\tll p=1;\r\n\t\t\tchar val=ar[i][j];\r\n\t\t\tif(val!='R')\r\n\t\t\t\tcontinue;\r\n\t\t\twhile(ar[i-p][j]==val && ar[i+p][j]==val && ar[i][j-p]==val && ar[i][j+p]==val)\r\n\t\t\t\tp++;\r\n\t\t\t\tbr[i][j]=p;\r\n\t\t}\r\n\t}\r\n\tll res=1;\r\n\tfor(ll i=1;i<=n;i++)\r\n\t{\r\n\t\tfor(ll j=1;j<=m;j++)\r\n\t\t{\r\n\t\t\tif(ar[i][j]!='R')\r\n\t\t\t\tcontinue;\r\n\t\t\tfor(ll k=0;k<=br[i][j]-1;k++)\r\n\t\t\t\tsp[i+k][j]=sp[i-k][j]=sp[i][j-k]=sp[i][j+k]=1;\r\n\t\t\tfor(ll u=1;u<=n;u++)\r\n\t\t\t{\r\n\t\t\t\tfor(ll v=1;v<=m;v++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!check(u,v)) \r\n\t\t\t\t\tres = max(res, ((br[i][j]-1)*4+1)*((br[u][v]-1)*4+1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(ll k=0;k<=br[i][j]-1;k++)\r\n\t\t\t\t sp[i+k][j] = sp[i-k][j] = sp[i][j-k] = sp[i][j+k] = 0;\r\n\t\t}\r\n\t}\r\n\tcout<<res<<endl;\r\n \r\n}", "3": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n#include <stdio.h>\r\nvoid swap(int* a, int* b) \r\n{ \r\n    int t = *a; \r\n    *a = *b; \r\n    *b = t; \r\n} \r\n  \r\n/* This function takes last element as pivot, places \r\n   the pivot element at its correct position in sorted \r\n    array, and places all smaller (smaller than pivot) \r\n   to left of pivot and all greater elements to right \r\n   of pivot */\r\nint partition (int arr[], int low, int high) \r\n{ \r\n    int pivot = arr[high];    // pivot \r\n    int i = (low - 1);  // Index of smaller element \r\n  \r\n    for (int j = low; j <= high- 1; j++) \r\n    { \r\n        // If current element is smaller than the pivot \r\n        if (arr[j] < pivot) \r\n        { \r\n            i++;    // increment index of smaller element \r\n            swap(&arr[i], &arr[j]); \r\n        } \r\n    } \r\n    swap(&arr[i + 1], &arr[high]); \r\n    return (i + 1); \r\n} \r\n  \r\n/* The main function that implements QuickSort \r\n arr[] --> Array to be sorted, \r\n  low  --> Starting index, \r\n  high  --> Ending index */\r\nvoid quickSort(int arr[], int low, int high) \r\n{ \r\n    if (low < high) \r\n    { \r\n        /* pi is partitioning index, arr[p] is now \r\n           at right place */\r\n        int pi = partition(arr, low, high); \r\n  \r\n        // Separately sort elements before \r\n        // partition and after partition \r\n        quickSort(arr, low, pi - 1); \r\n        quickSort(arr, pi + 1, high); \r\n    } \r\n} \r\n \r\nint main(){\r\n\tint n,count=0,count1=0,arr[100000],arr1[100000],i,a,b;\r\n\tscanf(\"%d\", &n);\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%d%d\",&a,&b);\r\n\t\tif(a==0)\r\n\t\t{\r\n\t\t\tarr[count]=b;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tarr1[count1]=b;\r\n\t\t\tcount1++;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tquickSort(arr,0,count-1);\r\n\tquickSort(arr1,0,count1-1);\r\n\tfor(i=count-1;i>=0;i--)\r\n\t{\r\n\t\tprintf(\"%d \",arr[i]);\r\n\t}\r\n\tfor(i=count1-1;i>=0;i--)\r\n\t{\r\n\t\tprintf(\"%d \",arr1[i]);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t}", "4": "/*\r\n// Sample code to perform I/O:\r\n#include <stdio.h>\r\n \r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);              \t\t\t// Reading input from STDIN\r\n\tprintf(\"Input number is %d.\\n\", num);       // Writing output to STDOUT\r\n}\r\n \r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n*/\r\n \r\n// Write your code here\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#define pcx putchar_unlocked\r\n#define gcx getchar_unlocked\r\ntypedef long int lint;\r\ntypedef struct {\r\n    int x;\r\n    int y;\r\n    //int p;  // bottom-left done flag\r\n} point_t;\r\n \r\nlint get_lint() { //Positive\r\n\tlint n =0;\r\n\tregister int c = gcx();\r\n\twhile(c<'0' || c>'9') c = gcx();\r\n\twhile(c>='0' && c<='9') {\r\n\t\tn = n * 10 + c-'0';\r\n\t\tc = gcx();\r\n\t}\r\n\treturn n;\r\n}\r\nvoid put_lint (lint li, char lc) {//Negative\r\n\tif (0 == li) {\r\n\t\tpcx('0'); pcx(lc); return;\r\n\t} else if (li < 0) {\r\n\t\tpcx ('-'); li *= -1;\r\n\t}\r\n\tchar s[24];\r\n\tauto idx =0;\r\n\tfor (; li; idx++) {\r\n\t\ts[idx] = '0' + li % 10;\r\n\t\tli /= 10;\r\n\t}\r\n\tfor (auto jdx=idx-1; jdx>=0; jdx--)\r\n\t\tpcx(s[jdx]);\r\n\tif(lc) pcx(lc);\r\n\treturn;\r\n}\r\n \r\nint cmp(const void *p, const void *q) { //ASC Structure\r\n    point_t *a = *(point_t**)p;\r\n    point_t *b = *(point_t**)q;\r\n    if (a->x != b->x)\r\n        return (a->x > b->x);\r\n    else\r\n        return (a->y > b->y);\r\n}\r\n//modified version of binary-search\r\nbool isPoint (point_t *pa[], lint r, int x, int y) {\r\n    lint l = 0;\r\n    lint m;\r\n\twhile (l <= r) {\r\n\t\tm = (l + r)/2;\r\n\t\tif (pa[m]->x == x) {\r\n\t\t    if (pa[m]->y == y) return true;\r\n\t\t    lint mc = m;\r\n\t\t    do {\r\n\t\t        if (pa[mc]->y == y) return true;\r\n    \t\t    if (pa[mc]->y < y) {\r\n    \t\t        if (mc >= m) mc++;\r\n    \t\t        else return false;\r\n    \t\t    } else {\r\n    \t\t        if (mc <= y) mc--;\r\n    \t\t        else return false;\r\n    \t\t    }\r\n\t\t    } while (pa[mc]->x ==x);\r\n\t\t}\r\n\t\tif (pa[m]->x < x)\r\n\t\t\tl = m + 1;\r\n\t\telse\r\n\t\t\tr = m - 1;\r\n\t}\r\n\treturn false;\r\n}\r\n \r\n \r\nint main () {\r\n\tlint N = get_lint();\r\n    point_t *pList = (point_t *) malloc (sizeof(point_t) * N);\r\n    point_t *pA[N];\r\n    for (auto pi=0; pi<N; pi++) {\r\n        pList[pi].x = get_lint();\r\n        pList[pi].y = get_lint();\r\n        pA[pi] = pList + pi;\r\n    }\r\n    qsort (pA, N, sizeof(point_t*, cmp);\r\n    \r\n    lint maxLen =-1, maxLi =-1;\r\n    for (auto pi=0; pi<N-1; pi++) {\r\n        if (pA[pi]->x != pA[pi+1]->x)\r\n            continue;\r\n        lint lsLen = pA[pi+1]->y - pA[pi]->y;\r\n        if (   isPoint(pA, N-1, pA[pi]->x +lsLen, pA[pi]->y) &&\r\n                isPoint(pA, N-1, pA[pi+1]->x +lsLen, pA[pi+1]->y)) {\r\n            if (lsLen > maxLen) {\r\n                maxLen = lsLen; // left-side length;\r\n                maxLi = pi;\r\n            }        \r\n        }\r\n    }\r\n    if (maxLen > 0) {\r\n        put_lint(pA[maxLi]->x, ' ');\r\n        put_lint(pA[maxLi]->y, 0);\r\n    } else\r\n        put_lint(-1, 0);\r\n        \r\n\treturn 0;\r\n}", "5": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#define pcx putchar_unlocked\r\n#define gcx getchar_unlocked\r\ntypedef long int lint;\r\n \r\nlint get_lint() { //Negative\r\n\tlint n =0;\r\n    auto neg =0;\r\n\tregister int c = gcx();\r\n\tif ('-' == c) { neg =1; c = gcx(); }\r\n\twhile(c<'0' || c>'9') c = gcx();\r\n\twhile(c>='0' && c<='9') {\r\n\t\tn = n * 10 + c-'0';\r\n\t\tc = gcx();\r\n\t}\r\n\tif(neg) n *= -1;\r\n\treturn n;\r\n}\r\nvoid put_lint (lint li, char lc) {//Negative\r\n\tif (0 == li) {\r\n\t\tpcx('0'); pcx(lc); return;\r\n\t} else if (li < 0) {\r\n\t\tpcx ('-'); li *= -1;\r\n\t}\r\n\tchar s[24];\r\n\tauto idx =0;\r\n\tfor (; li; idx++) {\r\n\t\ts[idx] = '0' + li % 10;\r\n\t\tli /= 10;\r\n\t}\r\n\tfor (auto jdx=idx-1; jdx>=0; jdx--)\r\n\t\tpcx(s[jdx]);\r\n\tif(lc) pcx(lc);\r\n\treturn;\r\n}\r\nlint NA[1000][1000];\r\nlint MA[1001][1001];\r\nint main() {\r\n    lint N = get_lint();\r\n    lint M = get_lint();\r\n    lint K = get_lint();\r\n\t\r\n\tfor(int i = 0; i < N; i++) {\r\n\t\tfor(int j = 0; j < M; j++)\r\n\t\t\tNA[i][j] = get_lint();\r\n\t}\r\n\tfor (int i=0; i<=N; i++)\r\n\t    for (int j=0; j<=M; j++)\r\n\t        MA[i][j] = 0;\r\n\t\r\n\twhile(K--) {\r\n\t    lint R = get_lint(); R--;\r\n\t    lint C = get_lint(); C--;\r\n\t    lint S = get_lint();\r\n\t    lint D = get_lint();\r\n\t\tMA[R][C]    += D;\r\n\t\tMA[R][C+S]  -= D;\r\n\t\tMA[R+S][C]  -= D;\r\n        MA[R+S][C+S] +=D;\r\n\t}\r\n\tfor(int i = N; i > 0; i--) {\r\n\t\tfor(int j = M; j > 0; j--) {\r\n\t\t\tNA [i-1][j-1] += MA[i][j];\r\n\t\t\tMA [i-1][j]   += MA[i][j];\r\n\t\t\tMA [i]  [j-1] += MA[i][j];\r\n\t\t\tMA [i-1][j-1] -= MA[i][j];\r\n\t\t}\r\n\t}\r\n\tfor(int i = 0; i < N; i++) {\r\n\t\tfor(int j = 0; j < M; j++)\r\n\t\t\tput_lint(NA[i][j], ' ');\r\n\t\tpcx('\\n');\r\n\t}\r\n\treturn 0;\r\n}", "6": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <math.h>\r\n \r\n#define MIN(a,b) (((a)<(b))?(a):(b))\r\n#define MAX(a,b) (((a)>(b))?(a):(b))\r\n \r\n#define MA 1000000000000000000 // 1e18\r\n#define M  1000000007\r\n#define MM 2000000000\r\n#define N  100001\r\n#define K  101\r\n \r\ntypedef long long ll;\r\ntypedef long double ld;\r\n \r\nll n,m;\r\nll a[N];\r\nll s[N];\r\n \r\nint main() {\r\n  ll t;\r\n  ll i,j,k,q,c,d,l,r,x;\r\n  ll sx,sy, dx,dy;\r\n  t=1;\r\n  scanf(\"%lld \", &t);\r\n \r\n  while(t--) {\r\n    scanf(\"%lld %lld\", &n, &m);\r\n    scanf(\"%lld %lld\", &sy, &sx);\r\n    scanf(\"%lld %lld\", &dy, &dx);\r\n \r\n    if (sy==1) {\r\n      if (sx==1) {\r\n        if ((dy-sy)%2==0) { // right or down or over\r\n          if (dx<m) puts(\"Right\";\r\n          else if (dy<n) puts(\"Back\";\r\n          else puts(\"Over\";\r\n        } else { // left or down or over\r\n          if (dx>1) puts(\"Left\";\r\n          else if (dy<n) puts(\"Back\";\r\n          else puts(\"Over\";\r\n        }\r\n      } else {\r\n        if ((dy-sy)%2==0) { // left or down or over\r\n          if (dx>1) puts(\"Left\";\r\n          else if (dy<n) puts(\"Back\";\r\n          else puts(\"Over\";\r\n        } else { // right or down or over\r\n          if (dx<m) puts(\"Right\";\r\n          else if (dy<n) puts(\"Back\";\r\n          else puts(\"Over\";\r\n        }\r\n      }\r\n    } else {\r\n      if (sx==1) {\r\n        if ((dy-sy)%2==0) { // right or up or over\r\n          if (dx<m) puts(\"Right\";\r\n          else if (dy>1) puts(\"Front\";\r\n          else puts(\"Over\";\r\n        } else { // left or up or over\r\n          if (dx>1) puts(\"Left\";\r\n          else if (dy>1) puts(\"Front\";\r\n          else puts(\"Over\";\r\n        }\r\n      } else {\r\n        if ((dy-sy)%2==0) { // left or up or over\r\n          if (dx>1) puts(\"Left\";\r\n          else if (dy>1) puts(\"Front\";\r\n          else puts(\"Over\";\r\n        } else { // right or up or over\r\n          if (dx<m) puts(\"Right\";\r\n          else if (dy>1) puts(\"Front\";\r\n          else puts(\"Over\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "7": "#include <stdio.h>\r\n    #include <stdlib.h>\r\n     \r\n    #define N 1000000\r\n     \r\n    // didn't have a better name for the diagonals D:\r\n    int diag_bltr[2 * N];\r\n    int diag_tlbr[2 * N];\r\n     \r\n    int count()\r\n    {\r\n        int i;\r\n        int count;\r\n        for ( i = 0; i <  (2 * N); ++i) {\r\n            \r\n            if ( diag_bltr[i] > 0 ) {\r\n                count += diag_bltr[i] * (diag_bltr[i] - 1) / 2;\r\n            }\r\n            if ( diag_tlbr[i] > 0 ) {\r\n                count += diag_tlbr[i] * (diag_tlbr[i] - 1) / 2;\r\n            }\r\n            \r\n        }\r\n        return count;\r\n    }\r\n     \r\n    void process(int x, int y)\r\n    {\r\n        // the bottom left to top right diagonal\r\n        diag_bltr[x + y -1]++;\r\n        diag_tlbr[(x - y) + (N -1)]++;\r\n    }\r\n     \r\n    int main()\r\n    {\r\n        \r\n        int test_cases;\r\n        scanf(\"%d\", &test_cases);\r\n        \r\n        while ( test_cases-- ) {\r\n            \r\n            int cells;\r\n            \r\n            // empty our mapping\r\n            memset(diag_tlbr, 0, sizeof(int) * N * 2);\r\n            memset(diag_bltr, 0, sizeof(int) * N * 2);\r\n            \r\n            scanf(\"%d\", &cells);\r\n            while ( cells-- ) {\r\n                \r\n                int x, y;\r\n                scanf(\"%d %d\", &x, &y);\r\n                process(x, y);\r\n            }\r\n            printf(\"%d\\n\", count());\r\n            \r\n        }\r\n        return 0;\r\n    }", "8": "", "9": "", "10": "", "11": "", "12": ""}, "Number_Based_Problem_Level_0": {"1": "#include<stdio.h>\nint main(){\n    long long int num,count=0;\n    scanf(\"%lld\",&num);\n    for(long long int check_factor=1;check_factor<=num/2;check_factor++){\n        if(num%check_factor==0)\n            count++;\n    }\n    printf(\"%lld\",count+1);\n    return 0;\n}", "2": "#include<stdio.h>\nint main(){\n    long long int num;\n    scanf(\"%lld\",&num);\n    for(long long int factor=1;factor<=num/2;factor++){\n        if(num%factor==0)\n            printf(\"%lld,\",factor);\n    }\n    printf(\"%lld\",num);\n    return 0;\n}", "3": "#include<stdio.h>\nint main(){\n    long long int num,ans=0;\n    scanf(\"%lld\",&num);\n    for(long long int check_factor=1;check_factor<=num;check_factor++){\n        if(num%check_factor==0)\n            ans+=check_factor;\n    }\n    printf(\"%lld\",ans);\n  return 0;\n    \n}", "4": "#include<stdio.h>\r\nint main(){\r\n    long long int num,ans=0;\r\n    scanf(\"%lld\",&num);\r\n    for(long long int check_factor=1;check_factor<=num/2;check_factor++){\r\n        if(num%check_factor==0){\r\n            ans+=check_factor;\r\n        }\r\n    }\r\n     if(ans==num){\r\n            printf(\"Perfect Number\");\r\n    }\r\n    else{\r\n        printf(\"Not a Perfect Number\");\r\n    }\r\n  return 0;\r\n}", "5": "#include<stdio.h> \nint main() \n{ \n    long long int num,check_factor=1,sum=0;\n    scanf(\"%lld\",&num);\n    for(;check_factor<=num/2;check_factor++) \n    (num%check_factor==0)?sum+=check_factor:sum;\n    (sum == num)?printf(\"Perfect Number\"):\n    (sum  > num)?printf(\"Abundant Number\"):\n                 printf(\"Deficient Number\");\n return 0;\n}", "6": "\"#include<stdio.h>\nint main(){\n    long long int num1,num2,div1=0,div2=0;\n    scanf(\"\"%lld%lld\"\",&num1,&num2);\n    \n    for(int check_factor=1;check_factor<num1;check_factor++){\n        if(num1%check_factor==0){\n            div1+=check_factor;\n        }\n    }\n    \n    for(int check_factor=1;check_factor<num2;check_factor++){\n        if(num2%check_factor==0){\n            div2+=check_factor;\n        }\n    }\n    \n     if((num1==div2) && (num2==div1)){\n            printf(\"\"Amicable Pair\"\");\n    }\n    else{\n        printf(\"\"Not an Amicable Pair\"\");\n    }\n    \n    return 0;\n}\"", "7": "\"#include<stdio.h>\nint main(){ \n  long long int num1,num2,sum1=0,sum2=0,check_factor;\n  scanf(\"\"%lld %lld\"\",&num1,&num2);\n  for(check_factor=1;check_factor<=num1/2;check_factor++) \n  { \n    if(num1%check_factor==0) \n      sum1+=check_factor;\n  } \n  for(check_factor=1;check_factor<=num2/2;check_factor++) \n  { if(num2%check_factor==0) \n    sum2+=check_factor; \n  } if(sum1-1==num2 && sum2-1==num1) \n    printf(\"\"Betrothed Number\"\");\n  else \n    printf(\"\"Not a Betrothed Number\"\");\n  return 0;\n}\"", "8": "\"#include<stdio.h>\nint main()\n{\n   long long int input,check_factor;\n   scanf(\"\"%lld\"\",&input);\n           for (check_factor = 1; check_factor * check_factor <= input; check_factor++)\n                if (input % check_factor == 0)\n                   printf(\"\"%lld * %lld\\n\"\",check_factor,input/check_factor);\nreturn 0;\n   \n}\n\"", "9": "\"#include <stdio.h>\n\nint main()\n{\n   long long int num1,num2, max, step, lcm;\n\n   scanf(\"\"%lld%lld\"\",&num1,&num2);\n\n   if(num1>num2)\n      max = step = num1;\n   else\n      max = step = num2;\n\n   while(1) {\n      if(max%num1 == 0 && max%num2 == 0) {\n         lcm = max;\n         break;    \n      }\n\n      max += step;\n   }\n\n   printf(\"\"%lld\"\", lcm);\n    \n    return 0;\n}\n\"", "10": "#include <stdio.h>\r\nint main()\r\n{\r\n    int Num1, Num2, fact, GCD,small;\r\n    scanf(\"%d %d\", &Num1, &Num2);\r\n    small = (Num1<Num2)?Num1:Num2;\r\n    for(fact=1; fact<=small; fact++)\r\n      if(Num1%fact==0 && Num2%fact==0)\r\n        GCD = fact;\r\n    printf(\"%d\",GCD);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Based_Problem_Level_1": {"1": "#include<stdio.h>\nint main(){\n    long long int num,flag=0;\n    scanf(\"%lld\",&num);\n    for(long long int check_factor=2;check_factor<=num/2;check_factor++){\n       \n            if(num%check_factor==0){\n                flag=1;\n                break;\n            }\n    }\n     if(flag==0 || num==1){\n            printf(\"Prime Number\");\n    }\n    else{\n        printf(\"Not a Prime Number\");\n    }\n    return 0;\n    \n}", "2": "#include<stdio.h>\nint main(){\n    long long int num,divisor=2,count=0;\n    scanf(\"%lld\",&num);\n    while(num!=1)\n    {\n       if(num%divisor==0)\n       {  \n           count++;\n           num=num/divisor;\n         \n       }\n        else\n        { \n           if(count>0)  \n            printf(\"%lld -> %lld\\n\",divisor,count);\n            divisor++;\n            count=0;\n        }\n        \n    }\n    printf(\"%lld -> %lld\",divisor,count);\n    return 0;\n}", "3": "#include<stdio.h>\nint main(){\n    long long int num,divisor=2,count=0;\n    scanf(\"%lld\",&num);\n    while(num!=1)\n    {\n       if(num%divisor==0)\n       {  \n           count++;\n           if(count==1)\n           printf(\"%lld\",divisor);\n           else \n           printf(\"*%lld\",divisor);\n           num=num/divisor;\n       }\n        else\n        {\n            divisor++;\n        }\n        \n    }\n    return 0;\n}", "4": "#include<stdio.h>  \r\nint main()  \r\n{  \r\n    int num; \r\n    scanf(\"%d\", &num);  \r\n     int count;  \r\n    for(count = 2; num > 1; count++)  \r\n    {  \r\n        while(num % count == 0)  \r\n        {  \r\n            num = num / count;  \r\n        }  \r\n    }  \r\n    printf(\"%d\",count-1);\r\n  \r\n    return 0;  \r\n} ", "5": "#include<stdio.h>  \r\nint main()  \r\n{  \r\n    long long int num; \r\n    scanf(\"%lld\",&num);  \r\n     int count=2;  \r\n    while(num!= 0)  \r\n        {   \r\n            if(num%count==0)\r\n            {\r\n            num = num / count;  \r\n            break;\r\n            }\r\n            count++;\r\n        }  \r\n    printf(\"%d\",count);\r\n  \r\n} ", "6": "#include<stdio.h>\r\nint main(){\r\n    long long int num,divisor=2,count=0,factor_count=0;\r\n    scanf(\"%lld\",&num);\r\n    while(num!=1)\r\n    {\r\n       if(num%divisor==0)\r\n       {  \r\n           count++;\r\n           num=num/divisor;\r\n         \r\n       }\r\n        else\r\n        {\r\n           if(count==1)  \r\n             factor_count++;\r\n            divisor++;\r\n            count=0;\r\n        }\r\n       \r\n    }\r\n      factor_count++;\r\n      if(factor_count%2==1)\r\n        printf(\"Odd\");\r\n      else \r\n        printf(\"Even\");\r\n    return 0;\r\n}", "7": "#include<stdio.h>\nint main(){\n    long long int number1,number2,gcd,lcm,itr;\n    scanf(\"%lld %lld %lld\",&number1,&number2,&gcd);\n    lcm=(number1*number2)/gcd;\n    for(itr=lcm;itr>=1;itr--)\n    {\n        if(lcm%itr==0)\n           printf(\"%lld \",itr);\n    }    \n    return 0;\n}", "8": "#include<stdio.h>\nint main(){\n    long long int number,kvalue,index,count=0;\n    scanf(\"%lld %lld\",&number,&kvalue);\n    for(index=number;index>=1;index--)\n    {   \n        if(number%index==0)\n        {\n            count++;\n            if(count==kvalue)\n            {\n                printf(\"%lld\",index);\n                break;\n            }\n        }\n      }\n   return 0;\n}", "9": "#include<stdio.h>\n#include<math.h>\nint main()\n{\nint num,itr,sum=0;\n scanf(\"%d\",&num);\n for(itr=1;itr<=num;itr++)\n if(num%itr==0)\n sum=sum+itr;\n if(sum==3*num)\n printf(\"Tri Perfect Number\");\n else\n printf(\"Not a Tri Perfect Number\");\n return 0;\n}", "10": "#include<stdio.h>\r\nint main(){\r\n    long long int number1,number2,ans=0,check_factor,itr,count=0;\r\n    scanf(\"%lld %lld\",&number1,&number2);\r\n    for(itr=number1;itr<=number2;itr++)\r\n    { \r\n        ans=0;\r\n    for(check_factor=1;check_factor<itr;check_factor++){\r\n        if(itr%check_factor==0){\r\n            ans+=check_factor;\r\n        }\r\n    }\r\n     if(ans==itr){\r\n            count++;\r\n            printf(\"%lld \",itr);\r\n    \r\n     }\r\n   }\r\n   if(count==0)\r\n     printf(\"No\");\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Based_Problem_Level_2": {"1": "#include<stdio.h>\r\nlong long int isPrime(long long int num)\r\n{\r\n if(num==1)\r\n return 0;\r\n if(num%2==0 && num!=2)\r\n return 0;\r\n for(long long int factor=3;factor*factor<=num;factor=factor+2)\r\n {\r\n if(num%factor==0)\r\n return 0;\r\n }\r\n return 1;\r\n}\r\nint main()\r\n{\r\n long long int num,num1,count=0,itr,ctr;\r\n scanf(\"%lld %lld\",&num,&num1);\r\n for(itr=num;itr<=num1;itr++)\r\n if(isPrime(itr))\r\n break;\r\n for(ctr=num1;ctr>=num;ctr--)\r\n if(isPrime(ctr))\r\n break;\r\n if(itr>num1||ctr<num);\r\n else\r\n printf(\"%lld\",ctr-itr);\r\n return 0;\r\n}\"", "2": "#include<stdio.h>\nint main()\n{\n int st,end,count=0,check_factor,max_count=0,res;\n scanf(\"%d %d\",&st,&end);\n for(int num=st;num<=end;num++)\n {\n count=0;\n for(check_factor=1;check_factor<=num;check_factor++)\n {\n if(num%check_factor==0)\n {\n count++;\n }\n }\n if(max_count<count)\n {\n max_count=count;\n res=num;\n }\n }\n printf(\"%d\",res);\n return 0;\n}\n\"", "3": "#include<stdio.h>\r\nint main() \r\n{\r\n    long long int st,end,num,check_factor,sum1=0,sum2=0;\r\n    scanf(\"%d %d\",&st,&end);\r\n    for(num=st;num<=end;num++) \r\n    {\r\n        sum1=0;\r\n        sum2=0;\r\n        for(check_factor=1;check_factor<=num/2;check_factor++){\r\n            if(num%check_factor==0){\r\n                sum1+=check_factor;\r\n            }\r\n        }\r\n        sum1--;\r\n        if(num>=sum1)\r\n        continue;\r\n        for(check_factor=1;check_factor<=sum1/2;check_factor++){\r\n            if(sum1%check_factor==0){\r\n                sum2+=check_factor;\r\n            }\r\n        }\r\n        sum2--;\r\n        if(sum2==num){\r\n        printf(\"%d,%d\\n\",num,sum1);\r\n    }   \r\n        \r\n    }\r\nreturn 0;\r\n}\"", "4": "#include<stdio.h> \r\nint main() \r\n{\r\n    long long int st,end,num,check_factor;\r\n    scanf(\"%d %d\",&st,&end);\r\n    for(num=st;num<=end;num++) \r\n    { \r\n        int sum=0,sum1=0;\r\n        for(check_factor=1;check_factor<=num/2;check_factor++) \r\n        { \r\n            if(num%check_factor==0) \r\n            sum+=check_factor; \r\n        } \r\n        if(sum<=num) \r\n        continue;\r\n        for(check_factor=1;check_factor<=sum/2;check_factor++) \r\n        {\r\n            if(sum%check_factor==0) \r\n            sum1+=check_factor; \r\n        } \r\n        if(sum1==num)\r\n        printf(\"%d %d\\n\",num,sum);\r\n        } \r\n    return 0;\r\n}", "5": "#include<stdio.h>\r\nint main() \r\n{\r\n    long long int num1,num2,gen_num,check_factor,flag=0;\r\n    scanf(\"%lld %lld\",&num1,&num2);\r\n    for(gen_num=num1;gen_num<=num2;gen_num++) \r\n    { \r\n        if(gen_num==1)\r\n        continue;\r\n        int no_of_factors=0; \r\n        for(check_factor=2;check_factor*check_factor<=gen_num;check_factor++) \r\n        {\r\n            if(gen_num%check_factor==0)\r\n            { \r\n                no_of_factors++;\r\n                break;\r\n            }\r\n        }\r\n        if(no_of_factors==0)\r\n        {\r\n            if(flag==0)\r\n            {\r\n                printf(\"%lld\",gen_num);\r\n                flag=1;\r\n            }\r\n            else\r\n            printf(\", %lld\",gen_num);\r\n        }\r\n    }\r\n    return 0;\r\n}", "6": "#include<stdio.h>\nint main(){\n    long long int num,divisor=2,count=0,flag=0;\n    scanf(\"%lld\",&num);\n    while(num!=1)\n    {\n       if(num%divisor==0)\n       {  \n           count++;\n           num=num/divisor;\n         \n       }\n        else\n        { \n           if(count>1) \n           {\n              flag=1;\n              break;\n           }\n            divisor++;\n            count=0;\n        }\n        \n    }\n   if(flag==0) \n     printf(\"Square free\");\n  else \n    printf(\"Not Square free\");\n    return 0;\n}", "7": "#include<stdio.h>\nint main(){\n     \n    long long int lcm,gcd,itr1,itr2,find_lcm,find_gcd,count=0;\n     scanf(\"%lld %lld\",&gcd,&lcm);  \n     for(itr1=1;itr1<=lcm;itr1++)\n     {\n         for(itr2=1;itr2<=lcm;itr2++)\n         {\n             if(lcm%itr2==0 && itr2%gcd==0 && itr1%gcd==0 && lcm%itr1==0)\n               {\n                   for(find_lcm=itr1;find_lcm%itr2!=0;find_lcm=find_lcm+itr1);\n                   find_gcd=(itr1*itr2)/find_lcm;\n                   if(find_lcm==lcm && find_gcd==gcd)\n                       count++;\n               }\n         }\n     }\n    printf(\"%lld\",count);\n}", "8": "#include<stdio.h>\n\nint isprime(int inp){\n    for(int check_factor=2;check_factor<=inp/2;check_factor++){\n        if(inp%check_factor==0){\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main(){\n    int num,n;\n    scanf(\"%d%d\",&num,&n);\n    for(int val=1;val<=num/2;val++){\n        if(isprime(val) && val>n && num%val==0){\n            printf(\"Not a Smooth Number\");\n            return 0;\n        }\n    }\n    if(num%n==0)\n    printf(\"Smooth Number\");\n    else\n    printf(\"Not a Smooth Number\");\n    return 0;\n}", "9": "#include<stdio.h>\n\nint main()\n{\nlong long int number,flag=0;\n  scanf(\"%lld\",&number);\n       while (number!= 1) \n       {  \n            if (number % 5 == 0) \n            {  \n                number /= 5;  \n            } \n            else if (number % 3 == 0) \n            {  \n                number /= 3;  \n            } \n            else if (number % 2 == 0) \n            {  \n                number /= 2;  \n            } \n            else \n            {  \n                printf(\"NO\"); \n                flag = 1;  \n                break;  \n            }  \n        } \n                        if (flag==0)\n                        { \n                printf(\"YES\");\n                }\nreturn 0;\n}", "10": "#include <stdio.h>\r\nint main()\r\n{\r\nlong long int number,flag=0,index,number1,number2;\r\n  scanf(\"%lld %lld\",&number1,&number2);\r\n  for(index=number1;index<=number2;index++)\r\n  {  \r\n      number=index;\r\n      flag=0;\r\n       while (number!= 1) \r\n       {  \r\n            if (number % 5 == 0) \r\n            {  \r\n                number /= 5;  \r\n            } \r\n            else if (number % 3 == 0) \r\n            {  \r\n                number /= 3;  \r\n            } \r\n            else if (number % 2 == 0) \r\n            {  \r\n                number /= 2;  \r\n            } \r\n            else \r\n            {  \r\n                flag = 1;  \r\n                break;\r\n            }  \r\n        } \r\n                        if (flag==0)\r\n                        { \r\n                       printf(\"%lld \",index);\r\n                }\r\n  }\r\nreturn 0;\r\n}\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Crunching_Level_0": {"1": "#include <stdio.h>\r\nint main() {\r\n    long long int temp;\r\n    scanf(\"%lld\",&temp);\r\n    while(temp!=0){\r\n        printf(\"%lld \",temp%10);\r\n        temp/=10;\r\n    }\r\n    return 0;\r\n}\r\n", "2": "#include <stdio.h>\r\nint main() {\r\n    long long int count=0,temp;\r\n    scanf(\"%lld\",&temp);\r\n    while(temp!=0){\r\n        count++;\r\n        temp/=10;\r\n    }\r\n    printf(\"%lld\",count);\r\n    return 0;\r\n}\r\n", "3": "#include <stdio.h>\r\nint main() {\r\n    long long int ans=1,temp;\r\n    scanf(\"%lld\",&temp);\r\n    while(temp!=0){\r\n        ans*=temp%10;\r\n        temp/=10;\r\n    }\r\n    printf(\"%lld\",ans);\r\n    return 0;\r\n}\r\n", "4": "#include <stdio.h>\r\nint main() {\r\n    long long int count=0,temp,num;\r\n    scanf(\"%lld %lld\",&temp,&num);\r\n    while(temp!=0){\r\n        if((temp%10)==num)\r\n        count++;\r\n        temp/=10;\r\n    }\r\n    printf(\"%lld\",count);\r\n   return 0;\r\n}", "5": "#include <stdio.h>\r\nint main()\r\n{\r\n    int num,copy,sod=0;\r\n    scanf(\"%d\",&num);\r\n    copy=num;\r\n    while(num!=0)\r\n    {\r\n    sod=num%10+sod;\r\n    num=num/10;\r\n    }\r\n   num=copy;\r\n   if(num%sod==0)\r\n   printf(\"Yes\");\r\n   else\r\n   printf(\"No\");\r\n  return 0;\r\n}", "6": "#include<stdio.h> \r\n    int isDivisible(long long int num) \r\n    { \r\n        long long int digit ,   power = 1,prod = 1, sum = 0;\r\n        while(num / power) {\r\n            digit = (num / power) % 100;\r\n            sum += digit % 10;\r\n            if(digit >= 10){\r\n                prod *= (digit / 10);\r\n            }\r\n            power *= 100;\r\n        }\r\n        return (prod % sum == 0) ? 1 : 0; \r\n        \r\n    } \r\n    int main() { \r\n        long long int num ;\r\n        scanf(\"%lld\" , &num);\r\n        if( isDivisible(num))\r\n        printf(\"YES\");\r\n        else \r\n        printf(\"NO\");\r\n        return 0;\r\n    }", "7": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,max=0,digit;\r\n scanf(\"%lld\",&num);\r\n while(num)\r\n {\r\n digit=num%10;\r\n if(digit>max)\r\n max=digit;\r\n num/=10;\r\n }\r\nprintf(\"%lld\",max);\r\n return 0;\r\n}\r\n", "8": "#include <stdio.h>\r\nint main() {\r\n    long long int ans=0,input,dig;\r\n    scanf(\"%lld\",&input);\r\n    while(input!=0)\r\n    {\r\n       dig=input%10;\r\n       ans=ans*10+dig;\r\n       input=input/10;\r\n    \r\n    }\r\n    while(ans!=0)\r\n    {\r\n       dig=ans%10;\r\n       if(dig==2||dig==3||dig==5||dig==7)\r\n         printf(\"%lld \",dig);\r\n      ans=ans/10;\r\n    \r\n    }\r\n}\r\n", "9": "#include<stdio.h>\r\n\r\nint main(){\r\n    long long int num,rev=0,flag=0,rem;\r\n    scanf(\"%lld\",&num);\r\n    long long int temp=num;\r\n    while(temp!=0){\r\n        rev = rev*10 + temp%10;\r\n        temp/=10;\r\n    }\r\n    while(rev!=0){\r\n        rem = rev%10;\r\n        if(num%rem==0){\r\n            printf(\"%lld\",rem); flag=1;\r\n            break;\r\n        }\r\n        rev/=10;\r\n    }\r\n    \r\n    if(flag==0){\r\n        printf(\"-1\");\r\n    }\r\n    return 0;\r\n}", "10": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,power=1,digit;\r\n scanf(\"%lld\",&num);\r\n while(num/power)\r\n power*=10;\r\npower/=10;\r\n while(power)\r\n {\r\n digit=(num/power)%10;\r\n if(digit%2)\r\n printf(\"%lld-Odd\\n\",digit);\r\n else\r\n printf(\"%lld-Even\\n\",digit);\r\n power/=10;\r\n }\r\nreturn 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Crunching_Level_1": {"1": "#include<stdio.h>\r\nint main()//entry point\r\n{\r\n long long int input;\r\n scanf(\"%lld\",&input);\r\n int no_of_digits=0;\r\n long long int power=1;\r\n while(input/power)\r\n {\r\n    no_of_digits+=1;\r\n    power*=10;\r\n }\r\n long long int left_power;\r\n long long int right_power;\r\n int ctr;\r\n int left_digit;\r\n int right_digit;\r\n int sum=0;\r\n int diff;\r\n left_power=power/10;\r\n right_power=1;\r\n for(ctr=1;ctr<=no_of_digits/2;ctr+=1)\r\n {\r\n     left_digit=(input/left_power)%10;\r\n     right_digit=(input/right_power)%10;\r\n     left_power/=10;\r\n     right_power*=10;\r\n     diff=abs(left_digit-right_digit);\r\n     sum+=diff;\r\n }\r\n if(no_of_digits%2==1)\r\n {\r\n     sum=sum+(input/left_power)%10;\r\n }\r\n printf(\"%d\",sum);\r\n  return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n\r\nint main(){\r\n    \r\n    long long int num,counter[10]={0};\r\n    scanf(\"%lld\",&num);\r\n    while(num!=0){\r\n        counter[num%10]++;\r\n        num/=10;\r\n    }\r\n    for(int digit=0;digit<10;digit++){\r\n        printf(\"%lld occurs %lld times\\n\",digit,counter[digit]);\r\n    }\r\n    return 0;\r\n}", "3": "#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\nlong long int num1,num2,digit,sum1=0,sum2=0;\r\n scanf(\"%lld%lld\",&num1,&num2);\r\n while(num1)\r\n {\r\n digit=num1%10;\r\n sum1=sum1+pow(10,digit);\r\n num1/=10;\r\n }\r\n while(num2)\r\n {\r\n digit=num2%10;\r\n sum2=sum2+pow(10,digit);\r\n num2/=10;\r\n }\r\n if(sum1==sum2)\r\n printf(\"Anagram\");\r\n else\r\n printf(\"Not\");\r\n\r\n return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nint main(){\r\n    long long int num,fact=1,sum=0,temp;\r\n    scanf(\"%lld\",&num);\r\n    temp=num;\r\n    while(num!=0){\r\n        for(int check_factor=1;check_factor<=num%10;check_factor++){\r\n            fact*=check_factor;\r\n        }\r\n        sum+=fact;\r\n        fact=1;\r\n        num/=10;\r\n    }\r\n    (temp==sum)?printf(\"Strong Number\"):printf(\"Not a strong number\");\r\n    return 0;\r\n}", "5": "#include <stdio.h>\r\nint main() {\r\n    int num, originalNum, remainder, ans = 0,count=0,power=1,itr;\r\n    scanf(\"%d\", &num);\r\n    originalNum = num;\r\n    while(num!=0)\r\n    {\r\n        num=num/10;\r\n        count++;\r\n    }\r\n    num=originalNum;\r\n    while (originalNum != 0) {\r\n  \r\n        remainder = originalNum % 10;\r\n        power=1;\r\n        for(itr=1;itr<=count;itr++)\r\n           power=power*remainder;\r\n        ans=ans+power;\r\n       originalNum /= 10;\r\n    }\r\n\r\n    if (ans == num)\r\n        printf(\"Armstrong number\");\r\n    else\r\n        printf(\"Not an Armstrong number\");\r\n\r\n    return 0;\r\n}\r\n", "6": "#include <stdio.h>\r\nint main() {\r\n    long long int num,rev=0,temp;\r\n    scanf(\"%lld\",&num);\r\n    temp=num;\r\n    while(temp!=0){\r\n        rev=rev*10+temp%10;\r\n        temp/=10;\r\n    }\r\n    \r\n    printf(\"%lld\",rev);\r\n    return 0;\r\n}\r\n", "7": "#include <stdio.h>\r\nint main() {\r\n    long long int num,rev=0,temp;\r\n    scanf(\"%lld\",&num);\r\n    temp=num;\r\n    while(temp!=0){\r\n        rev=rev*10+temp%10;\r\n        temp/=10;\r\n    }\r\n    (num==rev)?printf(\"Palindrome\"):printf(\"Not a Palindrome\");\r\n   return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n\r\nint main(){\r\n    int num,sum=0,rev=0;\r\n    scanf(\"%d\",&num);\r\n    int temp=num;\r\n    while(temp!=0){\r\n        sum+=temp%10;\r\n        temp/=10;\r\n    }\r\n\r\n    temp = sum;\r\n    \r\n    while(temp!=0){\r\n        rev = rev*10+ temp%10;\r\n        temp/=10;\r\n    }\r\n    \r\n    if(sum*rev == num){\r\n        printf(\"YES\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"NO\");\r\n    }\r\n    return 0;\r\n    \r\n}", "9": "#include <stdio.h>\r\nint main() {\r\n    long long int num,temp,revnum=0,revsq=0,sq=0;\r\n    scanf(\"%lld\",&num);\r\n    temp=num;\r\n    while(temp!=0){\r\n        revnum=revnum*10 + temp%10;\r\n        temp/=10;\r\n    }\r\n    sq=num*num;\r\n    revsq=revnum*revnum;\r\n    \r\n    temp=revsq;\r\n    revsq=0;\r\n    \r\n    while(temp!=0){\r\n        revsq = revsq*10 + temp%10;\r\n        temp/=10;\r\n    }\r\n    \r\n    (sq==revsq)?printf(\"Adam Number\"):printf(\"Not a Adam Number\");\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\nlong long int num,K,sub_num,digit,rev=0,power;\r\nscanf(\"%lld%lld\",&num,&K);\r\npower=pow(10,K);\r\nsub_num=num%power;\r\nnum/=power;\r\nwhile(sub_num)\r\n{\r\n digit=sub_num%10;\r\n rev=rev*10+digit;\r\n sub_num/=10;\r\n}\r\nnum=num*power+rev;\r\nprintf(\"%lld\",num);\r\nreturn 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Crunching_Level_2": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,rem,count=0;\r\n scanf(\"%d\",&num);\r\n while(num)\r\n {\r\n rem=num%2;\r\n if(rem==1)\r\n count++;\r\n num/=2;\r\n }\r\n printf(\"%d\",count);\r\nreturn 0;", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,place=1,binary=0,rem;\r\n scanf(\"%lld\",&num);\r\n while(num)\r\n {\r\n rem=num%2;\r\nbinary=binary+(rem*place);\r\n place*=10;\r\n num/=2;\r\n}\r\n printf(\"%lld\",binary);\r\nreturn 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n\r\nint main(){\r\n    int num,temp,ind=0;\r\n    char a[100];\r\n    scanf(\"%d\",&num);\r\n    while(num!=0){\r\n        temp = num%16;\r\n        if(temp<10){\r\n            a[ind]=temp+48;\r\n        }\r\n        else{\r\n            a[ind]=temp+55;\r\n        }\r\n        ind++;\r\n        num/=16;\r\n    }\r\n    ind--;\r\n    for(;ind>=0;ind--)\r\n        printf(\"%c\",a[ind]);\r\n     return 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n long long int input;\r\n scanf(\"%lld\",&input);\r\n long long int res=0;\r\n long long int power=1;\r\n int digit;\r\n while(input)\r\n {\r\n     digit=input%10;\r\n     res=res+digit*power;\r\n     power*=2;\r\n     input/=10;\r\n }\r\n  printf(\"%lld\",res);\r\n  return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,base,place=1,ans=0,rem;\r\n scanf(\"%lld%lld\",&num,&base);\r\n while(num)\r\n {\r\n rem=num%base;\r\n ans=ans+(rem*place);\r\n place*=10;\r\n num/=base;\r\n }\r\n printf(\"%lld\",ans);\r\nreturn 0;\r\n}\r\n", "6": "#include <stdio.h>\r\n\r\nvoid main(){\r\n    int num,rem,sum,temp,po=1,count=0;\r\n    int stno,enno;\r\n\r\n    scanf(\"%d\",&stno);\r\n\r\n    scanf(\"%d\",&enno);\r\n\r\n    for(num=stno;num<=enno;num++){\r\n         temp=num;\r\n         sum = 0;\r\n        \r\n        while(temp!=0){\r\n            count++;\r\n            temp/=10;\r\n        }\r\n        \r\n        temp=num;\r\n        \r\n         while(temp!=0){\r\n             rem=temp % 10;\r\n             temp=temp/10;\r\n             for(int ctr=1;ctr<=count;ctr++)\r\n                po*=rem;\r\n             sum=sum+po;\r\n             po=1;\r\n         }\r\n         if(sum==num)\r\n             printf(\"%d \",num);\r\n        count=0;\r\n    }\r\n    return 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\n  long long int num;\r\n  long long int sqr_num;\r\n  long long int rev_num;\r\n  long long int rev_sqr_num=0;\r\n  long long int sqr_rev_num;\r\n  long long int digit;\r\n  long long int start;\r\n  long long int end;\r\n  long long int copy;\r\n  scanf(\"%lld %lld\",&start,&end);\r\n  for(num=start;num<=end;num+=1)\r\n  {\r\n      if(num%10==0)\r\n        continue;\r\n      rev_num=rev_sqr_num=0;\r\n      sqr_num=num*num;\r\n      copy=num;\r\n      while(num)\r\n      {\r\n          digit=num%10;\r\n          rev_num=rev_num*10+digit;\r\n          num=num/10;\r\n      }\r\n      num=copy;\r\n      sqr_rev_num=rev_num*rev_num;\r\n      while(sqr_num)\r\n      {\r\n          digit=sqr_num%10;\r\n          rev_sqr_num=rev_sqr_num*10+digit;\r\n          sqr_num=sqr_num/10;\r\n      }\r\n      if(rev_sqr_num==sqr_rev_num)\r\n        printf(\"%lld \",num);\r\n  }\r\n  return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint main()\r\n{\r\n long long int num,check;\r\n scanf(\"%lld\",&num);\r\n for(check=num;;check++)\r\n {\r\n int result=0;\r\n num=check;\r\n while(num)\r\n {\r\n result=(result*10)+(num%10);\r\n num=num/10;\r\n }\r\n if(result==check)\r\n {\r\n\r\n printf(\"%lld\",result);\r\n break;\r\n }\r\n }\r\n  return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nlong long int pow(long long int num)\r\n{\r\n long long int power ;\r\n power = 1 ;\r\n while(num/power)\r\n power *= 10;\r\nreturn power /10;\r\n}\r\nlong long int leftRotate(long long int num , int N)\r\n{\r\n long long int power ;\r\n int itr ;\r\n\r\n power = pow(num);\r\nfor(itr = 1 ; itr <= N ; itr++)\r\n{\r\n num = (num%10)*power + (num/10);\r\n}\r\nreturn num;\r\n}\r\nint main()\r\n{\r\nlong long int num ;\r\nint N ;\r\nscanf(\"%lld%d\" , &num , &N);\r\nprintf(\"%lld\" , leftRotate(num , N));\r\n return 0;\r\n}\r\n", "10": "#include <stdio.h>\r\nint main()\r\n{\r\n int num,n,a,b,count=1,temp;\r\n  scanf(\"%d%d\",&num,&n);\r\n temp=num;\r\n while(temp>=10)\r\n {\r\n temp=temp/10;\r\n count*=10;\r\n }\r\n for(int i=0;i<n;i++)\r\n {\r\na=num%count;\r\n b=(a*10)+(num/count);\r\n num=b;\r\n }\r\n printf(\"%d\",b);\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Number_Crunching_Level_3": {"1": "#include<stdio.h> \r\nlong long int power1(long long int);\r\nint isKaprekar(long long int);\r\nint main() {\r\n    long long int num ;\r\n    scanf(\"%lld\" , &num);\r\n    if( isKaprekar(num)) \r\n    printf(\"YES\");\r\n    else \r\n    printf(\"NO\");\r\n    return 0 ;\r\n}\r\nlong long int power1(long long int num)\r\n{\r\n    long long int power ;\r\n    power = 1 ;\r\n    while(num/power )\r\n    power *= 10;\r\n    return power;\r\n}\r\nint isKaprekar(long long int num) \r\n{ \r\n    long long int sq , part1 , part2 , power;\r\n    power = power1(num);\r\n    sq = num * num;\r\n    part1 = sq / power;\r\n    part2 = sq % power ;\r\n    if( part1 + part2 == num) \r\n    return 1;\r\n    else {\r\n        power *= 10;\r\n        part1 = sq / power;\r\n        part2 = sq % power ;\r\n        if(part1 + part2 == num)\r\n        return 1;\r\n    }\r\n    return 0;\r\n}", "2": "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n long long int digit,number,temp,sum=0;\r\n\r\n scanf(\"%lld\",&number);\r\n while(sum!=1 && sum!=4)\r\n{\r\n sum=0;\r\n while(number>0)\r\n {\r\n digit=number%10;\r\n sum+=(digit*digit);\r\n number=number/10;\r\n }\r\n number=sum;\r\n }\r\n\r\n if(sum==1)\r\n printf(\"Happy Number\\n\");\r\n else\r\n printf(\"UnHappy Number\\n\");\r\n return 0;\r\n}", "3": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,count=0,safe,digit,digits,swap,power=1,ans=0;\r\n scanf(\"%lld\",&num);\r\n safe=num;\r\n while(num)\r\n {\r\n count++;\r\n num/=10;\r\n }\r\n num=safe;\r\n if(count%2==1)\r\n {\r\n digit=num%10;\r\n num/=10;\r\n }\r\n while(num)\r\n {\r\n digits=num%100;\r\n swap=(digits%10)*10+(digits/10);\r\n ans=ans+(swap*power);\r\n power*=100;\r\n num/=100;\r\n }\r\n if(count%2==1)\r\n printf(\"%lld\",ans*10+digit);\r\n else\r\n printf(\"%lld\",ans);\r\n return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nint main()\r\n{\r\n int digit[10]={0};\r\n long long int num,pv=1;\r\n scanf(\"%lld\",&num);\r\n while(num/pv)\r\n pv=pv*10;\r\n pv=pv/10;\r\n while(pv!=0)\r\n {\r\n if(digit[(num/pv)%10]==0)\r\n {\r\n digit[(num/pv)%10]++;\r\n pv=pv/10;\r\n continue;\r\n }\r\n int rem=num%pv;\r\n num=(num/pv)/10;\r\n num=(num*pv)+rem;\r\n pv=pv/10;\r\n }\r\n printf(\"%lld\",num);\r\n return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n\r\nint main(){\r\n    int num,pos1,pos2,s1,s2,count=0,ans=0,rem;\r\n    scanf(\"%d%d%d\",&num,&pos1,&pos2);\r\n    \r\n    int temp=num;\r\n    while(temp!=0){\r\n        count++;\r\n        rem=temp%10;\r\n        if(count==pos1)\r\n            s1=rem;\r\n            \r\n        if(count==pos2)\r\n            s2=rem;\r\n            \r\n        temp/=10;\r\n    }\r\n    count=0;\r\n    while(num!=0){\r\n        count++;\r\n        if(count==pos1)\r\n            ans = ans*10 + s2;\r\n        else if(count==pos2)\r\n            ans = ans*10 + s1;\r\n        else\r\n            ans = ans*10 + num%10;\r\n            \r\n        num/=10;\r\n    }\r\n    while(ans!=0){\r\n        num=num*10 + ans%10;\r\n        ans/=10;\r\n    }\r\n    \r\n    printf(\"%d\",num);\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nlong long int num,input,digit,even=0,odd=0,even_place=1,odd_place=1;\r\n scanf(\"%lld%lld\",&num,&input);\r\n while(num)\r\n {\r\n digit=num%10;\r\n if(digit%2==0)\r\n\r\n {\r\n even=even+(digit*even_place);\r\n even_place*=10;\r\n }\r\n else\r\n {\r\n odd=odd+(digit*odd_place);\r\n odd_place*=10;\r\n }\r\n num/=10;\r\n}\r\nif(input==1)\r\n printf(\"%lld\",even*odd_place+odd);\r\nelse\r\n printf(\"%lld\",odd*even_place+even);\r\n\r\nreturn 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint main()//entry point\r\n{\r\n  long long int num1;\r\n  long long int num2;\r\n  long long int power=1;\r\n  int ctr;\r\n  int no_of_digits=0;\r\n  scanf(\"%lld\",&num1);\r\n  scanf(\"%lld\",&num2);\r\n  while(num1/power)\r\n  {\r\n      power=power*10;\r\n      no_of_digits+=1;\r\n  }\r\n  power=power/10;\r\n  int last_digit;\r\n  for(ctr=1;ctr<=no_of_digits;ctr+=1)\r\n  {\r\n        last_digit=num1%10;\r\n        num1=num1/10;\r\n        num1=last_digit*power+num1;\r\n        //printf(\"%d \",num1);\r\n        if(num1==num2&&num1>=power)\r\n            break;\r\n  }\r\n   if(ctr<no_of_digits)\r\n       printf(\"YES\");\r\n   else\r\n        printf(\"NO\");\r\n  return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint main()//entry point\r\n{\r\n  long long int input;\r\n  scanf(\"%lld\",&input);\r\n  int digit1;\r\n  int digit2;\r\n\r\n  digit1=input%10;\r\n  input/=10;\r\n  digit2=input%10;\r\n  input/=10;\r\n  if(input<10)\r\n    printf(\"Not\");\r\n  else if(input<100)\r\n  {\r\n      if(digit1>digit2)\r\n        printf(\"Increasing\");\r\n      else if(digit1<digit2)\r\n        printf(\"Decreasing\");\r\n      else\r\n        printf(\"Not\");\r\n  }\r\n  int prev_digit;\r\n  int curr_digit;\r\n  if(digit1>digit2)//inc\r\n  {\r\n      prev_digit=digit2;\r\n      while(input)\r\n      {\r\n          curr_digit=input%10;\r\n          if(curr_digit>=prev_digit)\r\n            break;\r\n          input/=10;\r\n          prev_digit=curr_digit;\r\n      }\r\n      if(input==0)\r\n        printf(\"Increasing\");\r\n      else\r\n        printf(\"Not\");\r\n  }\r\n  else if(digit1<digit2)\r\n  {\r\n      prev_digit=digit2;\r\n      while(input)\r\n      {\r\n          curr_digit=input%10;\r\n          if(curr_digit<=prev_digit)\r\n            break;\r\n          input/=10;\r\n          prev_digit=curr_digit;\r\n      }\r\n      if(input==0)\r\n        printf(\"Decreasing\");\r\n      else\r\n         printf(\"Not\");\r\n\r\n  }\r\n  else\r\n    printf(\"Not\");\r\n  return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nint main()//entry point\r\n{\r\n long long int input ;\r\n scanf(\"%lld\",&input);\r\n int check_digit;\r\n long long int copy;\r\n int digit;\r\n int digit_ctr;\r\n for(check_digit=1;check_digit<=9&&input<1000000000;check_digit+=1)\r\n {\r\n     copy=input;\r\n     digit_ctr=0;\r\n     while(input)\r\n     {\r\n         digit=input%10;\r\n         if(digit==check_digit)\r\n            digit_ctr+=1;\r\n         input/=10;\r\n     }\r\n     input=copy;\r\n     if(digit_ctr!=1)\r\n        break;\r\n }\r\n if(check_digit>9)\r\n    printf(\"Pandigital Number\");\r\n else\r\n    printf(\"Not a Pandigital Number\");\r\n  return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint main()//entry point\r\n{\r\n long long int input=12345864;\r\n int curr_digit;\r\n int last_digit;\r\n long long int data;\r\n long long int copy;\r\n long long int place=10;\r\n long long int power;\r\n int digit;\r\n scanf(\"%lld\",&input);\r\n if(input<10)\r\n {\r\n     printf(\"-1\");\r\n }\r\n else\r\n {\r\n     copy=input;\r\n     last_digit=input%10;\r\n     input/=10;\r\n     data=last_digit;\r\n     while(input)\r\n     {\r\n         curr_digit=input%10;\r\n          input=input/10;\r\n         if(curr_digit<last_digit)\r\n            break;\r\n         data=data*10+curr_digit;\r\n         place=place*10;\r\n         last_digit=curr_digit;\r\n\r\n     }\r\n     if(input==0)\r\n        printf(\"-1\");\r\n     else\r\n     {\r\n         //printf(\"%lld %lld \",data,place);\r\n         power=place/10;\r\n         while(power)\r\n         {\r\n             digit=(data/power)%10;\r\n             if(digit>curr_digit)\r\n             {\r\n                 break;\r\n             }\r\n             power=power/10;\r\n         }\r\n         data=(((data/power)/10)*10+curr_digit)*power+(data%power);\r\n         //printf(\" %lld %lld \",data,input);\r\n         input= (input*10+digit)*place+data;\r\n         printf(\"%lld\",input);\r\n\r\n     }\r\n\r\n }\r\n\r\n\r\n  return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "PatternMatching_Level_0": {"1": "#include<stdio.h>\r\nint Find_Index(char *str1,char *str2)\r\n{\r\n    int len1,len2,max,flag,ind1,ind2;\r\n    for(len1=0;str1[len1];len1++);\r\n    for(len2=0;str2[len2];len2++);\r\n    max = (len1 - len2);\r\n    for(ind1=0; ind1<=max; ind1++)\r\n    {\r\n        flag=1;\r\n        for(ind2=0; ind2<len2 ;ind2++)\r\n        {\r\n            if(str2[ind2] != str1[ind2+ind1])\r\n                break;\r\n        }\r\n        if(ind2==len2)\r\n            return ind1;\r\n    }\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    char str1[1000];\r\n    char str2[1000];\r\n    scanf(\"%s\",str1);\r\n    scanf(\"%s\",str2);\r\n    printf(\"%d\",Find_Index(str1,str2));\r\n}\r\n", "2": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0 && num!=2))\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<=num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Nearest_Prime(int N)\r\n{\r\n    int num,diff1,diff2,max,min;\r\n    if(isPrime(N))\r\n        return 0;\r\n    else\r\n    {\r\n        for(num=N; ;num++)\r\n        {\r\n            if(isPrime(num))\r\n            {\r\n                max = num;\r\n                break;\r\n            }\r\n        }\r\n        diff1 = max - N;\r\n        for(num=N-1 ; ; num--)\r\n        {\r\n            if(isPrime(num))\r\n            {\r\n                min = num;\r\n                break;\r\n            }\r\n        }\r\n        diff2 = N-min;\r\n         if(diff1<diff2)\r\n        return diff1;\r\n    else\r\n        return diff2;\r\n    }\r\n}\r\nint main()\r\n{\r\n    int N;\r\n    scanf(\"%d\",&N);\r\n    printf(\"%d\",Nearest_Prime(N));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nint Inc_Sequence(char *str)\r\n{\r\n    int len,ind;\r\n    for(len=0;str[len];len++);\r\n    for(ind=0;ind<len-1;ind++)\r\n    {\r\n        if(str[ind] > str[ind+1])\r\n            return 0;\r\n    }\r\n    return 1;\r\n}\r\nint Dec_Sequence(char *str)\r\n{\r\n    int len,ind;\r\n    for(len=0;str[len];len++);\r\n    for(ind=0;ind<len-1;ind++)\r\n    {\r\n        if(str[ind] < str[ind+1])\r\n            return 0;\r\n    }\r\n    return 1;\r\n}\r\nint Sequence(char *str)\r\n{\r\n    if(Inc_Sequence(str) || Dec_Sequence(str))\r\n        return 1;\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    printf(\"%d\",Sequence(str));\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num%2==0 && num!=2)\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 1;\r\n    for(fact=3;fact*fact<=num;fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint CommonDivisor(int start,int end)\r\n{\r\n    int num;\r\n    int front=start;\r\n    int rear=end;\r\n    for(num=start; num<=end; num++)\r\n    {\r\n        if(isPrime(num) && (front%num==0) && (rear%num==0))\r\n            return num;\r\n    }\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    int start,end;\r\n    scanf(\"%d%d\",&start,&end);\r\n    printf(\"%d\",CommonDivisor(start,end));\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint RotateCheck(char *str,char ch,int len,int occ)\r\n{\r\n    int size,ind,nor=0,count=0;\r\n    char safe;\r\n    for(size=0;str[size];size++);\r\n    while(nor < size)\r\n    {\r\n        for(ind=0;ind<len;ind++)\r\n            if(str[ind]==ch)\r\n                count++;\r\n        if(count==occ)\r\n            return nor;\r\n        safe = str[size-1];\r\n        for(ind=size-2;ind>=0;ind--)\r\n            str[ind+1] = str[ind];\r\n        str[0] = safe;\r\n        nor++;\r\n        count=0;\r\n    }\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    char ch;\r\n    int occ,len;\r\n    scanf(\"%s %c %d %d\",str,&ch,&len,&occ);\r\n    printf(\"%d\",RotateCheck(str,ch,len,occ));\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<limits.h>\r\nint MaxOccurence(char *str)\r\n{\r\n    int front,rear,length,max=INT_MIN;\r\n    for(front=0; str[front]; front++)\r\n    {\r\n        for(rear=front+1;str[rear];rear++)\r\n        {\r\n            if(str[front]==str[rear])\r\n                length = (rear-front)-1;\r\n        }\r\n        if(length>max)\r\n            max = length;\r\n    }\r\n    if(length==0)\r\n        return 1;\r\n    return max;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    printf(\"%d\",MaxOccurence(str));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint FindMatch(char *str1,char *str2)\r\n{\r\n    int len1,len2,max,flag,ind1,ind2,count=0;\r\n    for(len1=0;str1[len1];len1++);\r\n    for(len2=0;str2[len2];len2++);\r\n    max = (len1 - len2);\r\n    for(ind1=0; ind1<=max; ind1++)\r\n    {\r\n        flag=1;\r\n        for(ind2=0; ind2<len2 ;ind2++)\r\n        {\r\n            if(str2[ind2] != str1[ind2+ind1])\r\n                break;\r\n        }\r\n        if(ind2==len2)\r\n            count++;\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    char str[1000],inp_str[1000],res[100];\r\n    scanf(\"%s\",str);\r\n    int noq,ind=0,itr;\r\n    scanf(\"%d\",&noq);\r\n    while(noq--)\r\n    {\r\n       scanf(\"%s\",inp_str);\r\n       res[ind++] = (FindMatch(str,inp_str) + 48);\r\n    }\r\n    for(itr=0;itr<ind;itr++)\r\n        printf(\"%c \",res[itr]);\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nvoid RemoveString(char *str1,char* str2)\r\n{\r\n    int len1,len2,max,ind1,ind2,holder,itr,flag;\r\n    for(len1=0;str1[len1];len1++);\r\n    for(len2=0;str2[len2];len2++);\r\n    max = (len1 - len2);\r\n   while(1)\r\n    {\r\n        flag=0;\r\n        for(ind1=0; ind1<=max; ind1++)\r\n        {\r\n            for(ind2=0; ind2<len2 ;ind2++)\r\n            {\r\n                if(str2[ind2] != str1[ind2+ind1])\r\n                    break;\r\n            }\r\n            if(ind2==len2)\r\n            {\r\n                holder=ind1;\r\n                for(itr=ind1+len2; str1[itr]; itr++)\r\n                    str1[holder++] = str1[itr];\r\n                str1[holder]='\\\\0';\r\n                flag=1;\r\n            }\r\n        }\r\n        if(flag==0)\r\n            break;\r\n    }\r\n}\r\nint main()\r\n{\r\n     char str[1000],inp_str[1000],res[100];\r\n    scanf(\"%s\",str);\r\n    int noq;\r\n    scanf(\"%d\",&noq);\r\n    while(noq--)\r\n    {\r\n       scanf(\"%s\",inp_str);\r\n       RemoveString(str,inp_str);\r\n    }\r\n    printf(\"%s\",str);\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nint CountPattern(char *str)\r\n{\r\n    int len,count=0,ones,ind;\r\n    for(len=0;str[len];len++);\r\n    ones = str[0];\r\n    count=0;\r\n    for(ind=0; ind<len; ind++)\r\n    {\r\n        if(str[ind]=='0' && ones=='1' )\r\n        {\r\n            while(str[ind]=='0')\r\n                ind++;\r\n            if(str[ind]=='1')\r\n                count++;\r\n        }\r\n        if(ind == len)\r\n                break;\r\n        ones=str[ind];\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    printf(\"%d\",CountPattern(str));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<limits.h>\r\nint MaxOccur(char *str)\r\n{\r\n    int ind,max=INT_MIN;\r\n    int alpha[26];\r\n    for(ind=0;ind<26;ind++)\r\n        alpha[ind]=0;\r\n    for(ind=0; str[ind]; ind++)\r\n        alpha[str[ind]-97]++;\r\n    for(ind=0;ind<26;ind++)\r\n        if(alpha[ind]>max)\r\n            max=alpha[ind];\r\n    return max;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    printf(\"%d\",MaxOccur(str));\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "old_Pattern_Level_3": {"1": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start;\r\n for( r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\nstart = r;\r\n for(c = 1 ; r+c <= N+1 ; c++)\r\n printf(\"%d \" , start++);\r\n for( ; c <= N ; c++)\r\n printf(\"%d \" , N);\r\n }\r\n}", "2": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start;\r\n for( r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n start = r;\r\n for(c = 1 ; r+c <= N+1 ; c++)\r\n printf(\"%d \" , start++);\r\n for( ; c <= N ; c++)\r\n printf(\"%d \" , (start++)%N);\r\n }\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , val , start;\r\n for(r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n val = r ;\r\n start = N-1;\r\n for(c = 1 ; c <= r ; c++ , val+=start , start--)\r\n printf(\"%02d \" , val);\r\n }\r\n}", "4": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c ;\r\n for(r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n if(r % 2)\r\n {\r\n for( c = 1 ; c <= r ; c++)\r\n printf(\"%d \" , c);\r\n }\r\n else\r\n {\r\n for(c = r ; c >= 1 ; c--)\r\n printf(\"%d \" , c);\r\n }\r\n }\r\n}", "5": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , val, val1;\r\n val = val1 = 1;\r\n for(r = N ; r >= 1 ; r-- , printf(\"\\n\")\r\n {\r\n for(c = N ; c > r ; c--)\r\n printf(\" \";\r\n for( ; c >= 1 ; c--)\r\n printf(\"%02d \" , val++);\r\n for(c = 1; c <= r ; c++)\r\n printf(\"%02d \" , (r*r)+val1++);\r\n }\r\n}", "6": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r, c , gap , start , fhalf;\r\n gap = 0;\r\n fhalf = (N-1) / 2 + 1;\r\n for(r = 1 ; r <= fhalf ; r++ , printf(\"\\n\" , gap+=2)\r\n {\r\n start = gap*N+1;\r\n for(c = 1 ; c < N ; c++)\r\n printf(\"%02d*\" , start++ );\r\n printf(\"%02d\" , start++);\r\n }\r\n gap -= 2;\r\n (N % 2 ? gap-- : gap++);\r\n for(r = 1 ; r <= N - fhalf ; r++ , printf(\"\\n\", gap-=2)\r\n {\r\n start = gap*N+1;\r\n for(c = 1 ; c < N ; c++)\r\n printf(\"%02d*\" , start++ );\r\n printf(\"%02d\" , start++);\r\n }\r\n}\r\n", "7": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start , gap , gap1;\r\n gap = 0;\r\n gap1 = 2;\r\n for(r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n if(r % 2 )\r\n {\r\n start = gap * N + 1;\r\n for(c = 1 ; c <= N ; c++)\r\n printf(\"%02d \" , start++);\r\n gap += 2;\r\n }\r\n else\r\n {\r\n start = gap1 * N ;\r\n for(c = 1 ; c <= N ; c++)\r\n printf(\"%02d \" , start--);\r\n gap1 += 2;\r\n }\r\n }\r\n}", "8": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start;\r\n for( r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n if( r % 2)\r\n {\r\n start = (r *(r+1))/2 ;\r\n for(c = 1 ; c <= r ; c++)\r\n printf(\"%02d \" , start--);\r\n }\r\n else\r\n {\r\n start = (r *(r-1))/2 +1 ;\r\n for(c = 1 ; c <= r ; c++)\r\n printf(\"%02d \" , start++);\r\n }\r\n }\r\n}\r\n", "9": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start;\r\n for( r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n if( r % 2)\r\n {\r\n start = (r *(r+1))/2 ;\r\n for(c = 1 ; c <= r ; c++)\r\n printf(\"%02d \" , start--);\r\n }\r\n else\r\n {\r\n start = (r *(r-1))/2 +1 ;\r\n for(c = 1 ; c <= r ; c++)\r\n printf(\"%02d \" , start++);\r\n }\r\n }\r\n}\r\n", "10": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int r , c , start;\r\n for( r = 1 ; r <= N ; r++ , printf(\"\\n\")\r\n {\r\n start = r;\r\n for(c = 1 ; c <= N ; c++)\r\n printf(\"%d \" , start++);\r\n }\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pattern_Level_0": {"1": "#include<stdio.h>\nint main()\n{\n    int num,row=1,col;\n    scanf(\"%d\",&num);\n    for(;row<=num;row++,printf(\"\\n\"))\n    for(col=1;col<=num;printf(\"*\"),col++);\n    return 0;\n}", "2": "#include<stdio.h>\nint main()\n{\n    int num,row=1,col;\n    scanf(\"%d\",&num);\n    for(;row<=num;row++,printf(\"\\n\"))\n    for(col=1;col<=row;printf(\"*\"),col++);\n    return 0;\n}", "3": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"%d\",&n);\nfor(row=1;row<=n;row++,printf(\"\\n\"))\n{\nfor(col=row;col<n;col++)\nprintf(\" \");\nfor(col=1;col<=(row*2)-1;col++)\nprintf(\"*\");\n}\nreturn 0; \n}", "4": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"\"%d\"\",&n);\nfor(row=n;row>=1;row--,printf(\"\"\\n\"\"))\n{\nfor(col=row;col<n;col++)\nprintf(\"\" \"\");\nfor(col=1;col<=(2*row-1);col++)\n{\nprintf(\"\"*\"\");\n}\n}\nreturn 0;\n}", "5": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"%d\",&n);\nfor(row=1;row<=n;row++,printf(\"\\n\"))\n{\nfor(col=row;col<n;col++)\nprintf(\" \");\nfor(col=1;col<=n;col++)\nprintf(\"*\");\nreturn 0;\n}\nreturn 0;\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"\"%d\"\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"\"*\"\");\r\n}\r\nfor(row=num;row>=1;row--,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"\"*\"\");\r\n}\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"%d\",&n);\nfor(row=1;row<=n;row++,printf(\"\\n\"))\n{\nfor(col=1;col<=n;col++)\n{\nif(row==1||row==n||col==1||col==n)\nprintf(\"*\");\nelse\nprintf(\" \");\n}\n}\nreturn 0;\n}", "8": "#include<stdio.h>\nint main() {\nint n,row,col;\nscanf(\"%d\",&n);\nn=n*2-1;\nfor(row=1;row<=n;row++,printf(\"\\n\"))\n{\nfor(col=1;col<=n;col++)\n{\nif(col==row||col==(n-row+1))\nprintf(\"*\");\nelse\nprintf(\" \");\n}\n}\nreturn 0;\n}", "9": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"%d\",&n);\nn=n*2-1;\nfor(row=1;row<=n;row++,printf(\"\\n\"))\n{\nfor(col=1;col<=n;col++)\n{\nif(row==1||row==n||col==1||col==n||row==col||col==(n-row+1))\nprintf(\"*\");\nelse\nprintf(\" \");\n}\n}\nreturn 0;\n}", "10": "#include<stdio.h>\nint main()\n{\nint num,row,col;\nscanf(\"%d\",&num);\nfor(row=1;row<=num;row++,printf(\"\\n\"))\n{\n for(col=1;col<=num;col++)\n {\n if(row==num/2+1||col==num/2+1)\n printf(\"*\");\n else\n printf(\" \");\n }\n}\nreturn 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pattern_Level_1": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col,spc;\r\nscanf(\"%d\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\nfor(spc=1;spc<=(num-row)*2;spc++)\r\nprintf(\" \");\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\n}\r\nfor(row=num;row>=1;row--,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\nfor(spc=1;spc<=(num-row)*2;spc++)\r\nprintf(\" \");\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\n}\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col,spc;\r\nscanf(\"%d\",&num);\r\nfor(row=num;row>=1;row--,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\nfor(spc=1;spc<=(num-row)*2;spc++)\r\nprintf(\" \");\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\n}\r\nfor(row=1;row<=num;row++,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\nfor(spc=1;spc<=(num-row)*2;spc++)\r\nprintf(\" \");\r\nfor(col=1;col<=row;col++)\r\nprintf(\"*\");\r\n}\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\nint main()\n{\nint n,row,col;\nscanf(\"\"%d\"\",&n);\nfor(row=1;row<=n;row++,printf(\"\"\\n\"\"))\n{\nfor(col=1;col<=n;col++)\n{\nif(row%2==1&&col%2==1)\nprintf(\"\"1\"\");\nelse if(row%2==1&&col%2==0)\nprintf(\"\"0\"\");\nelse if(row%2==0&&col%2==0)\nprintf(\"\"1\"\");\nelse if(row%2==0&&col%2==1)\nprintf(\"\"0\"\");\n}\n}\nreturn 0;\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"\"%d\"\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=1;col<=num;col++)\r\nprintf(\"\"%d\"\",row%2);\r\n}\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"%d\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=num;col++)\r\n{\r\nif(num%2==1&&col==num/2+1&&row==num/2+1)\r\nprintf(\"0\");\r\nelse if(num%2==0&&(col==num/2+1||col==num/2)&&(row==num/2+1||row==num/2))\r\nprintf(\"0\");\r\nelse\r\nprintf(\"1\");\r\n}\r\n}\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"%d\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=num;col++)\r\n{\r\nif(row==1||row==num||col==1||col==num)\r\nprintf(\"1\");\r\nelse\r\nprintf(\"0\");\r\n}\r\n}\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"%d\",&num);\r\nif(num%2==0)\r\nnum--;\r\nfor(row=1;row<=num;row++,printf(\"\\n\"))\r\n{\r\nfor(col=1;col<=num;col++)\r\n{\r\nif(col==num/2+1||row==num/2+1)\r\nprintf(\"0\");\r\nelse\r\nprintf(\"1\");\r\n}\r\n}\r\nreturn 0;\r\n}", "8": "\"#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col;\r\nscanf(\"\"%d\"\",&num);\r\nfor(row=1;row<=num;row++,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=1;col<=num;col++)\r\n{\r\nif(row==1||row==num||col==1||col==num||row==col||row+col==num+1)\r\nprintf(\"\"1\"\");\r\nelse\r\nprintf(\"\"0\"\");\r\n}\r\n}\r\nreturn 0;\r\n}\"", "9": "#include<stdio.h>\nint main()\n{\n    int num,row,col;\n    scanf(\"%d\",&num);\n    for(row=1;row<=num;printf(\"\\n\"),row++)\n    {\n        for(col=1;col<row;printf(\" \"),col++);\n        for(col=1;col<=num-row+1;printf(\"%d\",row),col++);\n    }\n    return 0;\n}", "10": "#include<stdio.h>\nint main()\n{\n    int num,row,col;\n    scanf(\"%d\",&num);\n    for(row=1;row<=num;printf(\"\\n\"),row++)\n    for(col=1;col<=row;printf(\"%2d \",col),col++);\n    return 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pattern_Level_2": {"1": "#include<stdio.h>\nvoid displayPattern(int);\nint main()\n{\n int N ;\n scanf(\"%d\" , &N);\n displayPattern(N);\n return 0 ;\n}\nvoid displayPattern(int N)\n{\n int row , col , start;\n for( row = 1 ; row <= N ; row++ , printf(\"\\n\"))\n {\n start = row;\n for(col = 1 ; col <= N ; col++)\n printf(\"%2d \" , start++);\n }\n return 0;\n}", "2": "#include<stdio.h>\r\nvoid displayPattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"%d\" , &N);\r\n displayPattern(N);\r\n return 0 ;\r\n}\r\nvoid displayPattern(int N)\r\n{\r\n int row , col , start;\r\n for( row = 1 ; row <= N ; row++ , printf(\"\\n\"))\r\n {\r\n start = row;\r\n for(col = 1 ; row+col <= N+1 ; col++)\r\n printf(\"%2d \" , start++);\r\n for( ; col <= N ; col++)\r\n printf(\"%2d \" , (start++)%N);\r\n }\r\n return 0;\r\n}\r\n", "3": "#include<stdio.h>\nint main()\n{\n    int num,val1=-1,val2=0,row,col;\n    scanf(\"%d\",&num);\n    for(row=1;row<=num;printf(\"\\n\"),row++)\n    for(col=1;col<=num;col++)\n    printf(\"%3d \",(row%2==1)?(val1+=2):(val2+=2));\n    return 0;\n}", "4": "#include<stdio.h>\nint main()\n{\n    int num,row=1,val=1,col;\n    scanf(\"%d\",&num);\n    for(;row<=num;row++,val=((row&1)==1)?(val=1):(val=2),printf(\"\\n\"))\n    for(col=1;col<=row;col++,val+=2)\n    printf(\"%3d\",val);\n  return 0;\n}", "5": "\"#include<stdio.h>\nint main()\n{\nint num,row,col;\nscanf(\"\"%d\"\",&num);\nfor(row=1;row<=num;row++,printf(\"\"\\n\"\"))\n{\nif(row%2==0)\nprintf(\"\"%2d \"\",row+1);\nfor(col=1;col<=num;col++)\nprintf(\"\"%2d \"\",row);\nif(row%2==1)\nprintf(\"\"%2d \"\",row+1);\n} \nreturn 0;\n}\"", "6": "\"#include<stdio.h>\r\nvoid Pattern(int);\r\nint main()\r\n{\r\n int N ;\r\n scanf(\"\"%d\"\" , &N);\r\n Pattern(N);\r\n return 0 ;\r\n}\r\nvoid Pattern(int N)\r\n{\r\n int row , col ;\r\n for(row = 1 ; row <= N ; row++ , printf(\"\"\\n\"\"))\r\n {\r\n if(row % 2)\r\n {\r\n for( col = 1 ; col <= row ; col++)\r\n printf(\"\"%d \"\" , col);\r\n }\r\n else\r\n {\r\n for(col = row ; col >= 1 ; col--)\r\n printf(\"\"%d \"\" , col);\r\n }\r\n }\r\n}\"", "7": "#include<stdio.h>\nvoid displayPattern(int);\nint main()\n{\n int N ;\n scanf(\"\"%d\"\" , &N);\n displayPattern(N);\n return 0 ;\n}\nvoid displayPattern(int N)\n{\n int r , c , start;\n for( r = 1 ; r <= N ; r++ , printf(\"\"\\n\"\"))\n {\nstart = r;\n for(c = 1 ; r+c <= N+1 ; c++)\n printf(\"\"%d \"\" , start++);\n for( ; c <= N ; c++)\n printf(\"\"%d \"\" , N);\n }\n}", "8": "\"#include<stdio.h>\r\nint main()\r\n{\r\n int rsize,csize,num,col,row,inc,rep;\r\n scanf(\"\"%d %d\"\",&rsize,&csize);\r\n for(row=0;row<rsize ;row++,printf(\"\"\\n\"\"))\r\n {\r\n num=rsize;\r\n for(inc=1;inc<=row;inc++)\r\n printf(\"\"%2d\"\",num--);\r\n for(rep=1;rep<=csize-row;rep++)\r\n printf(\"\"%2d\"\",num);\r\n }\r\n}\r\n\"", "9": "\"#include<stdio.h>\nint main()\n{\n    int num,row,col;\n    scanf(\"\"%d\"\",&num);\n    for(row=1;row<=num;printf(\"\"\\n\"\"),row++)\n    {\n        for(col=1;col<=num-row+1;printf(\"\"    \"\"),col++);\n        for(col=1;col<=row;printf(\"\"%3d \"\",col),col++);\n        for(col-=2;col>0;printf(\"\"%3d \"\",col),col--);\n    }\n}\"", "10": "\"#include<stdio.h>\nint main()\n{\nint num,val=1,cnt=1,rep,inc,dec,row;\nscanf(\"\"%d\"\",&num);\nfor(row=1;row<=num;row++,printf(\"\"\\n\"\"))\n{\nfor(inc=1;inc<=cnt;inc++)\nprintf(\"\"%d\"\",val++);\nfor(rep=1;rep<=(2*num)-2*cnt;rep++)\nprintf(\"\" \"\");\nfor(dec=1;dec<=cnt;dec++)\nprintf(\"\"%d\"\",--val);\nif(row<num)\ncnt++;\n}\n}\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "dont use": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,*ptr;\r\nscanf(\"%d\",&num);\r\nptr=&num;\r\nprintf(\"Value of num : %d\\n\",num);\r\nprintf(\"Value of *ptr : %d\",*ptr);\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nint main()\r\n{\r\nfloat num,*ptr;\r\nscanf(\"%f\",&num);\r\nptr=&num;\r\nprintf(\"Value of num : %f\\n\",num);\r\nprintf(\"Value of *ptr : %f\",*ptr);\r\nreturn 0;\r\n}", "3": "#include<stdio.h>\r\nint main()\r\n{\r\nchar num,*ptr;\r\nscanf(\"%c\",&num);\r\nptr=&num;\r\nprintf(\"Value of char : %c\\n\",num);\r\nprintf(\"Value of *ptr : %c\",*ptr);\r\nreturn 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nchar num,*ptr;\r\nscanf(\"%c\",&num);\r\nptr=&num;\r\nprintf(\"Size of num : %d\\n\",sizeof(num));\r\nprintf(\"Size of ptr : %d\",sizeof(ptr));\r\nreturn 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,*ptr,**dptr;\r\nscanf(\"%d\",&num);\r\nptr=&num;\r\ndptr=&ptr;\r\nprintf(\"Value of num : %d\\n\",num);\r\nprintf(\"Value of pointer : %d\\n\",*ptr);\r\nprintf(\"Value of double pointer : %d\",**dptr);\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nint num,*ptr;\r\nscanf(\"%d\",&num);\r\nptr=&num;\r\nprintf(\"Initial value of num : %d\\n\",num);\r\nprintf(\"Initial value of *ptr : %d\\n\",*ptr);\r\n*ptr=*ptr+10;\r\nprintf(\"Final value of num : %d\\n\",num);\r\nprintf(\"Final value of *ptr : %d\",*ptr);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nvoid swap(int*,int*);\r\n\r\nvoid swap(int *a,int *b)\r\n{\r\nint temp=*a;\r\n*a=*b;\r\n*b=temp;\r\n}\r\nint main()\r\n{\r\nint num1,num2;\r\nscanf(\"%d %d\",&num1,&num2);\r\nprintf(\"Before Swap : %d %d\\n\",num1,num2);\r\nswap(&num1,&num2);\r\nprintf(\"After Swap : %d %d\",num1,num2);\r\nreturn 0;\r\n}", "8": "#include<stdio.h>\r\nint add(int*,int*);\r\n\r\nint add(int *a,int *b)\r\n{\r\nreturn *a+*b;\r\n}\r\n\r\nint main()\r\n{\r\nint num1,num2;\r\nscanf(\"%d %d\",&num1,&num2);\r\nprintf(\"Sum is %d\",add(&num1,&num2));\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nvoid printArray(int *,int);\r\n\r\nvoid printArray(int *arr,int n)\r\n{\r\nint index;\r\nfor(index=0;index<n;index++)\r\nprintf(\"%d \",arr[index]);\r\n}\r\n\r\nint main()\r\n{\r\nint arr[100],n,index;\r\nscanf(\"%d\",&n);\r\nfor(index=0;index<n;index++)\r\nscanf(\"%d\",&arr[index]);\r\nprintArray(arr,n);\r\nreturn 0;\r\n}", "10": "#include<stdio.h>\r\nint searchArray(int *,int,int);\r\n\r\nint searchArray(int *arr,int n,int search)\r\n{\r\nint index;\r\nfor(index=0;index<n;index++)\r\n{\r\nif(arr[index]==search)\r\nreturn index;\r\n}\r\nreturn -1;\r\n}\r\n\r\nint main()\r\n{\r\nint arr[100],n,index,result,search;\r\nscanf(\"%d\",&n);\r\nfor(index=0;index<n;index++)\r\nscanf(\"%d\",&arr[index]);\r\nscanf(\"%d\",&search);\r\nresult=searchArray(arr,n,search);\r\nif(result==-1)\r\nprintf(\"Element not found in array\";\r\nelse\r\nprintf(\"Element is found at index : %d\",result);\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pointer_Level_0": {"1": "#include<stdio.h>\r\nvoid print_integer(long long int *num_ptr)\r\n{\r\n    printf(\"%lld\",*num_ptr);\r\n}\r\nint main()\r\n{\r\n    long long int num;\r\n    scanf(\"%lld\",&num);\r\n    print_integer(&num);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nvoid read_character(char *ch_ptr)\r\n{\r\n        scanf(\"%c\", ch_ptr);\r\n}\r\nint main()\r\n{\r\n    char ch;\r\n    read_character(&ch);\r\n    printf(\"%c\",ch);\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid Convert(char *ptr)\r\n{\r\n    if((*ptr) >= 'a' && (*ptr)<='z')\r\n        *ptr = *ptr - 32;\r\n    else\r\n        *ptr = *ptr + 32;\r\n}\r\nint main()\r\n{\r\n    char ch;\r\n    scanf(\"%c\",&ch);\r\n    Convert(&ch);\r\n    printf(\"%c\",ch);\r\n    return 0;\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\nvoid add_value(long long int *num_ptr)\r\n{\r\n    *num_ptr = *num_ptr+5;\r\n}\r\nint main()\r\n{\r\n    long long int num;\r\n    scanf(\"%lld\",&num);\r\n    add_value(&num);\r\n    printf(\"%lld\",num);\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nvoid print_grade(float *fnum_ptr, char *ch_ptr)\r\n{\r\n    if(*fnum_ptr>9.0f)\r\n        *ch_ptr = 'S';\r\n    else if(*fnum_ptr>=8.0f && *fnum_ptr<9.0f)\r\n        *ch_ptr = 'A';\r\n    else if(*fnum_ptr>=7.0f && *fnum_ptr<8.0f)\r\n        *ch_ptr = 'B';\r\n    else if(*fnum_ptr>=6.0f && *fnum_ptr<7.0f)\r\n        *ch_ptr = 'C';\r\n    else if(*fnum_ptr>=5.0f && *fnum_ptr<6.0f)\r\n        *ch_ptr = 'D';\r\n    else if(*fnum_ptr>=3.5f && *fnum_ptr<5.0f)\r\n        *ch_ptr = 'E';\r\n    else\r\n        *ch_ptr ='F';\r\n\r\n}\r\nint main()\r\n{\r\n    float fnum;\r\n    char ch;\r\n    scanf(\"%f\",&fnum);\r\n    print_grade(&fnum,&ch);\r\n    printf(\"%c\",ch);\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nvoid swap(long long int *num1_ptr,long long int *num2_ptr)\r\n{\r\n    long long int temp;\r\n    temp = *num1_ptr;\r\n    *num1_ptr = *num2_ptr;\r\n    *num2_ptr = temp;\r\n}\r\nint main()\r\n{\r\n    long long int num1,num2;\r\n    scanf(\"%lld%lld\",&num1,&num2);\r\n    swap(&num1,&num2);\r\n    printf(\"%lld %lld\",num1,num2);\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nvoid sum(int *num1_ptr,int *num2_ptr, int *num3_ptr)\r\n{\r\n    *num3_ptr = *num1_ptr + *num2_ptr;\r\n}\r\nint main()\r\n{\r\n    int num1,num2,num3;\r\n    scanf(\"%d%d\",&num1,&num2);\r\n    sum(&num1,&num2,&num3);\r\n    printf(\"%d\",num3);\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nlong long int maximum(long long int *num1_ptr,long long int *num2_ptr)\r\n{\r\n    if(*num1_ptr > *num2_ptr)\r\n        return *num1_ptr;\r\n    else\r\n        return *num2_ptr;\r\n}\r\nint main()\r\n{\r\n    long long int num1,num2,max;\r\n    scanf(\"%lld%lld\",&num1,&num2);\r\n    max = maximum(&num1,&num2);\r\n    printf(\"%lld\",max);\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nchar minimum(char *ch1_ptr,char *ch2_ptr)\r\n{\r\n    if(*ch1_ptr < *ch2_ptr)\r\n        return *ch1_ptr;\r\n    else\r\n        return *ch2_ptr;\r\n}\r\nint main()\r\n{\r\n    char ch1,ch2,min;\r\n    scanf(\"%c %c\",&ch1,&ch2);\r\n    min = minimum(&ch1,&ch2);\r\n    printf(\"%c\",min);\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint main() \r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nprintf(\"%lld\",num);\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pointer_Level_1": {"1": "#include<stdio.h>\r\nint main() \r\n{\r\nlong long int num;\r\nscanf(\"%lld\",&num);\r\nprintf(\"%lld\",num);\r\nreturn 0;\r\n}", "2": "#include<stdio.h>\r\nvoid derefer_address(int dt_ch,void *ptr)\r\n{\r\n    switch(dt_ch)\r\n    {\r\n        case 1: printf(\"%c\",*((char*)ptr));\r\n                break;\r\n        case 2: printf(\"%hd\",*((short int*)ptr));\r\n                break;\r\n        case 3: printf(\"%ld\",*((long int*)ptr));\r\n                break;\r\n        case 4: printf(\"%lld\",*((long long int*)ptr));\r\n                break;\r\n        case 5: printf(\"%f\",*((float*)ptr));\r\n                break;\r\n        case 6: printf(\"%lf\",*((double*)ptr));\r\n                break;\r\n    }\r\n}\r\nint main()\r\n{\r\n    int dt_ch;\r\n    short int snum;\r\n    long int lnum;\r\n    long long int llnum;\r\n    float fnum;\r\n     double dnum;\r\n    char ch;\r\n    scanf(\"%d\",&dt_ch);\r\n    switch(dt_ch)\r\n    {\r\n        case 1:\r\n                scanf(\" %c\",&ch);\r\n                derefer_address(dt_ch,&ch);\r\n                break;\r\n        case 2:\r\n                scanf(\"%hd\",&snum);\r\n                derefer_address(dt_ch,&snum);\r\n                break;\r\n        case 3: scanf(\"%d\",&lnum);\r\n                derefer_address(dt_ch,&lnum);\r\n                break;\r\n        case 4: scanf(\"%lld\",&llnum);\r\n                derefer_address(dt_ch,&llnum);\r\n                break;\r\n        case 5: scanf(\"%f\",&fnum);\r\n                derefer_address(dt_ch,&fnum);\r\n                break;\r\n        case 6: scanf(\"%lf\",&dnum);\r\n                derefer_address(dt_ch,&dnum);\r\n                break;\r\n    }\r\n        return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid input_reader(int dt_ch,void *ptr)\r\n{\r\n    switch(dt_ch)\r\n    {\r\n        case 1: scanf(\" %c\",(char*)ptr);\r\n                break;\r\n        case 2: scanf(\"%hd\",(short int*)ptr);\r\n                break;\r\n        case 3: scanf(\"%ld\",(long int*)ptr);\r\n                break;\r\n        case 4: scanf(\"%lld\",(long long int*)ptr);\r\n                break;\r\n        case 5: scanf(\"%f\",(float*)ptr);\r\n                break;\r\n        case 6: scanf(\"%lf\",(double*)ptr);\r\n                break;\r\n    }\r\n\r\n}\r\nint main()\r\n{\r\n    int dt_ch;\r\n    short int snum;\r\n    long int lnum;\r\n    long long int llnum;\r\n    float fnum;\r\n     double dnum;\r\n    char ch;\r\n    scanf(\"%d\",&dt_ch);\r\n    switch(dt_ch)\r\n    {\r\n        case 1:\r\n                input_reader(dt_ch,&ch);\r\n                printf(\"%c\",ch);\r\n                break;\r\n        case 2:\r\n                input_reader(dt_ch,&snum);\r\n                printf(\"%hd\",snum);\r\n                break;\r\n        case 3:\r\n                input_reader(dt_ch,&lnum);\r\n                printf(\"%ld\",lnum);\r\n                break;\r\n        case 4:\r\n                input_reader(dt_ch,&llnum);\r\n                printf(\"%lld\",llnum);\r\n                break;\r\n        case 5:\r\n                input_reader(dt_ch,&fnum);\r\n                printf(\"%f\",fnum);\r\n                break;\r\n        case 6:\r\n                input_reader(dt_ch,&dnum);\r\n                printf(\"%lf\",dnum);\r\n                break;\r\n    }\r\n\r\n        return 0;\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\nvoid common_swap(int dt_ch,void *ptr1,void * ptr2)\r\n{\r\n    char ctemp;\r\n    short int stemp;\r\n    long int ltemp;\r\n    long long int lltemp;\r\n    float ftemp;\r\n    double dtemp;\r\n    switch(dt_ch)\r\n    {\r\n        case 1:\r\n                ctemp=*((char*)ptr1);\r\n                *((char*)ptr1)=*((char*)ptr2);\r\n                *((char*)ptr2)=ctemp;\r\n                break;\r\n        case 2:\r\n                stemp=*((short int*)ptr1);\r\n                *((short int*)ptr1)=*((short int*)ptr2);\r\n                *((short int*)ptr2)=stemp;\r\n                break;\r\n        case 3:\r\n                ltemp=*((long int*)ptr1);\r\n                *((long int*)ptr1)=*((long int*)ptr2);\r\n                *((long int*)ptr2)=ltemp;\r\n                break;\r\n        case 4:\r\n                lltemp=*((long long int*)ptr1);\r\n                *((long long int*)ptr1)=*((long long int*)ptr2);\r\n                *((long long int*)ptr2)=lltemp;\r\n                break;\r\n        case 5:\r\n                ftemp=*((float*)ptr1);\r\n                *((float*)ptr1)=*((float*)ptr2);\r\n                *((float*)ptr2)=ftemp;\r\n                break;\r\n        case 6:\r\n                dtemp=*((double*)ptr1);\r\n                *((double*)ptr1)=*((double*)ptr2);\r\n                *((double*)ptr2)=dtemp;\r\n                break;\r\n    }\r\n}\r\nint main()\r\n{\r\n    int dt_ch;\r\n    short int snum1,snum2;\r\n    long int lnum1,lnum2;\r\n    long long int llnum1,llnum2;\r\n    float fnum1,fnum2;\r\n     double dnum1,dnum2;\r\n    char ch1,ch2;\r\n    scanf(\"%d\",&dt_ch);\r\n    switch(dt_ch)\r\n    {\r\n        case 1: scanf(\" %c\",&ch1);\r\n                scanf(\" %c\",&ch2);\r\n                common_swap(dt_ch,&ch1,&ch2);\r\n                printf(\"%c %c\",ch1,ch2);\r\n                break;\r\n        case 2: scanf(\"%hd %hd\",&snum1,&snum2);\r\n                common_swap(dt_ch,&snum1,&snum2);\r\n                printf(\"%hd %hd\",snum1,snum2);\r\n                break;\r\n        case 3: scanf(\"%ld %ld\",&lnum1,&lnum2);\r\n                common_swap(dt_ch,&lnum1,&lnum2);\r\n                printf(\"%ld %ld\",lnum1,lnum2);\r\n                break;\r\n        case 4: scanf(\"%lld %lld\",&llnum1,&llnum2);\r\n                common_swap(dt_ch,&llnum1,&llnum2);\r\n                printf(\"%lld %lld\",llnum1,llnum2);\r\n                break;\r\n        case 5: scanf(\"%f %f\",&fnum1,&fnum2);\r\n                common_swap(dt_ch,&fnum1,&fnum2);\r\n                printf(\"%f %f\",fnum1,fnum2);\r\n                break;\r\n        case 6: scanf(\"%lf %lf\",&dnum1,&dnum2);\r\n                common_swap(dt_ch,&dnum1,&dnum2);\r\n                printf(\"%lf %lf\",dnum1,dnum2);\r\n                break;\r\n    }\r\n\r\n        return 0;\r\n}\r\n\r\n", "5": "", "6": "", "7": "", "8": "", "9": ""}, "Pointer_Level_2": {"1": "#include<stdio.h>\r\nvoid print_array(int *arr,int size)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<size; ind++)\r\n        printf(\"%d \",*(arr+ind));\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr=(int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    print_array(arr,size);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nvoid read_element(int *arr,int size)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",arr+ind);\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr=(int*)malloc(size * sizeof(int));\r\n    read_element(arr,size);\r\n    for(ind=0;ind<size;printf(\"%d \",arr[ind++]));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nvoid* print_element(int *arr)\r\n{\r\n    return arr=arr+1;\r\n}\r\nint main()\r\n{\r\n    int size,ind,*res;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    int index;\r\n    scanf(\"%d\",&index);\r\n    res =print_element(arr+index);\r\n    printf(\"%d\",*res);\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nvoid traverse_back(int *arr,int size)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n        printf(\"%d \",*(arr-ind));\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    traverse_back(arr+(size-1),size);\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nvoid print_character(char *str_ptr)\r\n{\r\n    int ind;\r\n    for(ind=0;str_ptr[ind];ind++)\r\n        printf(\"%c\",*(str_ptr+ind));\r\n}\r\nint main()\r\n{\r\n    char *str;\r\n    str = (char*)malloc(1000 * sizeof(char));\r\n    scanf(\"%s\",str);\r\n    print_character(str);\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nint find_length(char *str_ptr)\r\n{\r\n    int len;\r\n    for(len=0; *(str_ptr+len)!=NULL; len++);\r\n    return len;\r\n}\r\nint main()\r\n{\r\n    char *str;\r\n    str = (char*)malloc(1000 * sizeof(char));\r\n    scanf(\"%[^\\n]s\",str);\r\n    printf(\"%d\",find_length(str));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nvoid copy_string(char *str1_ptr,char *str2_ptr)\r\n{\r\n    int ind;\r\n    for(ind=0; *(str1_ptr+ind)!=NULL ; ind++)\r\n        *(str2_ptr+ind) = *(str1_ptr+ind);\r\n}\r\nint main()\r\n{\r\n    char *str1,*str2;\r\n    str1 = (char*)malloc(1000 * sizeof(char));\r\n    str2 = (char*)malloc(1000 * sizeof(char));\r\n    scanf(\"%[^\\n]s\",str1);\r\n    copy_string(str1,str2);\r\n    printf(\"%s\",str2);\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nvoid string_reverse(char *str_ptr)\r\n{\r\n    int front,rear,len;\r\n    char temp;\r\n    for(len=0;*(str_ptr+len); len++);\r\n    for(front=0,rear=len-1; front<rear; front++,rear--)\r\n    {\r\n        temp = *(str_ptr+front);\r\n        *(str_ptr+front) = *(str_ptr+rear);\r\n        *(str_ptr+rear)=temp;\r\n    }\r\n}\r\nint main()\r\n{\r\n    char *str;\r\n    str = (char*)malloc(1000 * sizeof(char));\r\n    scanf(\"%[^\\n]s\",str);\r\n    string_reverse(str);\r\n    printf(\"%s\",str);\r\n    return 0;\r\n}\r\n\r\n", "9": " #include<stdio.h>\r\nint string_compare(char *str1_ptr, char *str2_ptr)\r\n{\r\n    int ind;\r\n    for(ind=0; *(str1_ptr+ind) && *(str2_ptr+ind); ind++)\r\n    {\r\n        if(*(str1_ptr+ind)!=*(str2_ptr+ind))\r\n        {\r\n            if((*(str1_ptr+ind) - *(str2_ptr+ind)) > 0)\r\n                return 1;\r\n            else\r\n                return -1;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    char *str1,*str2;\r\n    str1 = (char*)malloc(1000 * sizeof(char));\r\n    str2 = (char*)malloc(1000 * sizeof(char));\r\n    scanf(\"%s\",str1);\r\n    scanf(\"%s\",str2);\r\n    printf(\"%d\" ,string_compare(str1,str2));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nvoid print_element(void *ptr, int dt_ch)\r\n{\r\n    switch(dt_ch)\r\n    {\r\n        case 1 : printf(\"%c\",*(((char*)ptr)+1));\r\n        break;\r\n        case 2 : printf(\"%hd\",*(((short int*)ptr)+1));\r\n        break;\r\n        case 3 : printf(\"%ld\",*(((long int*)ptr)+1));\r\n        break;\r\n        case 4 : printf(\"%lld\",*(((long long int*)ptr)+1));\r\n        break;\r\n        case 5 : printf(\"%f\",*(((float*)ptr)+1));\r\n        break;\r\n        case 6 : printf(\"%lf\",*(((double*)ptr)+1));\r\n        break;\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,element,dt_ch,ind;\r\n    scanf(\"%d\",&size);\r\n    char *c_arr;\r\n    short int *sh_arr;\r\n    long int *l_arr;\r\n    long long int *ll_arr;\r\n    float *f_arr;\r\n    double *d_arr;\r\n    scanf(\"%d\",&element);\r\n    scanf(\"%d\",&dt_ch);\r\n    switch(dt_ch)\r\n    {\r\n        case 1 :\r\n            c_arr = (char*)malloc(size * sizeof(char));\r\n            scanf(\"%s\",c_arr);\r\n            print_element(c_arr+element , dt_ch);\r\n            break;\r\n        case 2 :\r\n            sh_arr = (short int*)malloc(size * sizeof(short int));\r\n            for(ind=0;ind<size;ind++)\r\n                scanf(\"%hd\",&sh_arr[ind]);\r\n            print_element(sh_arr+element, dt_ch);\r\n            break;\r\n        case 3 :\r\n              l_arr = (long int*)malloc(size * sizeof(long int));\r\n            for(ind=0;ind<size;ind++)\r\n                scanf(\"%ld\",&l_arr[ind]);\r\n            print_element(l_arr+element, dt_ch);\r\n            break;\r\n        case 4 :\r\n            ll_arr = (long long int*)malloc(size * sizeof(long long int));\r\n            for(ind=0;ind<size;ind++)\r\n                scanf(\"%lld\",&ll_arr[ind]);\r\n            print_element(ll_arr+element, dt_ch);\r\n            break;\r\n        case 5 :\r\n            f_arr = (float*)malloc(size * sizeof(float));\r\n            for(ind=0;ind<size;ind++)\r\n                scanf(\"%f\",&f_arr[ind]);\r\n            print_element(f_arr+element, dt_ch);\r\n            break;\r\n        case 6 :\r\n            d_arr = (double*)malloc(size * sizeof(double));\r\n            for(ind=0;ind<size;ind++)\r\n                scanf(\"%lf\",&d_arr[ind]);\r\n            print_element(d_arr+element, dt_ch);\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Primality_Testing_Level0": {"1": "#include<stdio.h>\r\nint Convert_Binary(int num)\r\n{\r\n    int bin=0,rem,power=1;\r\n    while(num)\r\n    {\r\n        rem = num%2;\r\n        bin = (power * rem) + bin;\r\n        power*=10;\r\n        num/=2;\r\n    }\r\n    return bin;\r\n}\r\nint Count_Bit(int num)\r\n{\r\n    int count=0;\r\n    while(num)\r\n    {\r\n        if(num%10==1)\r\n            count++;\r\n        num/=10;\r\n    }\r\n    return count;\r\n}\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0&&num!=2))\r\n        return 0;\r\n    if(num==2||num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Set_Bits(int start,int end)\r\n{\r\n    int num,bin,count=0;\r\n    for(num=start; num<=end; num++)\r\n    {\r\n        bin = Convert_Binary(num);\r\n        if(isPrime(Count_Bit(bin)))\r\n            count++;\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int start,end;\r\n    scanf(\"%d%d\",&start,&end);\r\n    printf(\"%d\",Set_Bits(start,end));\r\n    return 0;\r\n}\r\n\r\n\r\n", "2": "#include<stdio.h>\r\n#include<limits.h>\r\n#include<math.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0&&num!=2))\r\n        return 0;\r\n    if(num==2||num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Absolute_Difference(int *arr, int size)\r\n{\r\n    int min=INT_MAX,max=INT_MIN;\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(arr[ind] < min && isPrime(arr[ind]))\r\n            min = arr[ind];\r\n        if(arr[ind] > max && isPrime(arr[ind]))\r\n            max = arr[ind];\r\n    }\r\n    return abs(max-min);\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0; ind<size; scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",Absolute_Difference(arr,size));\r\n    return 0;\r\n}\r\n", "3": "#include <stdio.h>\r\nint Check_Rem(int num)\r\n{\r\n    int itr,sum=0,prod=1;\r\n    for(itr=1;itr<=num;itr++)\r\n\t{\r\n\tsum=sum+itr;\r\n\tprod=prod*itr;\r\n\t}\r\n\tif(prod%sum==0)\r\n        return 1;\r\n\telse\r\n        return 0;\r\n}\r\nint main(){\r\n\tint num;\r\n\tscanf(\"%d\", &num);\r\n    if(Check_Rem(num))\r\n        printf(\"YES\");\r\n    else\r\n        printf(\"NO\");\r\n}\r\n", "4": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0 && num!=2))\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<=num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Prime_Characters(char *str)\r\n{\r\n    int ind,itr,cnt1=0,cnt2;\r\n    for(ind=0; str[ind]; ind++)//ababb\r\n    {\r\n        if(str[ind]!=' ')\r\n        {\r\n            cnt1++;\r\n            cnt2=1;\r\n            for(itr=ind+1;str[itr];itr++)\r\n            {\r\n                if(str[itr] == str[ind])\r\n                {\r\n                    cnt2++;\r\n                    str[itr]=' ';\r\n                }\r\n            }\r\n            if(isPrime(cnt2)==0)\r\n                return 0;\r\n       }\r\n    }\r\n    if(isPrime(cnt1)==0)\r\n        return 0;\r\n    return 1;\r\n}\r\nint main()\r\n{\r\n    char str[100];\r\n    scanf(\"%s\",str);\r\n    if(Prime_Characters(str))\r\n        printf(\"YES\");\r\n    else\r\n        printf(\"NO\");\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint Min_Factor(int num)\r\n{\r\n    int fact;\r\n    for(fact=2; num!=1; fact++)\r\n    {\r\n        if(num%fact==0)\r\n            return fact;\r\n    }\r\n}\r\nvoid Prime_Factors(int *arr, int size)\r\n{\r\n    int ind,min;\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        min = Min_Factor(arr[ind]);\r\n        printf(\"%d \",arr[ind] - min);\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    Prime_Factors(arr,size);\r\n    return 0;\r\n}", "6": "#include<stdio.h>\r\nint Count_Factors(int num)\r\n{\r\n    int fact,count=0;\r\n    for(fact=1; fact<=num;fact++)\r\n        if(num%fact==0)\r\n            count++;\r\n    if(count==3)\r\n        return 1;\r\n    return 0;\r\n}\r\nvoid Triplet_Factors(int *arr, int size)\r\n{\r\n    int ind;\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        if(Count_Factors(arr[ind]))\r\n            printf(\"YES \");\r\n        else\r\n            printf(\"NO \");\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    Triplet_Factors(arr,size);\r\n    return 0;\r\n}", "7": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0 && num!=2))\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<=num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint isPrimeVerb(char *str)\r\n{\r\n    int ind,sum=0;\r\n    for(ind=0; str[ind]; ind++)\r\n    {\r\n        if(str[ind]>='a' && str[ind]<='z')\r\n            sum += (str[ind] - 96);\r\n        else\r\n            sum += (str[ind] - 38);\r\n    }\r\n    if(isPrime(sum))\r\n        return 1;\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%s\",str);\r\n    if(isPrimeVerb(str))\r\n        printf(\"Prime Verb\");\r\n    else\r\n        printf(\"Not a Prime Verb\");\r\n    return 0;\r\n}\r\n\r\n\r\n/*a-97\r\nAce\r\n*/\r\n", "8": "#include<stdio.h>\r\nint Two_Prime(int range)\r\n{\r\n    int num,count,cnt=0,temp,fact;\r\n    for(num=1; num<=range; num++)\r\n    {\r\n        temp = num;\r\n        count=0;\r\n        for(fact=2; temp!=1; fact++)\r\n        {\r\n            if(temp%fact==0)\r\n            {\r\n                count++;\r\n                while(temp%fact==0)\r\n                    temp/=fact;\r\n            }\r\n        }\r\n        if(count==2)\r\n            cnt++;\r\n    }\r\n    return cnt;\r\n}\r\nint main()\r\n{\r\n    int range;\r\n    scanf(\"%d\",&range);\r\n    printf(\"%d\",Two_Prime(range));\r\n    return 0;\r\n}", "9": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0 && num!=2))\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<=num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Perfect_Prime(int num)\r\n{\r\n    int dig;\r\n    if(isPrime(num))\r\n    {\r\n        while(num)\r\n        {\r\n            dig = num%10;\r\n            if(isPrime(dig)==0)\r\n                return 0;\r\n            num/=10;\r\n        }\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    if(Perfect_Prime(num))\r\n        printf(\"YES\");\r\n    else\r\n        printf(\"NO\");\r\n    return 0;\r\n}", "10": "#include<stdio.h>\r\nint isPrime(int num)\r\n{\r\n    int fact;\r\n    if(num==1 || (num%2==0 && num!=2))\r\n        return 0;\r\n    if(num==2 || num==3)\r\n        return 1;\r\n    if(num%6!=5 && num%6!=1)\r\n        return 0;\r\n    for(fact=3; fact*fact<=num; fact+=2)\r\n        if(num%fact==0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint Reverse(int num)\r\n{\r\n    int rev=0,dig;\r\n    while(num)\r\n    {\r\n        dig = num%10;\r\n        rev = rev * 10 + dig;\r\n        num/=10;\r\n    }\r\n    return rev;\r\n}\r\nint Tangled_Prime(int num)\r\n{\r\n    if(isPrime(num) && isPrime(Reverse(num)))\r\n        return 1;\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int num;\r\n    scanf(\"%d\",&num);\r\n    if(Tangled_Prime(num))\r\n        printf(\"YES\");\r\n    else\r\n        printf(\"NO\");\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_queue_level_0": {"1": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n  if(rear==-1||front==-1||front>rear)\r\n    return 0;\r\n  return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "2": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n  if(rear==-1||front==-1||front>rear)\r\n    return 0;\r\n  return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "3": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n   if(rear==-1||front==-1||front>rear)\r\n    return 0;\r\n  return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n  if(rear==-1||front==-1||front>rear)\r\n    return 0;\r\n  return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "5": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n  if(rear==-1||front==-1)\r\n    return 0;\r\n  return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "6": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint isEmpty( int  front ,int rear)\r\n{\r\n    if(front ==-1 || rear==-1 ||front>rear)\r\n        return 0;//empty queue\r\n    return 1;//non empty queue\r\n}\r\nint peek(int *queue , int  front,int rear)\r\n{\r\n    int peek_val;\r\n    if(front ==-1||front>rear||rear==-1)\r\n        return 0;//empty queue\r\n    peek_val=queue[front];\r\n    return peek_val;\r\n}\r\n\r\nint element_count(int front , int rear)\r\n{\r\n     if(rear==-1||front==-1||front>rear)\r\n    return 0;\r\n     return rear-front+1;//no of elements\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue=NULL;\r\n   int front=-1,rear=-1;\r\n   queue=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(queue,&front,&rear,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(queue,&front,&rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(queue,front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(front,rear);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"Non Empty Queue\\n\");\r\n                    break;\r\n            case 5: return_val=element_count(front,rear);\r\n                    printf(\"Number elements stored inside queue : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "7": "#include<stdio.h>//pre processed things\r\nstruct group\r\n{\r\n    int data;\r\n    int freq;\r\n};\r\nvoid enque(struct group queue[],int*front_ptr, int*rear_ptr,int enq_val)\r\n{\r\n  if((*front_ptr)==-1)\r\n    (*front_ptr)++;\r\n  (*rear_ptr)++;\r\n  queue[*rear_ptr].data=enq_val;\r\n  queue[*rear_ptr].freq=1;\r\n}\r\nstruct group deque(struct group queue[],int*front_ptr, int*rear_ptr)\r\n{\r\n struct group deq_val={-1,-1};\r\n if(*front_ptr > *rear_ptr)\r\n    return deq_val;\r\n deq_val=queue[*front_ptr];\r\n (*front_ptr)++;\r\n return deq_val;\r\n}\r\nint isAvailable(struct group  queue[],int front, int rear,int search_val)\r\n{\r\n    int ind;\r\n    for(ind=front;ind<=rear;ind+=1)\r\n      if(queue[ind].data==search_val)\r\n            return ind;\r\n    return -1;\r\n}\r\nint find_first_unique(int arr[], int no_ele)\r\n{\r\n    int ind;\r\n    struct group queue[no_ele];\r\n    int front ;\r\n    int rear;\r\n    int avail_ind;\r\n    struct group deq_val;\r\n    front=rear=-1;\r\n    for(ind=0;ind<no_ele;ind+=1)\r\n    {\r\n        avail_ind=isAvailable(queue,front,rear,arr[ind]);\r\n        if(avail_ind==-1)//not found\r\n        {\r\n            enque(queue,&front,&rear,arr[ind]);\r\n        }\r\n        else\r\n        {\r\n            queue[avail_ind].freq++;\r\n        }\r\n    }\r\n    while(front<=rear)\r\n    {\r\n        deq_val=deque(queue,&front,&rear);\r\n        if(deq_val.freq==1)\r\n            return deq_val.data;\r\n    }\r\n    return -1;\r\n}\r\nint main()//entry point\r\n{\r\n    int no_ele;\r\n    scanf(\"%d\",&no_ele);\r\n    int * arr;\r\n    arr=(int*)malloc(no_ele*sizeof(int));\r\n    int ind;\r\n    for(ind=0;ind<no_ele;ind+=1)\r\n        scanf(\"%d\",&arr[ind]);\r\n    int res;\r\n    res=find_first_unique(arr,no_ele);\r\n    printf(\"%d\",res);\r\n    return 0;\r\n}\r\n\r\n", "8": "#include<stdio.h>//pre processed things\r\nvoid enque(int queue[] , int * front_ptr , int* rear_ptr,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n       (*front_ptr)++;\r\n    (*rear_ptr)++;\r\n    queue[(*rear_ptr)]=enq_val;\r\n}\r\nint deque(int queue[], int * front_ptr , int* rear_ptr )\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr)\r\n        return -1;\r\n    deq_val=queue[*front_ptr];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\nint main()//entry point\r\n{\r\n    int input;\r\n    scanf(\"%d\",&input);\r\n    int *queue=(int*)malloc((input+1)*sizeof(int));\r\n    int front;\r\n    int rear;\r\n    int deq_val;\r\n    queue[0]=1;\r\n    front=rear=0;\r\n    while(1)\r\n    {\r\n        deq_val=deque(queue,&front,&rear);\r\n        printf(\"%d \",deq_val);\r\n        //getch();\r\n        if(rear<input)\r\n            enque(queue,&front,&rear,deq_val*10);\r\n        else\r\n            break;\r\n        if(rear<input)\r\n            enque(queue,&front,&rear,deq_val*10+1);\r\n        else\r\n            break;\r\n    }\r\n     while(front<rear)\r\n     {\r\n        deq_val=deque(queue,&front,&rear);\r\n        printf(\"%d \",deq_val);\r\n     }\r\n\r\n    return 0;\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint enque(int * main_stack, int * main_top_ptr , int enq_val)\r\n{\r\n    return push(main_stack,main_top_ptr,enq_val);\r\n}\r\nint deque(int * main_stack, int * main_top_ptr , int * temp_stack , int* temp_top_ptr)\r\n{\r\n   int pop_val;\r\n   while(1)\r\n   {\r\n       pop_val=pop(main_stack,main_top_ptr);\r\n       if(pop_val==0)\r\n        return 0;\r\n       if((*main_top_ptr)==-1)//last ele\r\n       {\r\n           int p_val;\r\n           while(1)\r\n           {\r\n               p_val=pop(temp_stack,temp_top_ptr);\r\n               if(p_val==0)\r\n                break;\r\n               push(main_stack,main_top_ptr,p_val);\r\n           }\r\n           break;\r\n       }\r\n       else\r\n        push(temp_stack,temp_top_ptr,pop_val);\r\n   }\r\n   return pop_val;\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack1=NULL;\r\n   int * stack2=NULL;\r\n   int top1=-1;\r\n   int top2=-1;\r\n   stack1=(int*)calloc(1001,sizeof(int));\r\n   stack2=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = enque(stack1,&top1,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Queue Full\\n\");\r\n                    break;\r\n            case 2: return_val=deque(stack1,&top1,stack2,&top2);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Queue\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "10": "#include<stdio.h>\r\nint enque(int *queue , int * front_ptr, int * rear_ptr ,int enq_val)\r\n{\r\n    if((*front_ptr)==-1)\r\n        *front_ptr=0;\r\n    (*rear_ptr)++;\r\n    if(*rear_ptr > 1000)\r\n        return -1;//queue full\r\n    queue[(*rear_ptr)]=enq_val;\r\n    return 1;\r\n}\r\nint deque(int *queue , int * front_ptr , int * rear_ptr)\r\n{\r\n    int deq_val;\r\n    if(*front_ptr > *rear_ptr || (*front_ptr)==-1 || (*rear_ptr)==-1)\r\n    {\r\n        (*front_ptr)=(*rear_ptr)=-1;\r\n        return 0;//empty queue\r\n    }\r\n    deq_val=queue[(*front_ptr)];\r\n    (*front_ptr)++;\r\n    return deq_val;\r\n}\r\n\r\nint push(int * main_queue , int * main_front_ptr, int * main_rear_ptr ,  int push_val)\r\n{\r\n    return enque(main_queue,main_front_ptr,main_rear_ptr,push_val);\r\n}\r\nint pop(int * main_queue , int * main_front_ptr, int * main_rear_ptr , int * temp_queue , int * temp_front_ptr, int * temp_rear_ptr )\r\n{\r\n  int deq_val;\r\n  while(1)\r\n  {\r\n      deq_val=deque(main_queue,main_front_ptr,main_rear_ptr);\r\n      if(deq_val==0)\r\n        return 0;\r\n      if((*main_front_ptr)>(*main_rear_ptr))// to identify last ele\r\n      {\r\n          (*main_front_ptr)=(*main_rear_ptr)=-1;\r\n           int d_val;\r\n           while(1)\r\n           {\r\n               d_val=deque(temp_queue,temp_front_ptr,temp_rear_ptr);\r\n               if(d_val==0)\r\n                break;\r\n               else\r\n                enque(main_queue,main_front_ptr,main_rear_ptr,d_val);\r\n           }\r\n          break;\r\n      }\r\n      else\r\n        enque(temp_queue,temp_front_ptr,temp_rear_ptr,deq_val);\r\n }\r\n return deq_val;\r\n}\r\nint main()//entry point\r\n{\r\n   int * queue1=NULL;\r\n   int front1=-1,rear1=-1;\r\n   int * queue2=NULL;\r\n   int front2=-1,rear2=-1;\r\n   queue1=(int*)calloc(1001,sizeof(int));\r\n   queue2=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(queue1,&front1,&rear1,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(queue1,&front1,&rear1,queue2,&front2,&rear2);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n    return 0;\r\n}\r\n\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Recursion_Level_0": {"1": "#include<stdio.h>  \nvoid PrintNumbers(long long int Num)\n{\n     if(Num>0)\n     {\n          PrintNumbers(Num-1);\n          printf(\"%lld \",Num);\n     }\n}\nint main()\n{\n   long  long int Num; \n   scanf(\"%lld\",&Num); \n   PrintNumbers(Num);\n  return 0;\n}\n\n", "2": "#include<stdio.h>  \nvoid PrintNumbers(long long int Num)\n{\n     if(Num>0)\n     {\n          printf(\"%lld \",Num); \n          PrintNumbers(Num-1);\n     }\n}\nint main()\n{\n   long long int Num; \n   scanf(\"%lld\",&Num); \n   PrintNumbers(Num);\n}\n\n", "3": "#include<stdio.h>  \n#include <stdio.h>\nvoid printMultiplesOfFive(long long int Num)\n{\n    if(Num<=0)\n        return;\n    printMultiplesOfFive(Num-1); \n    if(Num%5==0)\n        printf(\"%lld \",Num);\n}\nint main()\n{\n   long long int Num; \n   scanf(\"%lld\",&Num); \n   printMultiplesOfFive(Num);\n  return 0;\n}\n\n", "4": "#include<stdio.h>  \n#include <stdio.h>\nvoid printNumbers(long long int Num)\n{\n   if(Num>0)\n   {\n     printf(\"%lld \",Num); \n     printNumbers(Num-1); \n     printf(\"%lld \",Num);\n   }\n}\nint main()\n{\n   long long int Num; \n   scanf(\"%lld\",&Num); \n   printNumbers(Num);\n  return 0;\n}\n", "5": "#include<stdio.h>  \n#include <stdio.h>\nvoid printNumbers(long long int Num)\n{\n   if(Num>0)\n   {\n     if(Num%2==0)\n     {\n     printf(\"%ld \",Num);\n     }\n     printNumbers(Num-1); \n     if(Num%2==1)\n     {\n     printf(\"%ld \",Num);\n     }\n   }\n}\nint main()\n{\n   long long int Num; \n   scanf(\"%lld\",&Num); \n   printNumbers(Num);\n}\n\n", "6": "#include <stdio.h>\nlong long int FindProduct(long long int Num)\n{\n  if(Num==1)\n  {\n   return 1;\n  }\n  else\n  {\n   return FindProduct(Num-1)*Num;\n  }\n}\nint main()\n{\n   long long int Num; \n   scanf(\"%lld\",&Num); \n   printf(\"%lld\",FindProduct(Num));\n}\n", "7": "#include<stdio.h>\n#include<stdlib.h>\nlong long int FindAbsoluteDiff(long long int Num)\n{ \n  static long long int itr=1,sum_3=0,sum_5=0;\n    if(itr>Num)\n    {\n        return abs(sum_3-sum_5);\n    }\n    if(itr%3==0)\n    {\n        sum_3+=itr;\n    }\n    if(itr%5==0){\n        sum_5+=itr;\n    }\n    itr++;\n    return FindAbsoluteDiff(Num);\n}\nint main()\n{\n    long long int Num; \n    scanf(\"%lld\",&Num);\n    long long  int result=FindAbsoluteDiff(Num);\n    printf(\"%lld\",result);\n    return 0;\n}\n", "8": "#include<stdio.h>\nlong long int addNumbers(long long int num,long int multiple)\n{  \n   static long long int sum=0; \n   if(num>0)\n   {\n     sum=sum+num;\n     if(num==0||sum%multiple==0)\n     {\n        return sum;\n     }\n     else\n     {\n       addNumbers(num-1,multiple);\n     }\n   }\n}\nint main()\n{\n    long long int Num,multiple;\n    scanf(\"%lld\",&Num);\n    scanf(\"%lld\",&multiple);\n    long long int sum=addNumbers(Num,multiple);\n    printf(\"%lld\",sum);\n    return 0;\n}\n", "9": "#include<stdio.h>\nvoid printTable(long long int Number)\n{\n  static long long int i=1;\n  if(i==Number+1)\n  {\n   return;\n  }\n  printf(\"%lld * %lld = %lld\\n\",i,Number,i*Number); \n  i++;\n  printTable(Number);\n}\nint main()\n{\n    long long int Number;\n    scanf(\"%lld\", &Number);\n    printTable(Number);\n    return 0;\n}\n\n", "10": "#include<stdio.h> \nlong long int SumofNnaturalNumber(long long int Num) \n{\n static long long int sum=0;\n if(Num==0)\n {\n  return 0;\n }\n else\n {\n  sum=Num+SumofNnaturalNumber(Num-1);\n }\n return sum;\n}\nint main()\n{\n long long  int Num; \n scanf(\"%lld\",&Num); \n printf(\"%lld\",SumofNnaturalNumber(Num));\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Recursion_Level_1": {"1": "#include<stdio.h> \nlong long int PowerCalculate(long long int base,long long int expo)\n{\n if(expo==0)\n {\n  return 1;\n }\n else if(expo==1)\n {\n  return base;\n }\n else if(expo%2==0)\n {\n  return PowerCalculate(base*base,expo/2); \n }\n else\n {\n  return PowerCalculate(base*base,expo/2)*base;\n }\n}\nint main()\n{\n long long  int base,expo; \n scanf(\"%lld %lld\",&base,&expo); \n printf(\"%lld\",PowerCalculate(base,expo));\n return 0;\n}\n", "2": "#include<stdio.h> \nlong long int CountDigits(long long int Num)\n{\n  if(Num==0)\n  {\n   return 0;\n  }\n  else\n  {\n   return 1+CountDigits(Num/10);  \n  }\n}\nint main()\n{\n long long  int Num; \n scanf(\"%lld\",&Num); \n printf(\"%lld\",CountDigits(Num));\n return 0;\n}\n", "3": "#include<stdio.h> \nlong long int SumOfDigits(long long int Num)\n{\n  if(Num==0)\n  {\n   return 0;\n  }\n  else\n  {\n   return (Num%10)+SumOfDigits(Num/10);  \n  }\n}\nint main()\n{\n long long  int Num; \n scanf(\"%lld\",&Num); \n printf(\"%lld\",SumOfDigits(Num));\n return 0;\n}\n", "4": "#include<stdio.h> \nlong long int ReverseNumber(long long int Num)\n{ \n static long long int rev=0;\n  if(Num>0)\n  { \n   int rem=Num%10;\n   rev=rev*10+rem;  \n   ReverseNumber(Num/10);\n  } \n  return rev;\n}\nint main()\n{\n long long int Num; \n scanf(\"%lld\",&Num); \n printf(\"%lld\",ReverseNumber(Num));\n return 0;\n }\n", "5": "#include<stdio.h>\nlong long int DectoBin(long long int decimal)\n{\n    if(decimal==0)\n    {\n        return 0;\n    }\n    else\n    {\n        return(decimal%2+10*DectoBin(decimal/2));\n    }\n}\nint main()\n{\n    long long int decimal;\n    scanf(\"%lld\",&decimal);\n    printf(\"%lld\",DectoBin(decimal));\n    return 0;\n}\n\n", "6": "#include <stdio.h>\n#include <stdlib.h>\nlong long int recursive_sum_diff(long long int Num)\n{\n static long long int odd_sum=0,even_sum=0;\n    if(Num==0)\n    {\n        return abs(odd_sum-even_sum);\n    }\n    else\n    {\n        int digit=Num%10;\n        if(digit%2==0)\n        {\n            even_sum+=digit;\n        }\n        else\n        {\n            odd_sum+=digit;\n        }\n        return recursive_sum_diff(Num/10);\n    }\n}\nint main()\n{\n    long long int Num,result;\n    scanf(\"%lld\", &Num);\n    result =recursive_sum_diff(Num);\n    printf(\"%lld\",result);\n    return 0;\n}\n", "7": "#include<stdio.h>\nlong long int BintoDec(long long int binary)\n{\n    if(binary==0)\n    {\n        return 0;\n    }\n    else\n    {\n        return (binary%10+2*BintoDec(binary/10));\n    }\n}\nint main()\n{\n    long long int binary;\n    scanf(\"%lld\",&binary);\n    printf(\"%lld\",BintoDec(binary));\n    return 0;\n}\n", "8": "#include<stdio.h>\r\nlong long int FindGCD(long long int num1,long long int num2)\r\n{\r\n    if(num2==0)\r\n    {\r\n        return num1;\r\n    }\r\n    else\r\n    {\r\n        return FindGCD(num2,num1%num2);\r\n    }\r\n}\r\nint main()\r\n{\r\n    long long int num1,num2;\r\n    scanf(\"%lld %lld\", &num1,&num2);\r\n    printf(\"%lld\",FindGCD(num1,num2));\r\n    return 0;\r\n}", "9": "#include<stdio.h>\r\nlong long int gcd(long long int num1,long long int num2)\r\n{\r\n    if(num2==0)\r\n    {\r\n        return num1;\r\n    }\r\n    else\r\n    {\r\n        return gcd(num2,num1%num2);\r\n    }\r\n}\r\nlong long int FindLCM(long long int num1,long long int num2)\r\n{\r\n    return (num1*num2)/gcd(num1,num2);\r\n}\r\nint main()\r\n{\r\n    long long int num1,num2;\r\n    scanf(\"%lld %lld\", &num1,&num2);\r\n    printf(\"%lld\",FindLCM(num1,num2));\r\n    return 0;\r\n}", "10": "#include<stdio.h>\r\nlong long int FibbNthTerm(long long int N)\r\n{\r\n    if(N==0||N==1)\r\n    {\r\n     return N;\r\n    }\r\n    else\r\n    {\r\n     return FibbNthTerm(N-1)+FibbNthTerm(N-2);\r\n    }\r\n}\r\nint main()\r\n{\r\n    long long int N;\r\n    scanf(\"%lld\",&N);\r\n    printf(\"%lld\",FibbNthTerm(N));\r\n    return 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Searching_Level_0": {"1": "#include<stdio.h>\r\nint Search_Element(int *arr,int size,int ele)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(arr[ind]==ele)\r\n            return ind;\r\n    }\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    int size,element,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size*sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    scanf(\"%d\",&element);\r\n    printf(\"%d\" ,Search_Element(arr,size,element));\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nint Calculate_Middle(int *arr,int start,int end)\r\n{\r\n    int mid;\r\n    mid = (start+end)/2;\r\n    return arr[mid];\r\n}\r\nint main()\r\n{\r\n    int size,start,end,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size*sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    scanf(\"%d %d\",&start,&end);\r\n    printf(\"%d\",Calculate_Middle(arr,start,end));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<limits.h>\r\nint Third_Largest(int *arr,int size)\r\n{\r\n    int first=arr[0],second=INT_MIN,third=INT_MIN,ind;\r\n    for(ind=1;ind<size;ind++)\r\n    {\r\n        if(arr[ind] > first)\r\n        {\r\n            third = second;\r\n            second = first;\r\n            first = arr[ind];\r\n        }\r\n        else if(arr[ind] > second)\r\n        {\r\n            third = second;\r\n            second = arr[ind];\r\n        }\r\n        else if(arr[ind] > third)\r\n            third = arr[ind];\r\n    }\r\n    return third;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size*sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    printf(\"%d\",Third_Largest(arr,size));\r\n    return 0;\r\n}\r\n", "4": "\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<limits.h>\r\nvoid Lost_Element(int *arr1,int*arr2,int size1,int size2)\r\n{\r\n    int ind1 ,ind2,ind,outer,inner,temp,r_ind=0;\r\n    int res_arr[1000];\r\n    for(ind1=0;ind1<size1;ind1++)\r\n    {\r\n        for(ind2=0;ind2<size2;ind2++)\r\n        {\r\n            if(arr1[ind1] == arr2[ind2])\r\n            {\r\n                arr1[ind1]=-1;\r\n                arr2[ind2]=-1;\r\n            }\r\n        }\r\n    }\r\n    for(ind=0;ind<size1;ind++)\r\n        if(arr1[ind]!=-1)\r\n        res_arr[r_ind++]=arr1[ind];\r\n    for(ind=0;ind<size2;ind++)\r\n        if(arr2[ind]!=-1)\r\n        res_arr[r_ind++]=arr2[ind];\r\n    for(outer=0;outer<r_ind;outer++)\r\n    {\r\n        for(inner=0;inner<(r_ind-1)-outer;inner++)\r\n        {\r\n            if(res_arr[inner] > res_arr[inner+1])\r\n            {\r\n                temp = res_arr[inner];\r\n                res_arr[inner]=res_arr[inner+1];\r\n                res_arr[inner+1]=temp;\r\n            }\r\n        }\r\n    }\r\n    for(ind=0;ind<r_ind;ind++)\r\n        printf(\"%d \",res_arr[ind]);\r\n}\r\nint main()\r\n{\r\n    int size1,size2,ind;\r\n    scanf(\"%d\",&size1);\r\n    int *arr1,*arr2;\r\n    arr1 = (int*)malloc(size1*sizeof(int));\r\n    for(ind=0;ind<size1;scanf(\"%d\",&arr1[ind++]));\r\n    scanf(\"%d\",&size2);\r\n    arr2 =(int*)malloc(size2*sizeof(int));\r\n    for(ind=0;ind<size2;scanf(\"%d\",&arr2[ind++]));\r\n    Lost_Element(arr1,arr2,size1,size2);\r\n    return 0;\r\n}\r\n\r\n", "5": "#include<stdio.h>\r\nint Sum_of_Right(int *arr,int size,int start)\r\n{\r\n    int ind,sum=0;\r\n    for(ind=start+1;ind<size;ind++)\r\n        sum+=arr[ind];\r\n    return sum;\r\n}\r\nint Sum_of_Left(int *arr,int size,int start)\r\n{\r\n    int ind,sum=0;\r\n    for(ind=start-1;ind>=0;ind--)\r\n        sum+=arr[ind];\r\n    return sum;\r\n}\r\nint Find_Sum(int *arr,int size)\r\n{\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(Sum_of_Left(arr,size,ind) ==  Sum_of_Right(arr,size,ind))\r\n            return 1;\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size* sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    if(Find_Sum(arr,size))\r\n        printf(\"Yes\");\r\n    else\r\n        printf(\"No\");\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nvoid Indexing_Element(int* arr, int size)\r\n{\r\n    int ind,flag=0;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(arr[ind]==ind+1)\r\n        {\r\n            printf(\"%d \",arr[ind]);\r\n            flag=1;\r\n        }\r\n    }\r\n    if(flag==0)\r\n        printf(\"0\");\r\n}\r\nint main()\r\n{\r\n    int size,end,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    Indexing_Element(arr,size);\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint Count_Occurence(int *arr,int size,int ele)\r\n{\r\n    int hash[10000] = {0};\r\n    int ind;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n       hash[arr[ind]]++;\r\n    }\r\n    return hash[ele];\r\n\r\n}\r\nint main()\r\n{\r\n    int size,ele,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int*));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    scanf(\"%d\",&ele);\r\n    printf(\"%d\",Count_Occurence(arr,size,ele));\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint Find_Ones(char *str)\r\n{\r\n    int len,ind;\r\n    for(len=0;str[len];len++);\r\n    for(ind=len-1; ind>=0;ind--)\r\n        if(str[ind]=='1')\r\n            return ind;\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%[^\\n]s\",str);\r\n    printf(\"%d\",Find_Ones(str));\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nint Find_Negative(int **mat,int tot_row,int tot_col)\r\n{\r\n    int row,col,count=0;\r\n    for(row=0; row<tot_row;row++)\r\n    {\r\n        for(col=tot_col-1;col>=0;col--)\r\n        {\r\n            if(mat[row][col] < 0)\r\n                count++;\r\n            else\r\n                break;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int tot_row,tot_col,row,col;\r\n    scanf(\"%d%d\",&tot_row,&tot_col);\r\n    int **mat;\r\n    mat = (int**)malloc(tot_row * sizeof(int*));\r\n    for(row=0;row<tot_row;row++)\r\n        mat[row] = (int*)malloc(tot_col * sizeof(int));\r\n    for(row=0;row<tot_row;row++)\r\n        for(col=0;col<tot_col;col++)\r\n            scanf(\"%d\",&mat[row][col]);\r\n    printf(\"%d\",Find_Negative(mat,tot_row,tot_col));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint* Index_Range(int *arr,int size,int ele)\r\n{\r\n    int ind,start=-1,end,count=0;\r\n    int *ans;\r\n    ans = (int*)malloc(2 * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        if(arr[ind]==ele)\r\n        {\r\n            if(count==0)\r\n            {\r\n                start = ind;\r\n                count+=1;\r\n            }\r\n            else\r\n                count++;\r\n        }\r\n    }\r\n    end = (count+start)-1;\r\n    ans[0]=start;\r\n    ans[1]=end;\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    int size,ind,ele;\r\n    scanf(\"%d\",&size);\r\n    int *arr,*res;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    scanf(\"%d\",&ele);\r\n    res=Index_Range(arr,size,ele);\r\n    if(res[0]==-1)\r\n        printf(\"-1\");\r\n    else\r\n        printf(\"%d %d\",res[0],res[1]);\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "SLL_Level_0": {"1": "\"#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"\"%d \"\",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nint main()\n{\n    SLL_NODE *start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"\"%d\"\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    display(start);\n}\n\"", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE * tptr;\r\n        for(tptr=start ;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\r\n            tptr->next=newnode;\r\n        }\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_node(num,&start);\r\n\r\n    }\r\n    display(start);\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\r\n            tptr->next=newnode;\r\n        }\r\n}\r\nint search_element(int search_key,SLL_NODE *start)\r\n{\r\n    SLL_NODE *tptr;\r\n    for(tptr=start;tptr!=NULL;tptr=tptr->next)\r\n    {\r\n        if(tptr->data==search_key)\r\n            return 1;\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_node(num,&start);\r\n\r\n    }\r\n    int search_key,return_ans;\r\n    scanf(\"%d\",&search_key);\r\n    return_ans=search_element(search_key,start);\r\n    if(return_ans==1)\r\n        printf(\"Element Found\");\r\n    else\r\n        printf(\"Element Not Found\");\r\n    //display(start);\r\n}\r\n", "4": " #include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE * tptr;\r\n        for(tptr=start ;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_begin(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            newnode->next=(*start_ptr);\r\n            (*start_ptr)=newnode;\r\n        }\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_begin(num,&start);\r\n    }\r\n    display(start);\r\n}\r\n", "5": " #include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE * tptr;\r\n        for(tptr=start ;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_at_end(int input,SLL_NODE **start_ptr,SLL_NODE **end_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=*end_ptr=newnode;\r\n    else\r\n        {\r\n            (*end_ptr)->next=newnode;\r\n            (*end_ptr)=newnode;\r\n        }\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL,*end=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_at_end(num,&start,&end);\r\n    }\r\n    display(start);\r\n}\r\n", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE *tptr;\r\n        for(tptr=start;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode, *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\r\n            tptr->next=newnode;\r\n        }\r\n}\r\nvoid deletion_at_begin(SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *tptr=(*start_ptr);\r\n    if(*start_ptr==NULL)\r\n        printf(\"List Not Found\");\r\n    else\r\n    {\r\n        (*start_ptr)=(*start_ptr)->next;\r\n       free(tptr);\r\n    }\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_node(num,&start);\r\n\r\n    }\r\n    deletion_at_begin(&start);\r\n    display(start);\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE *tptr;\r\n        for(tptr=start;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode, *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\r\n            tptr->next=newnode;\r\n        }\r\n}\r\nvoid deletion_at_end(SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *shadow,*tptr;\r\n    for(tptr=(*start_ptr);tptr->next!=NULL;shadow=tptr,tptr=tptr->next);\r\n    shadow->next=NULL;\r\n    free(tptr);\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_node(num,&start);\r\n\r\n    }\r\n    deletion_at_end(&start);\r\n    display(start);\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE * tptr;\r\n        for(tptr=start ;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid sorted_insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    SLL_NODE *shadow=NULL;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr!=NULL&&tptr->data<input;shadow=tptr,tptr=tptr->next);\r\n             if(tptr==(*start_ptr))\r\n             {\r\n                 newnode->next=tptr;\r\n                 (*start_ptr)=newnode;\r\n             }\r\n             else if(tptr==NULL)\r\n             {\r\n                 shadow->next=newnode;\r\n             }\r\n             else\r\n             {\r\n                 newnode->next=tptr;\r\n                 shadow->next=newnode;\r\n             }\r\n        }\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        sorted_insert_node(num,&start);\r\n    }\r\n    display(start);\r\n}\r\n", "9": "#include<stdio.h>\r\n#include<stdlib.h>\r\nstruct sll_node\r\n{\r\n    int data;\r\n    struct sll_node *next;\r\n};\r\ntypedef struct sll_node SLL_NODE;\r\nvoid display(SLL_NODE *start)\r\n{\r\n SLL_NODE * tptr;\r\n        for(tptr=start ;tptr;tptr=tptr->next)\r\n            printf(\"%d \",tptr->data);\r\n}\r\nSLL_NODE *create_node(int input)\r\n{\r\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\r\n    newnode->data=input;\r\n    newnode->next=NULL;\r\n    return newnode;\r\n}\r\nvoid insert_node(int input,SLL_NODE **start_ptr)\r\n{\r\n    SLL_NODE *newnode;\r\n    SLL_NODE *tptr;\r\n    newnode=create_node(input);\r\n    if(*start_ptr==NULL)\r\n        *start_ptr=newnode;\r\n    else\r\n        {\r\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\r\n            tptr->next=newnode;\r\n        }\r\n}\r\nint search_delete_element(int search_key,SLL_NODE **start_ptr)\r\n{\r\n       SLL_NODE *tptr,*shadow=NULL;\r\n       for(tptr=(*start_ptr);tptr!=NULL&&tptr->data!=search_key;shadow=tptr,tptr=tptr->next);\r\n       if(tptr==NULL)\r\n       {\r\n             return 0;\r\n       }\r\n       else if(tptr==(*start_ptr))\r\n       {\r\n           (*start_ptr)=(*start_ptr)->next;\r\n           free(tptr);\r\n           return 1;\r\n       }\r\n       else\r\n       {\r\n           shadow->next=tptr->next;\r\n           free(tptr);\r\n           return 1;\r\n       }\r\n\r\n}\r\nint main()\r\n{\r\n    SLL_NODE *start=NULL;\r\n    int num;\r\n    while(1)\r\n    {\r\n        scanf(\"%d\",&num);\r\n        if(num==-1)\r\n            break;\r\n        insert_node(num,&start);\r\n\r\n    }\r\n    int search_key;\r\n    scanf(\"%d\",&search_key);\r\n    if(search_delete_element(search_key,&start)==0)\r\n        printf(\"Element Not Found\");\r\n    else\r\n    display(start);\r\n}\r\n", "10": "#include <stdio.h>\n#include<stdlib.h>\nstruct node\n{\n  int data;\n  struct node *next;\n};\ntypedef struct node NODE;\nNODE* createnode(int input)\n{\n    NODE*newnode;\n    newnode=(NODE*)malloc(sizeof(NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nNODE* insertionatend(NODE* *startptr,int input)\n{\n    NODE* newnode,*tptr;\n    newnode=createnode(input);\n     if(*startptr==NULL)\t\t\t\t\t\t\n      *startptr=newnode;\t\t\t\t\t\t\n     else\t\n    {\n     for(tptr=*startptr;tptr->next!=NULL;tptr=tptr->next);\t\t\t\t\t\t\n     tptr->next=newnode;\t\t\n    }\n}\nvoid reverselist(NODE* *startptr)\n{\n  NODE  *work,*safe,*newnext;\n   work=*startptr;\t\n   newnext=NULL;\t\n   while(work!=NULL)\t\n   {\t\n   safe=work->next;\t\n   work->next=newnext;\t\n   newnext=work;\t\n   work=safe;\t\n   }\t\n   *startptr=newnext;\t\n}\nint main()\n{\n    int input;\n    NODE *start=NULL,*tptr;\n   while(1)\n   {\n    scanf(\"%d\",&input);\n    if(input==-1)\n     break;\n    //insertionatbegin(&start,input);\n    insertionatend(&start,input);\n    }\n    reverselist(&start);\n    for(tptr=start;tptr!=NULL;tptr=tptr->next)\n       printf(\"%d \",tptr->data);\n}\n\n\n\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "dont useSLL_Level_1": {"1": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\nshadow->next=newnode;\r\nelse\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nNODEPTR swapNodes(NODEPTR ptr)\r\n{\r\n NODEPTR temp;\r\n if(ptr==NULL||ptr->next==NULL)\r\n return ptr;\r\n else\r\n {\r\n temp=ptr->next;\r\n ptr->next=temp->next;\r\n temp->next=ptr;\r\n ptr=temp;\r\n ptr->next->next=swapNodes(ptr->next->next);\r\n return ptr;\r\n }\r\n}\r\nvoid displayList()\r\n{\r\n for(tptr=start;tptr;tptr=tptr->next)\r\n printf(\"%d \",tptr->data);\r\n}\r\nint main()\r\n{\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n start=swapNodes(start);\r\n displayList();\r\n return 0;\r\n}\r\n", "2": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data>newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid display_list()\r\n{\r\n for(tptr=start; tptr; tptr=tptr->next)\r\n printf(\"%d \", tptr->data);\r\n}\r\nint main()\r\n{\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n display_list();\r\n return 0;\r\n}", "3": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid display_list()\r\n{\r\n for(tptr=start; tptr; tptr=tptr->next)\r\n printf(\"%d \", tptr->data);\r\n}\r\nint main()\r\n{\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n display_list();\r\n return 0;\r\n}\r\n", "4": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\nshadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid moveLasttoFront()\r\n{\r\n for(tptr=start;tptr->next;shadow=tptr,tptr=tptr->next);\r\n if(tptr!=start)\r\n {\r\n tptr->next=start;\r\n start=tptr;\r\n shadow->next=NULL;\r\n }\r\n}\r\nvoid displayList()\r\n{\r\n for(tptr=start;tptr;tptr=tptr->next)\r\n printf(\"%d \",tptr->data);\r\n}\r\nint main()\r\n{\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n moveLasttoFront();\r\n displayList();\r\n return 0;\r\n}\r\n", "5": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid display_list()\r\n{\r\n for(tptr=start; tptr; tptr=tptr->next)\r\n printf(\"%d \", tptr->data);\r\n}\r\nvoid deleteNode(int search_value)\r\n{\r\n for(tptr=start;tptr&&tptr->data!=search_value;shadow=tptr,tptr=tptr->next);\r\n if(tptr)\r\n {\r\n if(tptr==start)\r\n {\r\n start=start->next;\r\nfree(tptr);\r\n }\r\n else\r\n {\r\n shadow->next=tptr->next;\r\n free(tptr);\r\n }\r\n }\r\n}\r\nint main()\r\n{\r\n int N, num, del_value;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n scanf(\"%d\",&del_value);\r\n deleteNode(del_value);\r\n display_list();\r\n return 0;\r\n}\r\n", "6": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data>newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid display_list()\r\n{\r\n for(tptr=start; tptr; tptr=tptr->next)\r\n printf(\"%d \", tptr->data);\r\n}\r\n// This is the solution\r\nchar * search_node( int search_value)\r\n{\r\n for(tptr=start;tptr&&tptr->data!=search_value;tptr=tptr->next);\r\n if(tptr)\r\n return \"Found\";\r\n else\r\n return \"Not found\";\r\n}\r\nint main()\r\n{\r\n int N, num, search_value;\r\nscanf(\"%d\",&N);\r\nwhile(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n scanf(\"%d\",&search_value);\r\n printf(\"%d %s\",search_value,search_node(search_value));\r\n return 0;\r\n}\r\n", "7": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\nnewnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nint countNodes()\r\n{\r\n int count;\r\n for(count=0,tptr=start;tptr;tptr=tptr->next,count++);\r\n return count;\r\n}\r\nint main()\r\n{\r\n int N, num, del_value;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n printf(\"%d \",countNodes());\r\n return 0;\r\n}", "8": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\nvoid displayListBwd(NODEPTR ptr)\r\n{\r\nif(ptr==NULL)\r\n return;\r\n else\r\n {\r\n displayListBwd(ptr->next);\r\n printf(\"%d \",ptr->data);\r\n }\r\n}\r\nint main()\r\n{\r\n int N, num, del_value;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n displayListBwd(start);\r\n return 0;\r\n}\r\n", "9": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node {\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num) {\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\n shadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n } }\r\nvoid moveFronttoLast() {\r\n for(tptr=start;tptr;shadow=tptr,tptr=tptr->next);\r\n if(shadow)\r\n {\r\n shadow->next=start;\r\n start=start->next;\r\n shadow->next->next=NULL;\r\n } }\r\nvoid displayList() {\r\n for(tptr=start;tptr;tptr=tptr->next)\r\n printf(\"%d \",tptr->data); }\r\nint main() {\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n moveFronttoLast();\r\ndisplayList();\r\n return 0;\r\n}\r\n", "10": "#include <stdio.h>\r\n#include <malloc.h>\r\ntypedef struct node\r\n{\r\n int data;\r\n struct node *next;\r\n}NODE;\r\ntypedef struct node* NODEPTR;\r\nNODEPTR start, newnode, tptr, shadow;\r\nvoid insert_node(int num)\r\n{\r\n newnode=(NODEPTR)malloc(sizeof(NODE));\r\n newnode->data=num;\r\n newnode->next=NULL;\r\n if(start==NULL)\r\n start=newnode;\r\n else\r\n {\r\n for(tptr=start; tptr&&\r\n tptr->data<newnode->data;\r\nshadow=tptr, tptr=tptr->next);\r\n {\r\n if (tptr==start)\r\n {\r\n newnode->next=start;\r\n start=newnode;\r\n }\r\n else if(tptr==NULL)\r\n shadow->next=newnode;\r\n else\r\n {\r\n newnode->next=shadow->next;\r\n shadow->next=newnode;\r\n }\r\n }\r\n }\r\n}\r\n// This is the solution to be added\r\nvoid display_list()\r\n{\r\n for(tptr=start; tptr; tptr=tptr->next)\r\n printf(\"%d \", tptr->data);\r\n}\r\nint main()\r\n{\r\n int N, num;\r\n scanf(\"%d\",&N);\r\n while(N>0)\r\n {\r\n scanf(\"%d\",&num);\r\n insert_node(num);\r\n N--;\r\n }\r\n display_list();\r\n return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "UPD_SLL_level 1": {"1": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nvoid insert_node_in_sorted(SLL_NODE *newnode,SLL_NODE **start_ptr)\n{\n\n    SLL_NODE *tptr;\n    SLL_NODE *shadow=NULL;\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr!=NULL&&tptr->data<newnode->data;shadow=tptr,tptr=tptr->next);\n             if(tptr==(*start_ptr))\n             {\n                 newnode->next=tptr;\n                 (*start_ptr)=newnode;\n             }\n             else if(tptr==NULL)\n             {\n                 shadow->next=newnode;\n             }\n             else\n             {\n                 newnode->next=tptr;\n                 shadow->next=newnode;\n             }\n        }\n}\nvoid sort_unsorted_sll(SLL_NODE ** start_ptr , SLL_NODE ** new_start_ptr)\n{\n  SLL_NODE * tptr,*safe;\n  for(tptr=(*start_ptr) ; tptr; )\n  {\n      safe=tptr->next;\n      tptr->next=NULL;\n      insert_node_in_sorted(tptr,new_start_ptr);\n      tptr=safe;\n  }\n}\nint main()\n{\n    SLL_NODE *start=NULL;\n    SLL_NODE *new_start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    sort_unsorted_sll(&start,&new_start);\n    display(new_start);\n    return 0;\n}\n", "2": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\n\nvoid sorted_insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    SLL_NODE *shadow=NULL;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr!=NULL&&tptr->data<input;shadow=tptr,tptr=tptr->next);\n             if(tptr==(*start_ptr))\n             {\n                 newnode->next=tptr;\n                 (*start_ptr)=newnode;\n             }\n             else if(tptr==NULL)\n             {\n                 shadow->next=newnode;\n             }\n             else\n             {\n                 newnode->next=tptr;\n                 shadow->next=newnode;\n             }\n        }\n}\nvoid insert_node_in_sorted(SLL_NODE *newnode,SLL_NODE **start_ptr)\n{\n    SLL_NODE *tptr;\n    SLL_NODE *shadow=NULL;\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr!=NULL&&tptr->data<newnode->data;shadow=tptr,tptr=tptr->next);\n             if(tptr==(*start_ptr))\n             {\n                 newnode->next=tptr;\n                 (*start_ptr)=newnode;\n             }\n             else if(tptr==NULL)\n             {\n                 shadow->next=newnode;\n             }\n             else\n             {\n                 newnode->next=tptr;\n                 shadow->next=newnode;\n             }\n        }\n}\n\nvoid merge_two_sorted_sll(SLL_NODE* start1 , SLL_NODE * start2 , SLL_NODE ** new_start_ptr)\n{\n  SLL_NODE * tptr1 ,*tptr2;\n  SLL_NODE * safe1 ,*safe2;\n  tptr1=start1;\n  tptr2=start2;\n while(tptr1&&tptr2)\n {\n  if(tptr1->data<tptr2->data)\n  {\n      safe1=tptr1->next;\n      tptr1->next=NULL;\n      insert_node_in_sorted(tptr1,new_start_ptr);\n      tptr1=safe1;\n  }\n  else\n  {\n      safe2=tptr2->next;\n      tptr2->next=NULL;\n      insert_node_in_sorted(tptr2,new_start_ptr);\n      tptr2=safe2;\n  }\n }\n if(tptr1)\n      insert_node_in_sorted(tptr1,new_start_ptr);\n else\n      insert_node_in_sorted(tptr2,new_start_ptr);\n\n}\nint main()\n{\n    SLL_NODE *start1=NULL;\n    SLL_NODE *start2=NULL;\n    SLL_NODE * new_start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        sorted_insert_node(num,&start1);\n    }\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        sorted_insert_node(num,&start2);\n    }\n    merge_two_sorted_sll(start1,start2,&new_start);\n    display(new_start);\n    return 0;\n}\n", "3": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\n\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\n\nint check_equal_sll(SLL_NODE * start1,SLL_NODE *start2)\n{\n    SLL_NODE * tptr1,*tptr2;\n    for(tptr1=start1,tptr2=start2;tptr1&&tptr2&&tptr1->data==tptr2->data;tptr1=tptr1->next,tptr2=tptr2->next);\n    if(tptr1==NULL&&tptr2==NULL)\n        return 1;\n    return 0;\n}\nint main()\n{\n    SLL_NODE *start1=NULL;\n    SLL_NODE *start2=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start1);\n    }\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start2);\n    }\n    int res = check_equal_sll(start1,start2);\n    if(res==1)\n            printf(\"Equal\");\n    else\n            printf(\"Not Equal\");\n    return 0;\n}\n", "4": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\n\nint find_mid_point(SLL_NODE * start)\n{\n SLL_NODE* slow, * fast;\n slow=fast=start;\n   while(1)\n    {\n     fast=fast->next;\n     if(fast==NULL)\n        break;\n     fast=fast->next;\n     if(fast==NULL)\n        break;\n     slow=slow->next;\n    }\n    return slow->data;\n}\n\nint main()\n{\n    SLL_NODE *start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    int mid_point;\n    mid_point=find_mid_point(start);\n    printf(\"%d\",mid_point);\n    return 0;\n}\n", "5": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\n\nint kth_last_node(SLL_NODE * start,int k_val)\n{\n SLL_NODE* slow, * fast;\n int ctr;\n for(ctr=1,fast=start;fast&&ctr<k_val;ctr+=1)\n    fast=fast->next;\n if(fast==NULL)//if k larger than number of nodes\n    return -1;\n   slow=start;\n   while(1)\n    {\n     fast=fast->next;\n     if(fast==NULL)\n        break;\n     slow=slow->next;\n    }\n    return slow->data;\n}\n\nint main()\n{\n    SLL_NODE *start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    int k_val;\n    scanf(\"%d\",&k_val);\n\n    int res;\n    res=kth_last_node(start,k_val);\n    printf(\"%d\",res);\n    return 0;\n}\n", "6": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nSLL_NODE * find_mid_point(SLL_NODE * start)\n{\n SLL_NODE* slow, * fast;\n slow=fast=start;\n   while(1)\n    {\n     fast=fast->next;\n     if(fast==NULL)\n        break;\n     fast=fast->next;\n     if(fast==NULL)\n        break;\n     slow=slow->next;\n    }\n    return slow;\n}\n\nvoid second_half_reverse(SLL_NODE * start)\n{\n    SLL_NODE * mid=NULL;\n    SLL_NODE * curr=NULL;\n    SLL_NODE * before=NULL;\n    SLL_NODE * after=NULL;\n    mid=find_mid_point(start);\n    curr=mid->next;\n    before=NULL;\n while(curr)\n {\n   after=curr->next;\n   curr->next = before;\n   before=curr;\n   curr=after;\n }\n  mid->next= before;\n}\n\n\nint main()\n{\n    SLL_NODE *start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    second_half_reverse(start);\n    display(start);\n    return 0;\n}\n", "7": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nvoid sll_rotate(SLL_NODE**start_ptr , int tot_rot)\n{\n    SLL_NODE * tptr,*prev;\n    int rot_ctr;\n    for(rot_ctr=1;rot_ctr<=tot_rot;rot_ctr+=1)\n    {\n        for(tptr=(*start_ptr),prev=NULL; tptr&&tptr->next!=NULL;prev=tptr,tptr=tptr->next);\n        prev->next=NULL;\n        tptr->next=(*start_ptr);\n        (*start_ptr=tptr);\n    }\n}\nint main()\n{\n    SLL_NODE *start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n\n    }\n    int tot_rot;\n    scanf(\"%d\",&tot_rot);\n    sll_rotate(&start,tot_rot);\n    display(start);\n    return 0;\n}\n", "8": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    char data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%c\",tptr->data);\n}\nSLL_NODE *create_node(char input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(char input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nint isVowel(char ch)\n{\n    if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')\n        return 1;\n    return 0;\n}\nvoid vowel_removal(SLL_NODE * * start_ptr)\n{\n    SLL_NODE * prev;\n    SLL_NODE *tptr;\n        prev=NULL;\n        tptr=*start_ptr;\n        while(tptr)\n     {\n        if(isVowel(tptr->data)==1)\n        {\n            if(prev==NULL)\n            {\n                (*start_ptr)=(*start_ptr)->next;\n                tptr->next=NULL;\n                free(tptr);\n                tptr=(*start_ptr);\n            }\n            else\n            {\n                prev->next=tptr->next;\n                tptr->next=NULL;\n                free(tptr);\n                tptr=prev->next;\n            }\n        }\n        else\n        {\n            prev=tptr;\n            tptr=tptr->next;\n        }\n    }\n\n}\nint main()\n{\n    SLL_NODE *start=NULL;\n    char inp[1000];\n    scanf(\"%[^\\n]s\",inp);\n    int ind;\n    for(ind=0;inp[ind]!=NULL;ind+=1)\n    {\n        insert_node(inp[ind],&start);\n    }\n     vowel_removal(&start);\n     display(start);\n    return 0;\n}\n", "9": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nvoid delete_duplicate( SLL_NODE * start)\n{\n    SLL_NODE* tptr1,*tptr2,*prev;\n    for(tptr1=start; tptr1&&tptr1->next;tptr1=tptr1->next)\n    {\n        for(prev=tptr1,tptr2=tptr1->next; tptr2 ; )\n        {\n            if(tptr2->data==tptr1->data)\n            {\n                prev->next=tptr2->next;\n                tptr2->next=NULL;\n                free(tptr2);\n                tptr2=prev->next;\n            }\n            else\n            {\n                prev=tptr2;\n                tptr2=tptr2->next;\n            }\n        }\n    }\n\n}\nint main()\n{\n    SLL_NODE *start=NULL;\n     int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start);\n    }\n     delete_duplicate(start);\n     display(start);\n    return 0;\n}\n", "10": "#include<stdio.h>\n#include<stdlib.h>\nstruct sll_node\n{\n    int data;\n    struct sll_node *next;\n};\ntypedef struct sll_node SLL_NODE;\nvoid display(SLL_NODE *start)\n{\n SLL_NODE * tptr;\n        for(tptr=start ;tptr;tptr=tptr->next)\n            printf(\"%d \",tptr->data);\n}\nSLL_NODE *create_node(int input)\n{\n    SLL_NODE *newnode=(SLL_NODE *)malloc(sizeof(SLL_NODE));\n    newnode->data=input;\n    newnode->next=NULL;\n    return newnode;\n}\nvoid insert_node(int input,SLL_NODE **start_ptr)\n{\n    SLL_NODE *newnode;\n    SLL_NODE *tptr;\n    newnode=create_node(input);\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\nvoid node_insert(SLL_NODE *newnode,SLL_NODE **start_ptr)\n{\n    SLL_NODE *tptr;\n    if(*start_ptr==NULL)\n        *start_ptr=newnode;\n    else\n        {\n            for(tptr=(*start_ptr);tptr->next!=NULL;tptr=tptr->next);\n            tptr->next=newnode;\n        }\n}\n\nvoid max_value_on_sll(SLL_NODE* start1 , SLL_NODE * start2 , SLL_NODE ** new_start_ptr)\n{\n  SLL_NODE * tptr1 ,*tptr2;\n  SLL_NODE * safe1 ,*safe2;\n  tptr1=start1;\n  tptr2=start2;\n while(tptr1&&tptr2)\n {\n  if(tptr1->data>tptr2->data)\n  {\n      safe1=tptr1->next;\n      tptr1->next=NULL;\n      node_insert(tptr1,new_start_ptr);\n      tptr1=safe1;\n      tptr2=tptr2->next;\n  }\n  else\n  {\n      safe2=tptr2->next;\n      tptr2->next=NULL;\n      node_insert(tptr2,new_start_ptr);\n      tptr2=safe2;\n      tptr1=tptr1->next;\n  }\n }\n\n}\nint main()\n{\n    SLL_NODE *start1=NULL;\n    SLL_NODE *start2=NULL;\n    SLL_NODE * new_start=NULL;\n    int num;\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start1);\n    }\n    while(1)\n    {\n        scanf(\"%d\",&num);\n        if(num==-1)\n            break;\n        insert_node(num,&start2);\n    }\n    max_value_on_sll(start1,start2,&new_start);\n    display(new_start);\n    return 0;\n}\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Sorting_Level_0": {"1": "#include<stdio.h>\r\nint Bubble_Sort(int *arr,int size)\r\n{\r\n    int count=0,inner,outer,temp,flag;\r\n   for(outer=0;outer<size;outer++)\r\n   {\r\n       flag=0;\r\n       for(inner=0;inner<(size-1)-outer ; inner++)\r\n       {\r\n           if(arr[inner] >arr[inner+1])\r\n           {\r\n               temp = arr[inner];\r\n               arr[inner] = arr[inner+1];\r\n               arr[inner+1]=temp;\r\n               flag=1;\r\n               count++;\r\n           }\r\n       }\r\n       if(flag==0)\r\n       break;\r\n   }\r\n   return count;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    printf(\"Number of Swapping : %d\",Bubble_Sort(arr,size));\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<limits.h>\r\nint Selection_Sort(int *arr, int size)\r\n{\r\n    int count=0,inner,outer,min,pos,temp;\r\n    for(outer=0;outer<size;outer++)\r\n    {\r\n        min = INT_MAX;\r\n        for(inner=outer; inner<size;inner++)\r\n        {\r\n            if(arr[inner] < min)\r\n            {\r\n                min = arr[inner];\r\n                pos = inner;\r\n            }\r\n        }\r\n        if(pos != outer)\r\n        {\r\n            temp = arr[outer];\r\n            arr[outer] = arr[pos];\r\n            arr[pos]=temp;\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    printf(\"Number of Swapping : %d\",Selection_Sort(arr,size));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nint Insertion_Sort(int *arr,int size)\r\n{\r\n    int ind,safe,ind1,count=0;\r\n    for(ind = 1; ind<size; ind++)\r\n    {\r\n        safe = arr[ind];\r\n        for(ind1 = ind-1; ind1>=0 && arr[ind1]>safe; ind1--)\r\n        {\r\n                arr[ind1+1] = arr[ind1];\r\n                count++;\r\n        }\r\n        arr[ind1+1] = safe;\r\n    }\r\n    return count;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    printf(\"Number of Shifting : %d\\n\",Insertion_Sort(arr,size));\r\n   return 0;\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\nint count=0;\r\nvoid swapper(int *arr ,int ind1,int ind2)\r\n{\r\n    int temp;\r\n    temp =arr[ind1];\r\n    arr[ind1]=arr[ind2];\r\n    arr[ind2]=temp;\r\n    count++;\r\n}\r\nvoid Qsorter(int *arr , int  st , int end)\r\n{\r\n        int pivot,left,right;\r\n        if(st>=end)\r\n            return ;\r\n        pivot = arr[end];\r\n        left =st;\r\n        right=end-1;\r\n       while(left<=right)\r\n       {\r\n        while(arr[right] > pivot)\r\n            right--;\r\n        while(arr[left] < pivot)\r\n            left++;\r\n        if(left<right)\r\n            swapper(arr,left,right);\r\n      }\r\n     swapper(arr,end,left);\r\n     Qsorter(arr,st,left-1);\r\n     Qsorter(arr,left+1,end);\r\n}\r\nvoid Quick_Sort(int *arr,int size)\r\n{\r\n    int start,end;\r\n    start = 0;\r\n    end = size-1;\r\n    Qsorter(arr,start,end);\r\n}\r\nint main()\r\n{\r\n     int size,ind;\r\n     scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    Quick_Sort(arr,size);\r\n    printf(\"Number of Swapping : %d\\n\",count);\r\n  return 0;\r\n}\r\n\r\n", "5": "#include<stdio.h>\r\nvoid Merge_Sort(int arr[], int start, int end)\r\n{\r\n    int mid;\r\n    mid = ((start + end ) / 2);\r\n    if(start < end)\r\n    {\r\n     Merge_Sort(arr, start, mid);\r\n     Merge_Sort(arr, mid+1, end);\r\n     Merger(arr, start, mid, end);\r\n    }\r\n}\r\nvoid Merger(int arr[], int start, int mid, int end)\r\n{\r\n    int new_arr[(end - start) + 1];\r\n    int size, ind, ind1, ind2, ind3=0;\r\n    ind1 = start;\r\n    ind2 = mid + 1;\r\n    while(ind1 <= mid && ind2 <=end)\r\n    {\r\n    if(arr[ind1] < arr[ind2])\r\n    {\r\n    new_arr[ind3++] = arr[ind1++];\r\n    }\r\n    else\r\n    {\r\n    new_arr[ind3++] = arr[ind2++];\r\n    }\r\n    }\r\n    while(ind1 <= mid)\r\n    {\r\n     new_arr[ind3++] = arr[ind1++];\r\n    }\r\n\r\n    while(ind2 <=end)\r\n    {\r\n    new_arr[ind3++] = arr[ind2++];\r\n    }\r\n    size = (end - start) + 1;\r\n    for(ind = 0; ind < size; ind++)\r\n    {\r\n         arr[start++] = new_arr[ind];\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n     scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    Merge_Sort(arr, 0, size-1);\r\n    for(ind = 0; ind < size; ind++)\r\n       printf(\"%d \", arr[ind]);\r\n    return 0;\r\n}\r\n\r\n", "6": "#include <stdio.h>\r\nint count=0;\r\nvoid swap(int* num1, int* num2)\r\n{\r\n        int temp;\r\n        temp = *num1;\r\n        *num1 = *num2;\r\n        *num2 = temp;\r\n        count++;\r\n}\r\nvoid heapify(int *arr,int size, int ind)\r\n{\r\n        int largest = ind;\r\n        int left = 2 * ind + 1;\r\n        int right = 2 * ind + 2;\r\n        if (left < size && arr[left] > arr[largest])\r\n                largest = left;\r\n        if (right < size && arr[right] > arr[largest])\r\n        largest = right;\r\n        if (largest != ind)\r\n    {\r\n        swap(&arr[ind], &arr[largest]);\r\n        heapify(arr, size, largest);\r\n        }\r\n}\r\nvoid Heap_Sort(int *arr, int size)\r\n{\r\n    int ind;\r\n        for (ind =  size/ 2 - 1; ind >= 0; ind--)\r\n                heapify(arr, size, ind);\r\n        for (ind = size - 1; ind >= 0; ind--) {\r\n    swap(&arr[0], &arr[ind]);\r\n    heapify(arr, ind, 0);\r\n        }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n     scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n    Heap_Sort(arr, size);\r\n        printf(\"Number of swapping : %d\",count);\r\n}\r\n", "7": "#include<stdio.h>\r\nvoid String_Sorting(char *str)\r\n{\r\n    int inner,outer,size;\r\n    char temp;\r\n    for(size=0;str[size];size++);\r\n    for(outer=0;outer<size;outer++)\r\n    {\r\n        for(inner=0;inner<(size-1)-outer;inner++)\r\n        {\r\n            if(str[inner] > str[inner+1])\r\n            {\r\n                temp=str[inner];\r\n                str[inner]=str[inner+1];\r\n                str[inner+1]=temp;\r\n            }\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    char str[1000];\r\n    int len;\r\n    scanf(\"%[^\\n]s\",str);\r\n    String_Sorting(str);\r\n    printf(\"%s\",str);\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<limits.h>\r\nvoid Counting_Sort(int *arr,int size)\r\n{\r\n    int ind,key=INT_MIN;\r\n    for(ind=0;ind<size;ind++)\r\n        if(arr[ind]>key)\r\n            key=arr[ind];\r\n    int count_arr[key];\r\n    int res_arr[size];\r\n    for(ind=0;ind<=key;ind++)\r\n        count_arr[ind]=0;\r\n    for(ind=0;ind<size;ind++)\r\n        count_arr[arr[ind]]++;\r\n    for(ind=1;ind<=key;ind++)\r\n        count_arr[ind] = count_arr[ind]+count_arr[ind-1];\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        res_arr[count_arr[arr[ind]] -1] = arr[ind];\r\n        --count_arr[arr[ind]];\r\n    }\r\n    for(ind=0;ind<size;ind++)\r\n        arr[ind]=res_arr[ind];\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;ind++)\r\n        scanf(\"%d\",&arr[ind]);\r\n   Counting_Sort(arr,size);\r\n    for(ind=0;ind<size;printf(\"%d \",arr[ind++] ));\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nvoid Hash_Array(int *arr,int size)\r\n{\r\n    int ind=0;\r\n    int hash[1000];\r\n    for(ind=0;ind<100;ind++)\r\n        hash[ind]=0;\r\n    for(ind=0;ind<size;ind++)\r\n    {\r\n        hash[arr[ind]]++;\r\n    }\r\n    for(ind=0;ind<100;ind++)\r\n        if(hash[ind]!=0)\r\n            printf(\"%d - %d\\n\",ind,hash[ind]);\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    Hash_Array(arr,size);\r\n    return 0;\r\n}\r\n", "10": "", "11": "", "12": "", "13": "", "14": ""}, "upd_stack_level_0": {"1": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "2": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "3": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "4": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "5": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "6": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\nint peek(int *stack , int  top)\r\n{\r\n    int peek_val;\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    peek_val=stack[top];\r\n    return peek_val;\r\n}\r\n\r\nint curr_size(int top)\r\n{\r\n    return top+1;//no of elements\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   int * stack=NULL;\r\n   int top=-1;\r\n   stack=(int*)calloc(1001,sizeof(int));\r\n   int ch;\r\n   int input;\r\n   int return_val;\r\n   while(1)\r\n   {\r\n        scanf(\"%d\",&ch);\r\n        if(ch==-1)\r\n            break;\r\n        switch(ch)\r\n        {\r\n            case 1: scanf(\"%d\",&input);\r\n                    return_val = push(stack,&top,input);\r\n                    if(return_val == -1)\r\n                        printf(\"Stack Full\\n\");\r\n                    break;\r\n            case 2: return_val=pop(stack,&top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 3: return_val=peek(stack,top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"%d\\n\",return_val);\r\n                    break;\r\n            case 4: return_val=isEmpty(top);\r\n                    if(return_val==0)\r\n                        printf(\"Empty Stack\\n\");\r\n                    else\r\n                        printf(\"Non Empty Stack\\n\");\r\n                    break;\r\n            case 5: return_val=curr_size(top);\r\n                    printf(\"Number elements stored inside stack : %d\\n\",return_val);\r\n                    break;\r\n        }\r\n   }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n", "7": "#include<stdio.h>\r\n#include<limits.h>\r\n\r\nvoid display_tower(int *stack , int top,int nod)\r\n{\r\n    int ind;\r\n    if(top==nod)//empty\r\n        printf(\"-1\\n\");\r\n    else\r\n    {\r\n        for(ind=nod-1;ind>=top;ind-=1)\r\n            printf(\"%d \",stack[ind]);\r\n        printf(\"\\n\");\r\n    }\r\n\r\n}\r\nvoid toh_display(int * src,int * des,int * aux,int srcTop,int desTop,int auxTop,int nod,int choice)\r\n{\r\n    if(choice==1)\r\n        display_tower(src,srcTop,nod);\r\n    else if(choice==2)\r\n        display_tower(des,desTop,nod);\r\n    else if(choice==3)\r\n        display_tower(aux,auxTop,nod);\r\n}\r\n\r\nint main()\r\n{\r\n  int ctr;\r\n  int no_of_disks;\r\n  int choice;\r\n  scanf(\"%d\",&no_of_disks);\r\n  scanf(\"%d\",&choice);\r\n  int srcTop,desTop,auxTop;\r\n  int * src=NULL;\r\n  int * des=NULL;\r\n  int * aux=NULL;\r\n  src=(int*)calloc(no_of_disks+1,sizeof(int));\r\n  des=(int*)calloc(no_of_disks+1,sizeof(int));\r\n  aux=(int*)calloc(no_of_disks+1,sizeof(int));\r\n  srcTop = 0;\r\n  desTop = auxTop = no_of_disks;\r\n  for(ctr = 0; ctr < no_of_disks; ctr++)\r\n   src[ctr]= ctr+1;\r\n  for(ctr = 0; ctr < no_of_disks; ctr++)\r\n   aux[ctr] = des[ctr]= -1;\r\n  src[no_of_disks] = des[no_of_disks] = aux[no_of_disks] = INT_MAX;\r\n  toh_display(src,des,aux,srcTop,desTop,auxTop,no_of_disks,choice);\r\n while(1) //endless loop\r\n {\r\n  if(src[srcTop] < des[desTop]) //src is sender , des is receiver\r\n  {\r\n   desTop--;                     //alter the receiver\r\n   des[desTop] = src[srcTop];    //using the space\r\n   src[srcTop] = -1;             //reinitialize sender\r\n   srcTop++;                     //alter the sender\r\n  }\r\n  else                 //des is sender , src is receiver\r\n  {\r\n   srcTop--;\r\n   src[srcTop] = des[desTop];\r\n   des[desTop] = -1;\r\n   desTop++;\r\n  }\r\n  toh_display(src,des,aux,srcTop,desTop,auxTop,no_of_disks,choice);\r\n\r\n  if(desTop==0) break; //base case\r\n  if(src[srcTop] < aux[auxTop]) //src is sender , aux is receiver\r\n  {\r\n   auxTop--;\r\n   aux[auxTop] = src[srcTop];\r\n   src[srcTop] = -1;\r\n   srcTop++;\r\n  }\r\n  else                 //aux is sender , src is receiver\r\n  {\r\n    srcTop--;\r\n   src[srcTop] = aux[auxTop];\r\n   aux[auxTop] = -1;\r\n   auxTop++;\r\n  }\r\n  toh_display(src,des,aux,srcTop,desTop,auxTop,no_of_disks,choice);\r\n  if(auxTop==0) break;\r\n  if(aux[auxTop] < des[desTop]) //aux is sender , des is receiver\r\n  {\r\n   desTop--;\r\n   des[desTop] = aux[auxTop];\r\n   aux[auxTop] = -1;\r\n   auxTop++;\r\n  }\r\n  else                 //des is sender , aux is receiver\r\n  {\r\n    auxTop--;\r\n   aux[auxTop] = des[desTop];\r\n   des[desTop] = -1;\r\n   desTop++;\r\n }\r\n  toh_display(src,des,aux,srcTop,desTop,auxTop,no_of_disks,choice);\r\n   if(desTop==0||auxTop==0) break; //base case\r\n }\r\n\r\n return 0;\r\n}\r\n\r\n", "8": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,int push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nint pop(int *stack , int * top_ptr)\r\n{\r\n    int pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   char str[1000];//=\"5 70 * 50 + 200 3 * + \";\r\n   int operand_stack[1000];\r\n   scanf(\"%[^\\n]s\",str);\r\n   int top=-1;\r\n   int ind;\r\n   int val=0;\r\n   int pop_val1;\r\n   int pop_val2;\r\n   int cal_val=0;\r\n   for(ind=0; str[ind] ; ind+=1)\r\n   {\r\n     if(str[ind]>='0'&&str[ind]<='9')\r\n     {\r\n         val=val*10+(str[ind]-48);\r\n     }\r\n     else if(str[ind]=='*'||str[ind]=='+'||str[ind]=='-'||str[ind]=='%'||str[ind]=='/')\r\n     {\r\n             pop_val1=pop(operand_stack,&top);\r\n             pop_val2=pop(operand_stack,&top);\r\n            switch(str[ind])\r\n            {\r\n                case '+':   cal_val=pop_val2+pop_val1;\r\n                            push(operand_stack,&top,cal_val);\r\n                            break;\r\n                case '-':   cal_val=pop_val2-pop_val1;\r\n                            push(operand_stack,&top,cal_val);\r\n                            break;\r\n                case '*':   cal_val=pop_val2*pop_val1;\r\n                            push(operand_stack,&top,cal_val);\r\n                            break;\r\n                case '/':   cal_val=pop_val2/pop_val1;\r\n                            push(operand_stack,&top,cal_val);\r\n                            break;\r\n                case '%':   cal_val=pop_val2%pop_val1;\r\n                            push(operand_stack,&top,cal_val);\r\n                            break;\r\n            }\r\n            //printf(\"%d\\n\",cal_val);\r\n            if(str[ind+1])\r\n                ind++;\r\n     }\r\n     else if(str[ind]==' ')\r\n     {\r\n         //printf(\"%d\\n\",val);\r\n         push(operand_stack,&top,val);\r\n         val=0;\r\n     }\r\n   }\r\n   cal_val=pop(operand_stack,&top);\r\n   printf(\"%d\",cal_val);\r\n    return 0;\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint push(int *stack , int * top_ptr,char push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nchar pop(int *stack , int * top_ptr)\r\n{\r\n    char pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint main()//entry point\r\n{\r\n   char str[1000];\r\n   char stack[1000];\r\n   int top=-1;\r\n   scanf(\"%[^\\n]s\",str);\r\n   int ind;\r\n   int word_st_ind;\r\n   char pop_char;\r\n   for(word_st_ind=ind=0;str[ind];ind+=1)\r\n   {\r\n       if(str[ind]==' ')\r\n       {\r\n           while(1)\r\n           {\r\n               pop_char=pop(stack,&top);\r\n               if(pop_char !=0 )\r\n                str[word_st_ind++]=pop_char;\r\n               else\r\n                 break;\r\n            }\r\n           word_st_ind=ind+1;\r\n       }\r\n       else\r\n       {\r\n           push(stack,&top,str[ind]);\r\n       }\r\n   }\r\n    while(1)\r\n    {\r\n               pop_char=pop(stack,&top);\r\n               if(pop_char !=0 )\r\n                str[word_st_ind++]=pop_char;\r\n               else\r\n                 break;\r\n    }\r\n    printf(\"%s\",str);\r\n    return 0;\r\n}\r\n\r\n", "10": "#include<stdio.h>\r\nint push(char *stack , int * top_ptr,char push_val)\r\n{\r\n    (*top_ptr)++;\r\n    if(*top_ptr > 1000)\r\n        return -1;//stack full\r\n    stack[(*top_ptr)]=push_val;\r\n    return 1;\r\n}\r\nchar pop(char *stack , int * top_ptr)\r\n{\r\n    char pop_val;\r\n    if(*top_ptr ==-1)\r\n        return 0;//empty stack\r\n    pop_val=stack[(*top_ptr)];\r\n    (*top_ptr)--;\r\n    return pop_val;\r\n}\r\nint isEmpty( int  top)\r\n{\r\n    if(top ==-1)\r\n        return 0;//empty stack\r\n    return 1;//non empty stack\r\n}\r\n\r\nint main()//entry point\r\n{\r\n   char str[1000];//=\"{([])}{}[](())\";\r\n   char stack[1000];\r\n   scanf(\"%[^\\n]s\",str);\r\n   int top=-1;\r\n   int ind;\r\n   char pop_val;\r\n   for(ind=0; str[ind] ; ind+=1)\r\n   {\r\n       if(str[ind]=='('||str[ind]=='['||str[ind]=='{')\r\n        {\r\n                    push(stack,&top,str[ind]);\r\n        }\r\n        else\r\n        {\r\n            pop_val=pop(stack,&top);\r\n            if(pop_val=='('&&str[ind]==')')\r\n             continue;\r\n            if(pop_val=='{'&&str[ind]=='}')\r\n             continue;\r\n            if(pop_val=='['&&str[ind]==']')\r\n             continue;\r\n            break;\r\n        }\r\n   }\r\n   if(isEmpty(top)==0 && str[ind]==NULL)\r\n        printf(\"Yes\");\r\n   else\r\n        printf(\"No\");\r\n    return 0;\r\n}\r\n\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "String_Level_0": {"1": "\"#include<stdio.h>\nint main()\n{\nchar str[]=\"\"Hello World\"\";\nprintf(\"\"%s\"\",str);\n return 0;\n}\"", "2": "#include<stdio.h>\nint main()\n{\nchar str[100000];\n scanf(\"%[^\\n]\",str);\n printf(\"%s\",str);\nreturn 0;     \n}", "3": "#include<stdio.h>\n#include<string.h>\nint main()\n{\nchar str[1000000];\n long long int age;\n scanf(\"%s %lld\",str,&age);\n printf(\"%s:%lld\",str,age);\n return 0;\n}", "4": "#include<stdio.h>\nint main()\n{\nchar str[100000];\nint len;\nscanf(\"%[^\\n]s\",str);\nfor(len=0;str[len]!='\\\\0';len++);\nprintf(\"%d\",len);\nreturn 0;\n}", "5": "\"#include<stdio.h>\r\nvoid myStrCopy(char * des ,char *src)\r\n{\r\n int ind;\r\n for(ind=0; src[ind]!='\\\\0';ind+=1)\r\n    des[ind]=src[ind];\r\n des[ind]='\\\\0';\r\n}\r\nint main()\r\n{\r\nchar src[100000];\r\nchar des[100000];\r\nscanf(\"\"%[^\\n]s\"\",src);\r\nmyStrCopy(des,src);\r\nprintf(\"\"%s\"\",des);\r\nreturn 0;\r\n}\"", "6": "#include<stdio.h>\r\nvoid myStrCat(char * des ,char *src)\r\n{\r\n int ind;\r\n int d_ind;\r\n for(d_ind=0;des[d_ind]!='\\\\0';d_ind+=1);\r\n for(ind=0; src[ind]!='\\\\0';ind+=1,d_ind++)\r\n    des[d_ind]=src[ind];\r\n des[d_ind]='\\\\0';\r\n}\r\nint main()\r\n{\r\nchar str1[100000];\r\nchar str2[100000];\r\nscanf(\"%s\",str1);\r\nscanf(\"%s\",str2);\r\nmyStrCat(str2,str1);\r\nprintf(\"%s\",str2);\r\nreturn 0;\r\n}\r\n", "7": "#include<stdio.h>\nint main()\n{\nchar str[100000];\nint ind,count=0;\nscanf(\"%[^\\n]s\",str);\nfor(ind=0;str[ind]!='\\\\0';ind++)\n{\nif(str[ind]>=65&&str[ind]<=90)\n{\ncount++;\n}\n}\nprintf(\"%d\",count);\nreturn 0;\n}", "8": "\"#include<stdio.h>\r\nint main()\r\n{\r\n    char str[1000], search;\r\n    int len,ind,flag=0;\r\n    scanf(\"\"%s\\n\"\",str);\r\n    scanf(\"\"%c\"\",&search);\r\n    for(len=0;str[len]!='\\\\0';len++);\r\n    for(ind=0;ind<len;ind++)\r\n    {\r\n        if(str[ind]==search)\r\n        {\r\n            flag=1;\r\n            break;\r\n        }\r\n    }\r\n    \r\n    if (flag == 1)\r\n        printf(\"\"Found\"\");\r\n    else\r\n        printf(\"\"Not Found\"\");\r\n \r\n    return 0;\r\n}\"", "9": "#include<stdio.h>\r\nint main()\r\n{\r\nchar str[100000];\r\nint ind,count=0;\r\nscanf(\"%[^\\n]s\",str);\r\n\r\nfor(ind=0;str[ind]!='\\\\0';ind++)\r\n{\r\nif(!(str[ind]>=65&&str[ind]<=90||str[ind]>=97&&str[ind]<=122||str[ind]>=48&&str[ind]<=57))\r\n{\r\ncount++;\r\n}\r\n}\r\nprintf(\"%d\",count);\r\nreturn 0;\r\n}", "10": "\"#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char str[20000],ch;\n    int ind,len,flag=0;\n    scanf(\"\"%[^\\n]\\n\"\",str);\n    scanf(\"\"%c\"\",&ch);\n    len=strlen(str);   //poiinter i poi  inter\n    for(ind=0;ind<len;ind++) //pointer\n    {\n        if(str[ind]!=ch)\n        {\n             printf(\"\"%c\"\",str[ind]);\n        }\n        else if(str[ind]==ch)\n        {\n           // flag=1;\n             if(flag==0)\n            {\n                printf(\"\"%c\\n\"\",str[ind]);\n                flag=1;\n            }\n            else\n                printf(\"\"%c\"\",str[ind]);\n        }\n    }\n    return 0;\n}\n\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "String_Level_1": {"1": "\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main(){\r\n   char str[1000];\r\n   int ind;\r\n   scanf(\"%[^\\n]s\",str);\r\n   for(ind=0;ind<=strlen(str);ind++){\r\n      if(str[ind]>=97&&str[ind]<=122)\r\n         str[ind]=str[ind]-32;\r\n   }\r\n   printf(\"%s\",str);\r\n   return 0;\r\n}", "2": "\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main(){\r\n   char str[1000];\r\n   int ind;\r\n   scanf(\"%[^\\n]s\",str);\r\n   for(ind=0;ind<=strlen(str);ind++){\r\n      if(str[ind]>=65&&str[ind]<=90)\r\n         str[ind]=str[ind]+32;\r\n   }\r\n   printf(\"%s\",str);\r\n   return 0;\r\n}", "3": "#include<stdio.h>\r\nint main()\r\n{\r\n char str[10000];\r\nscanf(\"%[^\\na-z]\",str);\r\nprintf(\"%s\",str);\r\nreturn 0;\r\n}", "4": "#include<stdio.h>                                                                             \r\nint main()\r\n{\r\n char str[10000];\r\nscanf(\"%[a-z]s\",str);\r\n printf(\"%s\",str);\r\n return 0;\r\n}", "5": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nchar str1[100000],str2[100000];\r\nint count=0,itr,len1,len2;\r\nscanf(\"%s\\n%s\",str1,str2);\r\nfor(len1=0;str1[len1]!='\\\\0';len1++);\r\nfor(len2=0;str2[len2]!='\\\\0';len2++);\r\nfor(itr=0;str1[itr]!='\\\\0'&&str2[itr]!='\\\\0';itr++)\r\n{\r\nif(str1[itr]==str2[itr])\r\ncount++;\r\nelse\r\nbreak;\r\n}\r\nif(count==len1&&count==len2)\r\nprintf(\"Equal\");\r\nelse\r\nprintf(\"Not Equal\");\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nchar str[10000];\r\nint ind;\r\nscanf(\"%[^\\n]s\",str);\r\n\r\nfor(ind=0;str[ind]!='\\\\0';ind++)\r\n{\r\nif(str[ind]=='a'||str[ind]=='e'||str[ind]=='i'||str[ind]=='o'||str[ind]=='u'||str[ind]=='A'||str[ind]=='E'||str[ind]=='I'||str[ind]=='O'||str[ind]=='U')\r\n{\r\nstr[ind]=' ';\r\n}\r\n}\r\nprintf(\"%s\",str);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\nint main()\r\n{\r\nint len,fir,last;\r\nchar str[100],temp;\r\nscanf(\"%[^\\n]s\",str);\r\nfor(len=0;str[len]!='\\\\0';len++);\r\nfor(fir=0,last=len-1;fir<last;fir++,last--)\r\n{\r\ntemp=str[fir];\r\nstr[fir]=str[last];\r\nstr[last]=temp;\r\n}\r\nprintf(\"%s\",str);\r\nreturn 0;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\nint len,fir,last;\r\nchar str[100],temp;\r\nscanf(\"%[^\\n]s\",str);\r\nfor(len=0;str[len]!='\\\\0';len++);\r\n\r\nfor(fir=0,last=len-1;fir<last;fir++,last--)\r\n{\r\nwhile(!((str[fir]>=65&&str[fir]<=90)||(str[fir]>=97&&str[fir]<=122)))\r\n{\r\nfir++;\r\n}\r\nwhile(!((str[last]>=65&&str[last]<=90)||(str[last]>=97&&str[last]<=122)))\r\n{\r\nlast--;\r\n}\r\nif(fir<last)\r\n{\r\n    temp=str[fir];\r\nstr[fir]=str[last];\r\nstr[last]=temp;\r\n}\r\n}\r\nprintf(\"%s\",str);\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\nint ind;\r\nchar str[100],str1[100];\r\nscanf(\"%[^\\n]s\",str);\r\n\r\nfor(ind=0;str[ind]!='\\\\0';ind++)\r\n{\r\nprintf(\"*\");\r\n}\r\nreturn 0;\r\n}", "10": "#include<stdio.h>\r\nint main()\r\n{\r\nchar str[100];\r\nint ind,num=0;\r\nscanf(\"%[^\\n]s\",str);\r\n\r\nfor(ind=0;str[ind]!='\\\\0';ind++)\r\n{\r\nif(str[ind]>='0' && str[ind]<='9')\r\n{\r\nnum=num*10+(str[ind]-'0');\r\n}\r\n}\r\nprintf(\"%d\",num);\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "String_Level_2": {"1": "#include<stdio.h>\n#include<stdlib.h>\nchar *uppercase(char *str,int len)\n{\n  //write your code here\n}\nint main()\n{\n int len;\n char *str;\n str=(char*)malloc(10000*sizeof(char));\n scanf(\"\"%[^\\n]s\"\",str);\n for(len=0;str[len]!='\\\\0';len++);\n uppercase(str,len);\n printf(\"\"%s\"\",str);\n return 0;\n}\"", "2": "#include<stdio.h>\n#include<stdlib.h>\nchar *Remove_Vowels(char *str,int len)\n{\n    int ind1,ind2;\n    for(ind1=0;ind1<len;ind1++)\n    {\n        if(str[ind1]=='a'||str[ind1]=='e'||str[ind1]=='i'||str[ind1]=='o'||str[ind1]=='u'||str[ind1]=='A'||str[ind1]=='E'||str[ind1]=='I'||str[ind1]=='O'||str[ind1]=='U')\n          {\n              for(ind2=ind1;ind2<len-1;ind2++)\n                str[ind2]=str[ind2+1];\n             str[ind2]='\\\\0';\n             len=len-1;\n             ind1--;\n          }\n    }\n    return str;\n}\nint main()\n{\n int len;\n char *str;\n str=(char*)malloc(10000*sizeof(char));\n scanf(\"\"%[^\\n]s\"\",str);\n for(len=0;str[len]!='\\\\0';len++);\n Remove_Vowels(str,len);\n printf(\"\"%s\"\",str);\n return 0;\n}\"", "3": "#include<stdio.h>\nint main()\n{\n char str[1000000];\n int index;\n scanf(\"%s\",str);\n for(index=0;str[index];index++)\n {\n if(!(str[index]>='A'&&str[index]<='F'||(str[index]>='0'&&str[index]<='9')))\n break;\n }\n if(str[index]=='\\\\0')\n printf(\"YES\");\n else\n printf(\"NO\");\n return 0;\n}", "4": "#include<stdio.h>\n#include<limits.h>\nint main()\n{\n char str[10000];\n int ind,itr=0,ctr,min=INT_MAX;\nscanf(\"%[^\\n]s\",str);\n for(ind=0;str[ind]!='\\\\0';ind++)\n {\n if(str[ind]!=' ' && str[ind]!='\\\\0')\n {\n ++itr;\n }\n else if(min>=itr)\n {\n min=itr;\n ctr=ind-min;\n itr=0;\n }\n else\n {\n itr=0;\n }\n }\n for(ind=ctr;str[ind]!='\\\\0'&&str[ind]!=' ';ind++)\n {\n printf(\"%c\",str[ind]);\n }\n return 0;\n}", "5": "#include<stdio.h>\r\n \r\nint main()\r\n{\r\n    char str[1000], search[100];\r\n    int len1 = 0, len2 = 0, ind1, ind2, flag;\r\n    scanf(\"\"%s %s\"\",str,search);\r\n    while (str[len1] != '\\\\0')\r\n        len1++;\r\n    while (search[len2] != '\\\\0')\r\n        len2++;\r\n    for (ind1 = 0; ind1 <= len1 - len2; ind1++)\r\n    {\r\n        for (ind2 = ind1; ind2 < ind1 + len2; ind2++)\r\n        {\r\n            flag = 1;\r\n            if (str[ind2] != search[ind2 - ind1])\r\n            {\r\n                flag = 0;\r\n                break;\r\n            }\r\n        }\r\n        if (flag == 1)\r\n            break;\r\n    }\r\n    if (flag == 1)\r\n        printf(\"PRESENT\");\r\n    else\r\n        printf(\"NOT PRESENT\");\r\n \r\n    return 0;\r\n}", "6": "#include<stdio.h>\nint main()\n{\nchar str[100],temp;\nint len,itr,rot;\nscanf(\"\"%d\"\",&rot);\nscanf(\"\"%s\"\",str);\nfor(len=0;str[len]!='\\\\0';len++);\n\nwhile(rot%len)\n{\ntemp=str[0];\nfor(itr=0;itr!=len-1;itr++)\nstr[itr]=str[itr+1];\nstr[len-1]=temp;\nrot--;\n}\nprintf(\"\"%s\"\",str);\nreturn 0;\n}\"", "7": "#include<stdio.h> \n#include<string.h> \nint main()\n{\n    int n; \n    char month[100000]; \n    scanf(\"%s %d\",month,&n); \n    if(strcmp(month,\"August\")==0&&n==17)\n    {\n        printf(\"Valid\");\n    }\n    else \n    {\n        printf(\"Invalid\");\n    }\n}\n\n\"", "8": "#include <stdio.h>\n#include<string.h>\nint main()\n{\n int ind,key;\n char string[100000];\n scanf(\"%[^\\n]\\n\",string);\n scanf(\"%d\",&key);\n for(ind=0;ind<strlen(string);ind++)\n {\n     if(string[ind]==' ')\n        continue;\n if((string[ind]>=97&&string[ind]<=122) && (string[ind]+key)>122){\n    string[ind]=(string[ind]+key)%122 + 97;\n }\n else if((string[ind]>=65 && string[ind]<=90) && (string[ind]+key)>90){\n     string[ind]=(string[ind]+key)%90 + 65;\n }\n else{\n    string[ind]=string[ind]+key;\n }\n }\n printf(\"%s\",string);\n return 0;\n}\n\"", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n    char str[1000];\r\n    scanf(\"%[^\\n]s\",str);\r\n    int ind,count=0;\r\n    for(ind=0; str[ind]; ind++)\r\n    {\r\n        if(str[ind]==' '||str[ind]==',')\r\n            count++;\r\n        else\r\n            continue;\r\n    }\r\n    printf(\"%d\",count+1);\r\n    return 0;\r\n}\r\n\"", "10": "#include<stdio.h>\n#include<string.h>\nint CountWord(char* pat, char* txt)\n{\n int len1;\n int len2,ind1,ind2;\n for(len1=0;pat[len1]!='\\\\0';len1++);\n for(len2=0;txt[len2]!='\\\\0';len2++);\n int res = 0;\n for (ind1 = 0; ind1 <= len2 - len1; ind1++)\n {\n for (ind2 = 0; ind2 < len1; ind2++)\n if (txt[ind1+ind2] != pat[ind2])\n break;\n if (ind2 == len1)\n {\n res++;\n ind2 = 0;\n }\n }\n return res;\n}\nint main()\n{\n char txt[1000000],pat[]=\"the\";\n scanf(\"%[^\\n]s\",txt);\n printf(\"\"%d\"\",CountWord(pat, txt));\n return 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "String_Level_3_Test_1": {"1": "#include<stdio.h>\r\n\r\nint main(){\r\n    char string[1000000],ans;\r\n    int ind;\r\n    long long int count[26]={0},max=0;\r\n    scanf(\"%[^\\n]s\",string);\r\n\r\n    for(ind=0;string[ind];ind++){\r\n        count[string[ind]]++;\r\n        if(count[string[ind]]>max){\r\n            max = count[string[ind]];\r\n            ans = string[ind];\r\n        }\r\n    }\r\n    printf(\"%c\",ans);\r\n}", "2": "#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n\r\nvoid check(char str[])\r\n{\r\nint len,ind,flag1=0,flag2=1,flag3=1,flag4=1,flag5=1;\r\nfor(ind=0;str[ind];ind++)\r\n{\r\nif((str[ind]>=48&&str[ind]<=58))\r\nflag2=0;\r\nif((str[ind]>=65&&str[ind]<=90))\r\nflag3=0;\r\nif((str[ind]>=33&&str[ind]<=47)||str[ind]==64)\r\nflag4=0;\r\nif(str[ind]>='0' && str[ind]<='9')\r\nflag5=0;\r\n}\r\nif(ind>=10)\r\nflag1=0;\r\nif(flag1==1||flag2==1||flag3==1||flag4==1||flag5==1)\r\nprintf(\"Weak password\");\r\nelse\r\nprintf(\"Strong password\");\r\n\r\nreturn;\r\n}\r\nint main()\r\n{\r\nchar string[100000];\r\nscanf(\"%s\",string);\r\ncheck(string);\r\nreturn 0;\r\n}", "3": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\nint main()\r\n{\r\nchar str[50];\r\nscanf(\"%s\",str);\r\n\r\nint index,num,count=0,numbers=1;\r\nindex=0;\r\nnum=-1;\r\nwhile(str[index])\r\n{\r\nif(str[index]=='.' && num>=0 && num<=255)\r\n{\r\nnumbers++;\r\ncount++;\r\nnum=0;\r\nindex++;\r\n}\r\nelse if(str[index]!='.' && str[index]>='0' && str[index]<='9')\r\n{\r\nif(num==-1)\r\nnum=0;\r\nnum=num*10+(str[index]-'0');\r\nindex++;\r\n}\r\nelse\r\nbreak;\r\n}\r\nif(str[index]=='\\\\0' && numbers==4 && count==3)\r\nprintf(\"Valid\");\r\nelse\r\nprintf(\"Invalid\");\r\nreturn 0;\r\n}", "4": "#include<stdio.h>\r\nint main()\r\n{\r\nint ind,flag=0;\r\nchar str[100];\r\nscanf(\"%s\",str);\r\nfor(ind=0;str[ind]!='@' && str[ind]!='\\\\0';ind++)\r\n{\r\nif(!((str[ind]>='A' && str[ind]<='Z')||(str[ind]>='a' && str[ind]<='z')||\r\n(str[ind]>='0'&&str[ind]<='9')||str[ind]=='.'||str[ind]=='_'))\r\n{\r\nflag=1;\r\nbreak;\r\n}\r\n}\r\nif(str[ind]=='\\\\0')\r\nflag=1;\r\nfor(++ind;flag==0 && str[ind]!='\\\\0' &&str[ind]!='.';ind++)\r\n{\r\nif(!(str[ind]>='a'&&str[ind]<='z'))\r\n{\r\nflag=1;\r\nbreak;\r\n}\r\n}\r\nif(str[ind]=='\\\\0')\r\nflag=1;\r\nif(str[ind]=='.' && flag==0)\r\n{\r\nif(!(str[ind+1]=='c'&&str[ind+2]=='o'&&str[ind+3]=='m'))\r\nflag=1;\r\n}\r\nif(flag==0)\r\nprintf(\"Valid\");\r\nelse\r\nprintf(\"Invalid\");\r\nreturn 0;\r\n}", "5": "#include <stdio.h>\r\nint find_pangram(char []);\r\nint main()\r\n{\r\nchar array1[100];\r\nint flag;\r\nscanf(\"%[^\\n]s\",array1);\r\n//gets(array1);\r\nflag = find_pangram(array1);\r\nif (flag == 1)\r\nprintf(\"Pangram\");\r\nelse\r\nprintf(\"Not Pangram\");\r\nreturn 0;\r\n}\r\nint find_pangram(char array1[])\r\n{\r\nint num1[26] = {0}, ind = 0,count=0;\r\nwhile (array1[ind] != '\\\\0')\r\n{\r\nif(array1[ind]>=65&&array1[ind]<=91)\r\narray1[ind]+=32;\r\nnum1[array1[ind] - 'a']++;\r\nind++;\r\n}\r\nfor (ind = 0; ind < 26; ind++)\r\n{\r\nif (num1[ind] != 0)\r\ncount++;\r\n}\r\nif(count==26)\r\nreturn 1;\r\nelse\r\nreturn 0;\r\n}", "6": "#include<stdio.h>\r\nint main()\r\n{\r\nchar str[100],str1[100];\r\nint ind,ind1,len,pos=0,count=0;\r\nscanf(\"%[^\\n]s\",str);\r\nfor(len=0;str[len]!='\\\\0';len++);\r\nfor(ind=0;ind<len-2;ind++)\r\n{\r\nind1=len-1;\r\nwhile(ind1!=ind)\r\n{\r\nif(str[ind]==str[ind1])\r\n{\r\nstr1[pos++]=str[ind];\r\ncount++;\r\nbreak;\r\n}\r\nelse{\r\nind1--;\r\n}\r\n}\r\n}\r\nif(count>0)\r\n{\r\nprintf(\"NOT ISOGRAM\");\r\n}\r\nelse\r\n{\r\nprintf(\"ISOGRAM\");\r\n}\r\n\r\nreturn 0;\r\n}", "7": "#include <stdio.h>\r\nint find_anagram(char [], char []);\r\nint main()\r\n{\r\nchar array1[100], array2[100];\r\nint flag;\r\nscanf(\"%s %s\",array1,array2);\r\nflag = find_anagram(array1, array2);\r\nif (flag == 1)\r\nprintf(\"%s and %s are Anagrams.\\n\", array1, array2);\r\nelse\r\nprintf(\"%s and %s are Not Anagrams.\\n\", array1, array2);\r\nreturn 0;\r\n}\r\nint find_anagram(char array1[], char array2[])\r\n{\r\nint num1[26] = {0}, num2[26] = {0}, ind = 0;\r\nwhile (array1[ind] != '\\\\0')\r\n{\r\nnum1[array1[ind] - 'a']++;\r\nind++;\r\n}\r\nind = 0;\r\nwhile (array2[ind] != '\\\\0')\r\n{\r\nnum2[array2[ind] -'a']++;\r\nind++;\r\n}\r\nfor (ind = 0; ind < 26; ind++)\r\n{\r\nif (num1[ind] != num2[ind])\r\nreturn 0;\r\n}\r\nreturn 1;\r\n}", "8": "#include<stdio.h>\r\nint main()\r\n{\r\nchar str[10000];\r\nint len,ind;\r\nscanf(\"%[^\\n]s\",str);\r\nfor(len=0;str[len]!='\\\\0';len++);\r\nfor(ind=len;ind>0;ind--)\r\n{\r\nif(str[ind]==' ')\r\n{\r\nstr[ind]='\\\\0';\r\nprintf(\"%s \",&(str[ind])+1);\r\n}\r\n}\r\nprintf(\"%s\",str);\r\nreturn 0;\r\n}", "9": "#include<stdio.h>\r\nint main()\r\n{\r\n\r\nchar isbn[100000];\r\nint ind, sum = 0,flag=0;\r\nscanf(\"%s\",isbn);\r\nfor (ind = 0; ind <= 9; ind++)\r\n{\r\nif(isbn[0]=='X')\r\n{\r\nflag=1;\r\nbreak;\r\n}\r\nif(isbn[ind]=='X')\r\nisbn[ind]=10;\r\nelse\r\nisbn[ind]-=48;\r\n\r\nsum = sum + ((ind + 1)*isbn[ind]);\r\n}\r\nif (sum % 11==0&&flag==0)\r\nprintf(\"ISBN number is valid)\";\r\nelse\r\nprintf(\"ISBN number is not valid)\";\r\nreturn 0;\r\n}", "10": "#include<stdio.h>\r\nint main()\r\n{\r\nint cnt=0,ind;\r\nchar str[1000000];\r\nscanf(\"%s\",str);\r\nfor(ind=0;str[ind]!='\\\\0'&&cnt!=-1;ind++)\r\n{\r\nif(str[ind]=='(')\r\ncnt++;\r\nelse\r\ncnt--;\r\n}\r\nif(cnt==0)\r\nprintf(\"Balanced\");\r\nelse\r\nprintf(\"Unbalanced\");\r\nreturn 0;\r\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "String_Level_3_Test_2": {"1": "#include<stdio.h>\r\nint main()\r\n{\r\n int number,index,ind;\r\n char **str;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0;ind<number; ind++)\r\n    str[ind] = (char*)malloc(1000 * sizeof(char));\r\nfor(index=0;index<number;index++)\r\n scanf(\" %[^\\n]s\",str[index]);\r\nfor(index=0;index<number;index++)\r\n printf(\"%s\\n\",str[index]);\r\n return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n char **str;\r\n int number,string,ind;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0; ind<number; ind++)\r\n    str[ind]=(char*)malloc(1000 * sizeof(char));\r\n for(string=0;string<number;string++)\r\n scanf(\"%s\",str[string]);\r\n int maxIndex=0,len,max=0;\r\n for(string=0;string<number;string++)\r\n {\r\n len=strlen(str[string]);\r\n if(len>max)\r\n {\r\n max=len;\r\n maxIndex=string;\r\n }\r\n }\r\n printf(\"The longest string is \"%s\" of length %d\",str[maxIndex],max);\r\nreturn 0;\r\n}\r\n", "3": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main(){\r\n    int number,ans,ind;\r\n    scanf(\"%d\",&number);\r\n    char **str,*count;\r\n    str = (char**)malloc(number * sizeof(char*));\r\n    for(ind=0; ind<number; ind++)\r\n      str[ind] = (char*)malloc(1000*sizeof(char));\r\n    count = (char*)malloc(number*sizeof(char));\r\n    for(int ind=0;ind<number;ind++){\r\n        scanf(\" %[^\\n]s\",str[ind]);\r\n    for(count[ind]=0;str[ind][count[ind]];count[ind]++);\r\n        if(count[ind]<count[ind-1] && ind>0){\r\n            ans = ind;\r\n        }\r\n        else if(ind==0){\r\n            ans = ind;\r\n        }\r\n    }\r\n    for(int ind=0;ind<number;ind++){\r\n        if(ind!=ans){\r\n            printf(\"%s\\n\",str[ind]);\r\n        }\r\n        else{\r\n            for(int ind1=count[ind]-1;ind1>=0;ind1--){\r\n                printf(\"%c\",str[ind][ind1]);\r\n            }\r\n            printf(\"\\n\");\r\n        }\r\n    }\r\n}\r\n", "4": "#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n char **str;\r\n int number,string,ind;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0;ind<number;ind++)\r\n    str[ind]=(char*)malloc(1000 * sizeof(char));\r\n for(string=0;string<number;string++)\r\n scanf(\" %[^\\n]s\",str[string]);\r\nint index=0,count=0;\r\n for(string=0;string<number;string++)\r\n {\r\n for(index=0;str[string][index]!=NULL;index++)\r\n {\r\n if(str[string][index]>='0' && str[string][index]<='9')\r\n {\r\n count++;\r\n break;\r\n }\r\n }\r\n }\r\n printf(\"%d\",count);\r\nreturn 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nint main()\r\n{\r\n int key,index;\r\n char str[1000];\r\n scanf(\"%[^\\n]s\",str);\r\n for(key=0;str[key];key++);\r\n for(index=key-1;index>=0;index--)\r\n {\r\n str[index]=((((str[index]-'a')+(key-index-1))%26)+'a');\r\n }\r\n printf(\"%s\",str);\r\n return 0;\r\n}", "6": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n int number,index;\r\n char **str;\r\n int first=0;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(index=0;index<number;index++)\r\n    str[index] = (char*)malloc(1000*sizeof(char));\r\n for(index=0;index<number;index++)\r\n scanf(\" %[^\\n]s\",str[index]);\r\n for(index=1;index<number;index++)\r\n {\r\n if(str[index][0]<str[first][0])\r\n first=index;\r\n else if(str[index][0]==str[first][0])\r\n {\r\n int position;\r\n for(position=1;str[index][position]==str[first][position];position++);\r\n if(str[index][position]<str[first][position])\r\n first=index;\r\n }\r\n }\r\n printf(\"%s\",str[first]);\r\nreturn 0;\r\n}", "7": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n int number,index,ind;\r\n scanf(\"%d\",&number);\r\n char **str;\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0;ind<number;ind++)\r\n    str[ind]=(char*)malloc(1000*sizeof(char));\r\n int last=0;\r\n for(index=0;index<number;index++)\r\n scanf(\" %[^\\n]s\",str[index]);\r\n for(index=1;index<number;index++)\r\n {\r\n if(str[index][0]>str[last][0])\r\n last=index;\r\n else if(str[index][0]==str[last][0])\r\n {\r\n int position;\r\n for(position=1;str[index][position]==str[last][position];position++);\r\n if(str[index][position]>str[last][position])\r\n last=index;\r\n }\r\n }\r\n printf(\"%s\",str[last]);\r\n return 0;\r\n}", "8": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n int number,index,ind;\r\n char **str;\r\n int second,first;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0;ind<number;ind++)\r\n    str[ind] = (char*)malloc(1000 * sizeof(char));\r\n \r\n first=0;\r\n for(index=0;index<number;index++)\r\n scanf(\" %[^\\n]s\",str[index]);\r\n for(index=0;index<number;index++)\r\n {\r\n if(strcmp(str[first],str[index])==1)\r\nfirst=index;\r\n }\r\n second=(first+1)%number;\r\n for(index=0;index<number;index++)\r\n {\r\n if(strcmp(str[first],str[index])==-1\r\n &&strcmp(str[second],str[index])==1)\r\n second=index;\r\n }\r\n printf(\"%s\",str[second]);\r\n return 0;\r\n}", "9": "#include<stdio.h>\r\n#include<string.h>\r\nint isRotation(char *str1,char *str2)\r\n{\r\n int index1,index2,len;\r\n index1=0;\r\n index2=0;\r\n len=0;\r\n while(str1[len]!=NULL)\r\n {\r\n len++;\r\n }\r\n for(index1=0;str1[index1]!=NULL;index1++)\r\n {\r\n while(str1[index1]!=NULL && str1[index1]!=str2[index2])\r\n{\r\nindex1++;\r\n }\r\n if(str1[index1]==NULL)\r\n break;\r\n int compare1=index1+1;\r\n int compare2=index2+1;\r\n while(str2[compare2]!=NULL &&\r\n str1[compare1%len]==str2[compare2])\r\n {\r\n compare1++;\r\n compare2++;\r\n }\r\n if(str2[compare2]==NULL)\r\n return 1;\r\n }\r\n return -1;\r\n}\r\nint main()\r\n{\r\n char str1[1000],str2[1000];\r\n int result;\r\n scanf(\"%s %s\",str1,str2);\r\n result=isRotation(str1,str2);\r\n if(result==1)\r\n printf(\"Yes\");\r\n else\r\n printf(\"No\");\r\n return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n char **str;\r\n int number,string,ind;\r\n scanf(\"%d\",&number);\r\n str = (char**)malloc(number * sizeof(char*));\r\n for(ind=0;ind<number;ind++)\r\n    str[ind]=(char*)malloc(1000 * sizeof(char));\r\n for(string=0;string<number;string++)\r\n scanf(\" %[^\\n]s\",str[string]);\r\n int index=0,count=0;\r\n for(string=0;string<number;string++)\r\n {\r\n for(index=string+1;index<number;index++)\r\n {\r\n if(strcmp(str[string],str[index])==0)\r\n {\r\n count++;\r\n }\r\n }\r\n }\r\n printf(\"%d\",count);\r\nreturn 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Structure_Level_0": {"1": "#include<stdio.h>\nstruct value\n{\n long long int x,y;\n};\nint main()\n{\n struct value point;\n scanf(\"%lld%lld\" , &point.x , &point.y);\n printf(\"%lld %lld\" , point.x ,point.y);\n return 0;\n}", "2": "#include<stdio.h>\nstruct date\n{\nint dd;\nint mm;\nint yy;\n};\nint main()\n{\n struct date inp_date;\n scanf(\"%d %d %d\",&inp_date.dd,&inp_date.mm,&inp_date.yy);\n  printf(\"%d-%d-%d\",inp_date.dd,inp_date.mm,inp_date.yy);\n  return 0;\n}", "3": "#include<stdio.h>\nstruct weight_data\n{\n    int kg;\n    int gram;\n};\nint main()\n{\n    struct weight_data inp_weight;\n    scanf(\"%d %d\",&inp_weight.kg,&inp_weight.gram);\n    printf(\"%d.%d\",inp_weight.kg,inp_weight.gram);\n    return 0;\n}", "4": "#include<stdio.h>\nstruct complex_value\n{\n    long double real;\n    long double imaginary;\n};\nint main()\n{\n    struct complex_value inp_complex;\n    scanf(\"%Lf %Lf\",&inp_complex.real,&inp_complex.imaginary);\n    printf(\"%Lf\\n%Lf\",inp_complex.real,inp_complex.imaginary);\n    return 0;\n}", "5": "#include<stdio.h>\nstruct height_data\n{\n   int feet;\n   int inch;\n};\nint main()\n{\n    struct height_data inp_height;\n    scanf(\"%d %d\",&inp_height.feet,&inp_height.inch);\n    printf(\"%d'%d\",inp_height.feet,inp_height.inch);\n    return 0;\n}", "6": "#include<stdio.h>\nstruct time_data\n{\n    int hr;\n    int min;\n    int sec;\n};\nint main()\n{\n    struct time_data inp;\n    scanf(\"%d %d %d\",&inp.hr,&inp.min,&inp.sec);\n    printf(\"%d:%d:%d\",inp.hr,inp.min,inp.sec);\n    return 0;\n}", "7": "#include<stdio.h>\nstruct money_value\n{\n    int rs;\n    int ps;\n};\nint main()\n{\n    struct money_value inp;\n    scanf(\"%d %d\",&inp.rs,&inp.ps);\n    printf(\"%drs %dps\",inp.rs,inp.ps);\n    return 0;\n}", "8": "#include<stdio.h>\nstruct date\n{\n    int dd;\n    int mm;\n    int yy;\n};\nstruct id_card\n{\n   char name[1000];\n   struct date dob;\n   long long int mob_num;\n   long int reg_num;\n   char address[2000];\n};\nint main()\n{\n struct  id_card id;\n scanf(\"%[^\\n]\\ns\",id.name);\n scanf(\"%d %d %d\\n\",&id.dob.dd,&id.dob.mm,&id.dob.yy);\n scanf(\"%lld %ld\\n\",&id.mob_num,&id.reg_num);\n scanf(\"%[^\\n]s\",id.address);\n printf(\"%s\\n\",id.name);\n printf(\"%d:%d:%d\\n\",id.dob.dd,id.dob.mm,id.dob.yy);\n printf(\"%lld\\n%ld\\n\",id.mob_num,id.reg_num);\n printf(\"%s\",id.address);\n}", "9": "#include<stdio.h>\nstruct date\n{\n  int dd;\n  int mm;\n  int yy;\n};\nstruct employee\n{\n   int id;\n   char name[1000];\n   struct date dob;\n   long double salary;\n};\nint main()\n{\n    int N,ind;\n    scanf(\"%d\",&N);\n    struct employee emp[N];\n    for(ind=0;ind<N;ind++,  printf(\"\\n\"))\n    {\n        scanf(\"%d\\n\",&emp[ind].id);\n        scanf(\"%[^\\n]\\n\",emp[ind].name);\n        scanf(\"%d %d %d\\n\",&emp[ind].dob.dd,&emp[ind].dob.mm,&emp[ind].dob.yy);\n        scanf(\"%Lf\",&emp[ind].salary);\n\n    }\n    for(ind=0;ind<N;ind++)\n    {\n        printf(\"ID : %d\\n\",emp[ind].id);\n        printf(\"Name : %s\\n\",emp[ind].name);\n        printf(\"DOB : %d/%d/%d\\n\",emp[ind].dob.dd,emp[ind].dob.mm,emp[ind].dob.yy);\n        printf(\"Salary : %Lf\\n\",emp[ind].salary);\n        printf(\"\\n\");\n    }\n    return 0;\n}", "10": "#include<stdio.h>\nunion details\n{\n  int search_id;\n  char search_name[50];\n};\nint main()\n{\n  union details search_data;\n  int ch;\n  scanf(\"%d\",&ch);\n  if(ch==1)//search by id\n  {\n       scanf(\"%d\",&search_data.search_id);   \n       printf(\"%d\",search_data.search_id);       \n  }\n  else//search by name\n  {\n             scanf(\" %[^\\n]s\",&search_data.search_name);\n        printf(\"%s\",search_data.search_name);\n  }\n return 0;\n}", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Structure_Level_1": {"1": "#include<stdio.h>\r\nstruct co_ordinate\r\n{\r\n    int x_axis;\r\n    int y_axis;\r\n};\r\nstruct co_ordinate get_coordinate()\r\n{\r\n    struct co_ordinate input_co_ord;\r\n    scanf(\"%d %d\",&input_co_ord.x_axis,&input_co_ord.y_axis);\r\n    return input_co_ord;\r\n}\r\nint main()//entry point\r\n{\r\n  struct co_ordinate read_input;\r\n  read_input = get_coordinate();\r\n  printf(\"%d,%d\",read_input.x_axis,read_input.y_axis);\r\n  return 0;\r\n}\r\n", "2": "#include<stdio.h>\nstruct weight\n{\n    int kilograms;\n    int grams;\n};\nstruct weight get_weight()\n{\n    struct weight input_weight;\n    scanf(\"\"%d %d\"\",&input_weight.kilograms,&input_weight.grams);\n    return input_weight;\n}\nint main()//entry point\n{\n  struct weight read_input;\n  read_input = get_weight();\n  printf(\"%d.%03dkg\",read_input.kilograms,read_input.grams);\n  return 0;\n}\n", "3": "#include<stdio.h>\r\nstruct height\r\n{\r\n    int feets;\r\n    int inches;\r\n};\r\nstruct height get_height()\r\n{\r\n    struct height input_height;\r\n    scanf(\"%d %d\",&input_height.feets,&input_height.inches);\r\n    return input_height;\r\n}\r\nint main()//entry point\r\n{\r\n  struct height read_input;\r\n  read_input = get_height();\r\n  printf(\"%d'%d\"\",read_input.feets,read_input.inches);\r\n  return 0;\r\n}\r\n", "4": "#include<stdio.h>\nstruct complex\n{\n    float real;\n    float imaginary;\n\n};\nstruct complex get_complex()\n{\n    struct complex input_complex;\n    scanf(\"%f %f\",&input_complex.real,&input_complex.imaginary);\n    return input_complex;\n}\nint main()//entry point\n{\n  struct complex read_input;\n  read_input = get_complex();\n  printf(\"%.2f%+.2fi\",read_input.real,read_input.imaginary);\n  return 0;\n}\n", "5": "#include<stdio.h>\r\nstruct date\r\n{\r\n    int dd;\r\n    int mm;\r\n    int yy;\r\n};\r\nstruct date get_date()\r\n{\r\n    struct date input_date;\r\n    scanf(\"%d %d %d\",&input_date.dd,&input_date.mm,&input_date.yy);\r\n    return input_date;\r\n}\r\nint main()//entry point\r\n{\r\n  struct date read_input;\r\n  read_input = get_date();\r\n  printf(\"%d-%d-%d\",read_input.dd,read_input.mm,read_input.yy);\r\n  return 0;\r\n}", "6": "#include<stdio.h>\nstruct time\n{\n    int hh;\n    int mm;\n    int ss;\n};\nstruct time get_time()\n{\n    struct time input_time;\n    scanf(\"%d %d %d\",&input_time.hh,&input_time.mm,&input_time.ss);\n    return input_time;\n}\nint main()//entry point\n{\n  struct time read_input;\n  read_input = get_time();\n  printf(\"%02d:%02d:%02d\",read_input.hh,read_input.mm,read_input.ss);\n  return 0;\n}\n    ", "7": "#include<stdio.h>\nstruct cost\n{\n    int rupee;\n    int paise;\n};\nstruct cost get_cost()\n{\n    struct cost input_cost;\n    scanf(\"%d %d\",&input_cost.rupee,&input_cost.paise);\n    return input_cost;\n}\nint main()//entry point\n{\n  struct cost read_input;\n  read_input = get_cost();\n  printf(\"%d.%02d\",read_input.rupee,read_input.paise);\n  return 0;\n}\n", "8": "#include<stdio.h>\r\nstruct date\r\n{\r\n    int dd;\r\n    int mm;\r\n    int yy;\r\n};\r\nstruct id\r\n{\r\n  char name[100];\r\n  struct date dob;\r\n  long long mob_num;\r\n  long long reg_num;\r\n  char address[1000];\r\n};\r\nstruct id get_id()\r\n{\r\n    struct id input_id;\r\n    scanf(\"%[^\\n]s\",&input_id.name);\r\n    scanf(\"%d-%d-%d\",&input_id.dob.dd,&input_id.dob.mm,&input_id.dob.yy);\r\n    scanf(\"%lld\",&input_id.mob_num);\r\n    scanf(\"%lld\\n\",&input_id.reg_num);\r\n    scanf(\" %[^\\n]s\",&input_id.address);\r\n    return input_id;\r\n}\r\nint main()//entry point\r\n{\r\n  struct id read_id;\r\n  read_id = get_id();\r\n  printf(\"%s\\n%d-%d-%d\\n%lld\\n%lld\\n%s\",read_id.name,read_id.dob.dd,read_id.dob.mm,read_id.dob.yy,read_id.mob_num,read_id.reg_num,read_id.address);\r\n  return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nstruct bank_details\r\n{\r\n    int cust_id;\r\n    long long int cust_acc_num;\r\n    char cust_name[100];\r\n    long long int amount_in_account;\r\n};\r\nstruct bank_details * get_bank_details(int tot_customers ,struct bank_details input_bank_details[] )\r\n{\r\n    int ind;\r\n    for(ind=0;ind<tot_customers;ind+=1)\r\n    {\r\n        scanf(\"%d\",&input_bank_details[ind].cust_id);\r\n        scanf(\"%lld\",&input_bank_details[ind].cust_acc_num);\r\n        scanf(\" %[^\\n]s\",&input_bank_details[ind].cust_name);\r\n        scanf(\"%lld\",&input_bank_details[ind].amount_in_account);\r\n    }\r\n    return input_bank_details;\r\n}\r\nint main()//entry point\r\n{\r\n  int tot_customers;\r\n  scanf(\"%d\",&tot_customers);\r\n  struct bank_details read_bank_details[tot_customers];\r\n  get_bank_details(tot_customers,read_bank_details);\r\n  int ind;\r\n  for(ind=0;ind<tot_customers;ind+=1,printf(\"\\n\\n\"))\r\n  {\r\n      printf(\"%d\\n%lld\\n%s\\n%lld\",read_bank_details[ind].cust_id,read_bank_details[ind].cust_acc_num,read_bank_details[ind].cust_name,read_bank_details[ind].amount_in_account);\r\n  }\r\n  return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nstruct detail\r\n{\r\n  char name[100];\r\n  int birth_year;\r\n};\r\nstruct detail get_detail()\r\n{\r\n    struct detail input_detail;\r\n    scanf(\"%[^\\n]s\",&input_detail.name);\r\n    scanf(\"%d\",&input_detail.birth_year);\r\n    return input_detail;\r\n}\r\nint main()//entry point\r\n{\r\n  struct detail read_detail ;\r\n  read_detail = get_detail();\r\n  printf(\"%s\\n%d\",read_detail.name, read_detail.birth_year );\r\n  return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Structure_Level_2": {"1": "#include<stdio.h>\r\nstruct co_ordinate\r\n{\r\n    int x_axis;\r\n    int y_axis;\r\n};\r\nfloat find_slope(struct co_ordinate co_ord1,struct co_ordinate co_ord2)\r\n{\r\n    return (float)(co_ord2.y_axis-co_ord1.y_axis)/(co_ord2.x_axis-co_ord1.x_axis);\r\n}\r\nint main()//entry point\r\n{\r\n  struct co_ordinate input1;\r\n  struct co_ordinate input2;\r\n  scanf(\"%d %d\",&input1.x_axis,&input1.y_axis);\r\n  scanf(\"%d %d\",&input2.x_axis,&input2.y_axis);\r\n  float slope;\r\n  slope = find_slope(input1,input2);\r\n  printf(\"%.2f\",slope);\r\n  return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\nstruct weight\r\n{\r\n    int kilograms;\r\n    int grams;\r\n};\r\nint cart_cap(int tot_weights,struct weight input[], int max_cart_cap)\r\n{\r\n    struct weight current_cap={0,0};\r\n    int ind;\r\n    for(ind=0;ind<tot_weights;ind+=1)\r\n    {\r\n        current_cap.kilograms+=input[ind].kilograms;\r\n        current_cap.grams+=input[ind].grams;\r\n    }\r\n    current_cap.kilograms+=(current_cap.grams/1000);\r\n    current_cap.grams=(current_cap.grams%1000);\r\n    if(max_cart_cap>current_cap.kilograms)\r\n        return 0;\r\n    else if(max_cart_cap==current_cap.kilograms&&current_cap.grams==0)\r\n        return 0;\r\n    else\r\n    {\r\n        if(current_cap.grams==0)\r\n            return current_cap.kilograms-max_cart_cap;\r\n        else\r\n            return current_cap.kilograms-max_cart_cap+1;\r\n    }\r\n}\r\nint main()//entry point\r\n{\r\n    int tot_weights;\r\n    int max_cart_cap;\r\n    scanf(\"%d\",&tot_weights);\r\n    struct weight input[tot_weights];\r\n    int ind;\r\n    for(ind=0;ind<tot_weights;ind+=1)\r\n        scanf(\"%d.%d\",&input[ind].kilograms,&input[ind].grams);\r\n    scanf(\"%d\",&max_cart_cap);\r\n    printf(\"%d\",cart_cap(tot_weights,input,max_cart_cap));\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nstruct complex\r\n{\r\n    float real;\r\n    float imaginary;\r\n};\r\ntypedef struct complex COMPLEX;\r\nstruct complex get_complex()\r\n{\r\n    struct complex input_complex;\r\n    scanf(\"%f %f\",&input_complex.real,&input_complex.imaginary);\r\n    return input_complex;\r\n}\r\nCOMPLEX complex_multiplication(COMPLEX inp1,COMPLEX inp2)\r\n{\r\n    COMPLEX product;\r\n    product.real=(inp1.real*inp2.real)-(inp1.imaginary*inp2.imaginary);\r\n    product.imaginary=(inp1.imaginary*inp2.real)+(inp1.real*inp2.imaginary);\r\n    return product;\r\n}\r\nint main()//entry point\r\n{\r\n  COMPLEX read_input1,read_input2;\r\n  read_input1 = get_complex();\r\n  read_input2 = get_complex();\r\n  COMPLEX result;\r\n  result=complex_multiplication(read_input1,read_input2);\r\n  printf(\"%.2f+%.2fi\",result.real,result.imaginary);\r\n  return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nstruct date\r\n{\r\n    int dd;\r\n    int mm;\r\n    int yy;\r\n};\r\ntypedef struct date DATE;\r\nstruct date get_date()\r\n{\r\n    struct date input_date;\r\n    scanf(\"%d %d %d\",&input_date.dd,&input_date.mm,&input_date.yy);\r\n    return input_date;\r\n}\r\nint isLeap(int yr)\r\n{\r\n    if((yr%4==0&&yr%100!=0) || (yr%400==0))\r\n        return 1;\r\n    return 0;\r\n}\r\nint diff_date(DATE date1 , DATE date2)\r\n{\r\n    int diff_days=0;\r\n    while(!(date1.dd==date2.dd&&date1.mm==date2.mm&&date1.yy==date2.yy))\r\n    {\r\n        date1.dd++;\r\n        diff_days+=1;\r\n        if(date1.mm==1||date1.mm==3||date1.mm==5||date1.mm==7||date1.mm==8||date1.mm==10||date1.mm==12)\r\n        {\r\n            if(date1.dd >31)\r\n            {\r\n                date1.dd=1;\r\n                date1.mm++;\r\n                if(date1.mm==13)\r\n                {\r\n                    date1.mm=1;\r\n                    date1.yy++;\r\n                }\r\n            }\r\n        }\r\n        else if(date1.mm==4||date1.mm==6||date1.mm==9||date1.mm==11)\r\n        {\r\n            if(date1.dd >30)\r\n            {\r\n                date1.dd=1;\r\n                date1.mm++;\r\n                if(date1.mm==13)\r\n                {\r\n                    date1.mm=1;\r\n                    date1.yy++;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if((isLeap(date1.yy)==1&&date1.dd>29)||(isLeap(date1.yy)==0&&date1.dd>28))\r\n            {\r\n                date1.dd=1;\r\n                date1.mm++;\r\n            }\r\n        }\r\n    }\r\n    return diff_days;\r\n}\r\nint main()//entry point\r\n{\r\n  struct date read_input1;\r\n  struct date read_input2;\r\n  read_input1 = get_date();\r\n  read_input2 = get_date();\r\n  int diff;\r\n  diff=diff_date(read_input1,read_input2);\r\n  printf(\"%d\",diff);\r\n  return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\nstruct time\r\n{\r\n    int hh;\r\n    int mm;\r\n    int ss;\r\n\r\n};\r\ntypedef struct time TIME;\r\nstruct time get_time()\r\n{\r\n    struct time input_time;\r\n    scanf(\"%d %d %d\",&input_time.hh,&input_time.mm,&input_time.ss);\r\n    return input_time;\r\n}\r\nint diff_time(TIME time1,TIME time2)\r\n{\r\n    int tot_seconds1;\r\n    int tot_seconds2;\r\n    int diff_seconds;\r\n    tot_seconds1=time1.hh*3600+time1.mm*60+time1.ss;\r\n    tot_seconds2=time2.hh*3600+time2.mm*60+time2.ss;\r\n    diff_seconds=abs(tot_seconds1-tot_seconds2);\r\n    return diff_seconds;\r\n}\r\nint main()//entry point\r\n{\r\n  struct time read_input1;\r\n  struct time read_input2;\r\n  read_input1 = get_time();\r\n  read_input2 = get_time();\r\n  int diff;\r\n  diff=diff_time(read_input1,read_input2);\r\n  printf(\"%d\",diff);\r\n  return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nstruct cost\r\n{\r\n    int rupee;\r\n    int paise;\r\n};\r\ntypedef struct cost DENOM;\r\nstruct cost get_cost()\r\n{\r\n    struct cost input_cost;\r\n    scanf(\"%d %d\",&input_cost.rupee,&input_cost.paise);\r\n    return input_cost;\r\n}\r\nvoid swap(DENOM arr[],int ind1, int ind2)\r\n{\r\n    DENOM temp;\r\n    temp = arr[ind1];\r\n    arr[ind1] = arr[ind2];\r\n    arr[ind2] = temp;\r\n}\r\nvoid min_heapify(DENOM arr[] , int parent_ind,int scope)\r\n{\r\n    int left_ind,right_ind;\r\n    left_ind = parent_ind*2+1;\r\n    right_ind = left_ind+1;\r\n    //no child-> left> scope\r\n    if(left_ind>scope)\r\n        return ;\r\n    if(left_ind==scope)//one child=> left child will equal to th scope\r\n    {\r\n        if(arr[left_ind].rupee*100+arr[left_ind].paise <arr[parent_ind].rupee*100+arr[parent_ind].paise)\r\n        {\r\n            swap(arr,left_ind,parent_ind);\r\n        }\r\n    }\r\n    else if(right_ind <= scope)//parent got two child\r\n    {\r\n         if(arr[parent_ind].rupee*100+arr[parent_ind].paise>arr[left_ind].rupee*100+arr[left_ind].paise\r\n             ||arr[parent_ind].rupee*100+arr[parent_ind].paise > arr[right_ind].rupee*100+arr[right_ind].paise)\r\n         {\r\n             if(arr[left_ind].rupee*100+arr[left_ind].paise<arr[right_ind].rupee*100+arr[right_ind].paise)\r\n             {\r\n                swap(arr,left_ind,parent_ind);//it may affect the left_ind as it may be a parent\r\n                min_heapify(arr,left_ind,scope);\r\n             }\r\n             else\r\n             {\r\n                 swap(arr,right_ind,parent_ind);\r\n                 min_heapify(arr,right_ind,scope);\r\n             }\r\n         }\r\n    }\r\n}\r\nint max_item_purchase(DENOM curr_amount,int tot_items, DENOM arr[])\r\n{\r\n    int scope;\r\n    int items_bought=0;\r\n    int parent;\r\n    scope=tot_items-1;\r\n\r\n    for(parent = (scope-1)/2; parent>=0 ; parent--)//6 to 0\r\n        min_heapify(arr,parent,scope);\r\n    swap(arr,0,scope);//swapping the min val found at root(0th) right most\r\n    //printf(\"%d %d\\n\",arr[scope].rupee*100+arr[scope].paise , curr_amount.rupee*100+curr_amount.paise);\r\n    if(arr[scope].rupee*100+arr[scope].paise <= curr_amount.rupee*100+curr_amount.paise)\r\n    {\r\n        items_bought+=1;\r\n        int val= curr_amount.rupee*100+curr_amount.paise-arr[scope].rupee*100+arr[scope].paise;\r\n        curr_amount.rupee=val/100;\r\n        curr_amount.paise=val%100;\r\n    }\r\n    else\r\n        return items_bought;\r\n    //printf(\"Hi\");\r\n    while(scope>0)\r\n    {\r\n      scope--;\r\n      min_heapify(arr,0,scope);//min heapifying root is sufficient,caz its only been a change\r\n      swap(arr,0,scope);//swapping the min val found at root(0th) right most\r\n      if(arr[scope].rupee*100+arr[scope].paise <= curr_amount.rupee*100+curr_amount.paise)\r\n     {\r\n        items_bought+=1;\r\n        int val= curr_amount.rupee*100+curr_amount.paise-arr[scope].rupee*100+arr[scope].paise;\r\n        curr_amount.rupee=val/100;\r\n        curr_amount.paise=val%100;\r\n     }\r\n     else\r\n         return items_bought;\r\n    }\r\n   return items_bought;\r\n}\r\nint main()//entry point\r\n{\r\n  struct cost read_input;\r\n  int tot_items;\r\n  DENOM tot_amount;\r\n  scanf(\"%d %d\",&tot_amount.rupee,&tot_amount.paise);\r\n  scanf(\"%d\",&tot_items);\r\n  DENOM input[tot_items];\r\n\r\n  int ind;\r\n  for(ind=0;ind<tot_items;ind+=1)\r\n  {\r\n      input[ind]=get_cost();\r\n  }\r\n  int res;\r\n  res=max_item_purchase(tot_amount,tot_items,input);\r\n  printf(\"%d\",res);\r\n  return 0;\r\n}", "7": "#include<stdio.h>\r\nstruct date\r\n{\r\n    int dd;\r\n    int mm;\r\n    int yy;\r\n};\r\nstruct id\r\n{\r\n  char name[100];\r\n  struct date dob;\r\n  long long mob_num;\r\n  long long reg_num;\r\n  char address[1000];\r\n};\r\ntypedef struct id ID;\r\nstruct id get_id()\r\n{\r\n    struct id input_id;\r\n    scanf(\" %[^\\n]s\",&input_id.name);\r\n    scanf(\"%d-%d-%d\",&input_id.dob.dd,&input_id.dob.mm,&input_id.dob.yy);\r\n    scanf(\"%lld\",&input_id.mob_num);\r\n    scanf(\"%lld\",&input_id.reg_num);\r\n    scanf(\" %[^\\n]s\",&input_id.address);\r\n    return input_id;\r\n}\r\nvoid swap(ID arr[],int ind1, int ind2)\r\n{\r\n    ID temp;\r\n    temp = arr[ind1];\r\n    arr[ind1] = arr[ind2];\r\n    arr[ind2] = temp;\r\n}\r\nint mystrcmp(char str1[],char str2[])\r\n{\r\n    int ind;\r\n    char ch1;\r\n    char ch2;\r\n    for(ind=0;str1[ind]&&str2[ind];ind+=1)\r\n    {\r\n        ch1=str1[ind];\r\n        ch2=str2[ind];\r\n        if(ch1>=65&&ch1<=90)\r\n            ch1+=32;\r\n        if(ch2>=65&&ch2<=90)\r\n            ch2+=32;\r\n        if(ch1!=ch2)\r\n            return ch1-ch2;\r\n\r\n    }\r\n    return str1[ind]-str2[ind];\r\n}\r\nvoid sort_id(int tot_students,ID input[])\r\n{\r\n    int ctr;\r\n    int ind;\r\n    for(ctr=0;ctr<tot_students;ctr+=1)\r\n    {\r\n        for(ind=0;ind<tot_students-ctr-1;ind+=1)\r\n        {\r\n            if(mystrcmp(input[ind].name,input[ind+1].name)>0)\r\n                swap(input,ind,ind+1);\r\n        }\r\n    }\r\n}\r\nint main()//entry point\r\n{\r\n  int tot_ids;\r\n  scanf(\"%d\",&tot_ids);\r\n  ID input[tot_ids];\r\n  int ind;\r\n  for(ind=0;ind<tot_ids;ind+=1)\r\n    input[ind] = get_id();\r\n  sort_id(tot_ids,input);\r\n  for(ind=0;ind<tot_ids;ind+=1)\r\n  {\r\n    printf(\"%s\\n\",input[ind].name);\r\n    printf(\"%d-%d-%d\\n\",input[ind].dob.dd,input[ind].dob.mm,input[ind].dob.yy);\r\n    printf(\"%lld\\n\",input[ind].mob_num);\r\n    printf(\"%lld\\n\",input[ind].reg_num);\r\n    printf(\"%s\\n\",input[ind].address);\r\n\r\n  }\r\n   return 0;\r\n}", "8": "#include<stdio.h>\r\n\r\nstruct bank_details\r\n{\r\n    int cust_id;\r\n    long long int cust_acc_num;\r\n    char cust_name[100];\r\n    long long int amount_in_account;\r\n};\r\nstruct res_group\r\n{\r\n    int index_of_max_amount_customer;\r\n    long long int tot_depo_amount;\r\n};\r\nstruct bank_details * get_bank_details(int tot_customers ,struct bank_details input_bank_details[] )\r\n{\r\n    int ind;\r\n    for(ind=0;ind<tot_customers;ind+=1)\r\n    {\r\n        scanf(\"%d\",&input_bank_details[ind].cust_id);\r\n        scanf(\"%lld\",&input_bank_details[ind].cust_acc_num);\r\n        scanf(\" %[^\\n]s\",&input_bank_details[ind].cust_name);\r\n        scanf(\"%lld\",&input_bank_details[ind].amount_in_account);\r\n    }\r\n    return input_bank_details;\r\n}\r\nstruct res_group find_max_dep(int tot_customers ,struct bank_details input[])\r\n{\r\n    struct res_group res;\r\n    int ind;\r\n    long long int max_amount;\r\n    long long int amount_deposited=0;\r\n    int max_ind=-1;\r\n    for(ind=0 ; ind<tot_customers; ind+=1)\r\n    {\r\n        if(input[ind].amount_in_account > max_amount)\r\n        {\r\n            max_amount=input[ind].amount_in_account;\r\n            max_ind=ind;\r\n        }\r\n        amount_deposited=amount_deposited+input[ind].amount_in_account;\r\n    }\r\n    res.index_of_max_amount_customer=max_ind;\r\n    res.tot_depo_amount=amount_deposited;\r\n    return res;\r\n}\r\nint main()//entry point\r\n{\r\n  int tot_customers;\r\n  scanf(\"%d\",&tot_customers);\r\n  struct bank_details read_bank_details[tot_customers];\r\n  get_bank_details(tot_customers,read_bank_details);\r\n  struct res_group ans;\r\n  ans = find_max_dep(tot_customers,read_bank_details);\r\n  int max_ind;\r\n  printf(\"Tot deposit amount : %lld\\nDetail of Maximum amount deposited Customer :\\n\",ans.tot_depo_amount);\r\n  max_ind=ans.index_of_max_amount_customer;\r\n  printf(\"%d\\n\",read_bank_details[max_ind].cust_id);\r\n  printf(\"%lld\\n\",read_bank_details[max_ind].cust_acc_num);\r\n  printf(\"%s\\n\",read_bank_details[max_ind].cust_name);\r\n  printf(\"%lld\\n\",read_bank_details[max_ind].amount_in_account);\r\n  return 0;\r\n}", "9": "#include<stdio.h>\r\nstruct gold\r\n{\r\n    int sovereign;\r\n    int grams;\r\n\r\n};\r\ntypedef struct gold GOLD;\r\nstruct gold get_gold()\r\n{\r\n    struct gold input_gold;\r\n    scanf(\"%d %d\",&input_gold.sovereign,&input_gold.grams);\r\n    return input_gold;\r\n}\r\nint make_orn(int tot_gold_coins,GOLD input[])\r\n{\r\n    int ind;\r\n    GOLD gold_weight={0,0};\r\n    int tot_grams;\r\n    for(ind=0; ind<tot_gold_coins;ind+=1)\r\n    {\r\n        gold_weight.sovereign+=input[ind].sovereign;\r\n        gold_weight.grams+=input[ind].grams;\r\n    }\r\n    tot_grams = gold_weight.sovereign*8+gold_weight.grams;\r\n    return tot_grams/42;//5 sovereign = 40 grams, 2 gram wastage\r\n}\r\nint main()//entry point\r\n{\r\n  struct gold read_input;\r\n  int total_gold_coins;\r\n  scanf(\"%d\",&total_gold_coins);\r\n  GOLD input[total_gold_coins];\r\n  int ind;\r\n  for(ind=0;ind<total_gold_coins;ind+=1)\r\n   input[ind] = get_gold();\r\n  int res;\r\n  res=make_orn(total_gold_coins,input);\r\n  printf(\"%d\",res);\r\nreturn 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nstruct height\r\n{\r\n    int feets;\r\n    int inches;\r\n};\r\ntypedef struct height HEIGHT;\r\nstruct height get_height()\r\n{\r\n    struct height input_height;\r\n    scanf(\"%d %d\",&input_height.feets,&input_height.inches);\r\n    return input_height;\r\n}\r\n\r\nvoid swap(int arr[],int ind1, int ind2)\r\n{\r\n    int temp;\r\n    temp = arr[ind1];\r\n    arr[ind1] = arr[ind2];\r\n    arr[ind2] = temp;\r\n}\r\n\r\n\r\nvoid max_heapify(int  arr[] , int parent_ind,int scope)\r\n{\r\n    int left_ind,right_ind;\r\n    left_ind = parent_ind*2+1;\r\n    right_ind = left_ind+1;\r\n    //no child-> left> scope\r\n    if(left_ind>scope)\r\n        return ;\r\n    if(left_ind==scope)//one child=> left child will equal to th scope\r\n    {\r\n        if(arr[left_ind] >arr[parent_ind])\r\n        {\r\n            swap(arr,left_ind,parent_ind);\r\n        }\r\n    }\r\n    else if(right_ind <= scope)//parent got two child\r\n    {\r\n         if(arr[parent_ind]<arr[left_ind]\r\n             ||arr[parent_ind] < arr[right_ind])\r\n         {\r\n             if(arr[left_ind]>arr[right_ind])\r\n             {\r\n                swap(arr,left_ind,parent_ind);//it may affect the left_ind as it may be a parent\r\n                max_heapify(arr,left_ind,scope);\r\n             }\r\n             else\r\n             {\r\n                 swap(arr,right_ind,parent_ind);\r\n                 max_heapify(arr,right_ind,scope);\r\n             }\r\n         }\r\n    }\r\n\r\n}\r\n\r\nint find_min_people(int wall_height_in_feets, int tot_people, HEIGHT full_heights[], HEIGHT head_to_shoulder[])\r\n{\r\n    int wall_height_in_inches;\r\n    wall_height_in_inches=wall_height_in_feets*12;\r\n    int scope;\r\n    int peoples_climbed=0;\r\n    int ind;\r\n    int shoulder_to_toe[tot_people];//in inches\r\n    for(ind=0;ind<tot_people;ind+=1)\r\n        shoulder_to_toe[ind]=(full_heights[ind].feets*12+full_heights[ind].inches )- (head_to_shoulder[ind].feets*12+head_to_shoulder[ind].inches);\r\n    int parent;\r\n    scope=tot_people-1;\r\n\r\n    for(parent = (scope-1)/2; parent>=0 ; parent--)//6 to 0\r\n        max_heapify(shoulder_to_toe,parent,scope);\r\n    swap(shoulder_to_toe,0,scope);//swapping the max val found at root(0th) right most\r\n\r\n    if(wall_height_in_inches > 0)\r\n    {\r\n        peoples_climbed+=1;\r\n        wall_height_in_inches = wall_height_in_inches - shoulder_to_toe[scope];\r\n    }\r\n    else\r\n        return peoples_climbed;\r\n    while(scope>0)\r\n    {\r\n      scope--;\r\n      max_heapify(shoulder_to_toe,0,scope);//max heapifying root is sufficient,caz its only been a change\r\n      swap(shoulder_to_toe,0,scope);//swapping the max val found at root(0th) right most\r\n      if(wall_height_in_inches > 0 )\r\n     {\r\n        peoples_climbed+=1;\r\n        wall_height_in_inches = wall_height_in_inches - shoulder_to_toe[scope];\r\n     }\r\n     else\r\n         return peoples_climbed;\r\n    }\r\n\r\n   return -1;\r\n\r\n}\r\nint main()//entry point\r\n{\r\n  int wall_height;\r\n  scanf(\"%d\",&wall_height);\r\n  int tot_people;\r\n  scanf(\"%d\",&tot_people);\r\n  HEIGHT full_heights[tot_people];\r\n  HEIGHT head_to_shoulder[tot_people];\r\n  int ind;\r\n  for(ind=0;ind<tot_people;ind+=1)\r\n      full_heights[ind] = get_height();\r\n  for(ind=0;ind<tot_people;ind+=1)\r\n      head_to_shoulder[ind] = get_height();\r\n  int res;\r\n  res = find_min_people(wall_height,tot_people,full_heights,head_to_shoulder);\r\n  printf(\"%d\",res);\r\n  return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "Pattern_Level_3": {"1": "\"#include<stdio.h>\r\nint main()\r\n{\r\n int num,row,col;\r\n scanf(\"\"%d\"\",&num);\r\n for(row=1;row<=num;row++)\r\n {\r\n for(col=1;col<=num;col++)\r\n (row>1&&col==num/2+1)?printf(\"\"%d\"\",row-1):printf(\"\"%d\"\",num);\r\n printf(\"\"\\n\"\");\r\n }\r\n}\"", "2": "\"#include<stdio.h> \r\nint main() {\r\n    int num,row,col;\r\n    scanf(\"\"%d\"\",&num);\r\n    for(row=1;row<=num;row++,printf(\"\"\\n\"\"))\r\n    {\r\n        for(col=1;col<=num;col++) {\r\n            if(row<=col) printf(\"\"%2d\"\",(col-row)+1);\r\n            else printf(\"\"%2d\"\",(row-col)+1); \r\n        } \r\n    } \r\n    return 0;\r\n}\"", "3": "\"#include<stdio.h>\r\nint main()\r\n{\r\n int num,val=1,cnt=0,rep,inc,dec,row;\r\n scanf(\"\"%d\"\",&num);\r\n val=num;\r\n for(row=1;row<=(2*num)-1;row++)\r\n {\r\n for(dec=1;dec<=cnt;dec++)\r\n printf(\"\"%2d\"\",val--);\r\n for(rep=1;rep<=((2*num)-1)-2*cnt;rep++)\r\n printf(\"\"%2d\"\",val);\r\n for(inc=1;inc<=cnt;inc++)\r\n printf(\"\"%2d\"\",++val);\r\n if(row>=num)\r\n cnt--;\r\n else\r\n cnt++;\r\n if(row<2*num-1)\r\n printf(\"\"\\n\"\");\r\n }\r\n}\"", "4": "\"#include<stdio.h>\nvoid displayPattern(int);\nint main()\n{\n int N ;\n scanf(\"\"%d\"\" , &N);\n displayPattern(N);\n return 0 ;\n}\nvoid displayPattern(int N)\n{\n int r , c , val , start;\n for(r = 1 ; r <= N ; r++ , printf(\"\"\\n\"\"))\n {\n val = r ;\n start = N-1;\n for(c = 1 ; c <= r ; c++ , val+=start , start--)\n printf(\"\"%02d \"\" , val);\n }\n}\"", "5": "\"#include<stdio.h>\nint main()\n{\n    int num,row,col,val,temp,evencol=-2,oddcol;\n    scanf(\"\"%d\"\",&num);\n    for(row=1;row<=num;printf(\"\"\\n\"\"),evencol=temp+2,row++)\n    {\n        oddcol=(num-row)*2+1;\n        val=row;\n        temp=evencol;\n        for(col=1;col<=row;col++)\n        {\n            printf(\"\"%02d \"\",val);\n            (col%2==1)?(val+=oddcol):(val+=evencol,evencol-=4);\n        }\n    }\n}\n\"", "6": "\"#include<stdio.h>\r\nint main()\r\n{\r\n int row,col,num,inc,val=1,inc1;\r\n scanf(\"\"%d\"\",&num);\r\n for(row=1;row<=num;row++)\r\n {\r\n for(col=1;col<=num;col++)\r\n {\r\n if(row%2==1)\r\n printf(\"\"%03d \"\",val++);\r\n else\r\n printf(\"\"%03d \"\",--val);\r\n }\r\n val+=num;\r\n if(row<num)\r\n printf(\"\"\\n\"\");\r\n }\r\n}\"", "7": "\"#include <stdio.h>\r\nint main()\r\n{\r\n int row, col, count, value, N;\r\n scanf(\"\"%d\"\", &N);\r\n count = 0;\r\n for(row=1; row<=N; row++)\r\n {\r\n if(row%2==1)\r\n value=count+row;\r\n if(row%2==0)\r\n value=count+1;\r\n for(col=1; col<=row; col++)\r\n {\r\n printf(\"\"%3d \"\", value);\r\n if(row%2==1)\r\n value--;\r\n else\r\n value++;\r\n count++;\r\n }\r\n printf(\"\"\\n\"\");\r\n }\r\n return 0;\r\n}\"", "8": "\"#include<stdio.h>\nint main()\n{\n int num,row,col,val=1;\n scanf(\"\"%d\"\",&num);\n for(row=1;row<=num;row++,printf(\"\"\\n\"\"))\n {\n val=(row*(row-1))/2+1;\n for(col=1;col<row;col++)\n (val<=9)?printf(\"\"%d \"\",val++):printf(\"\"%d \"\",val++);\n printf(\"\"%d\"\",val++);\n }\n for(row=num;row>=1;row--)\n {\n val=(row*(row-1))/2+1;\n for(col=1;col<row;col++)\n (val<=9)?printf(\"\"%d \"\",val++):printf(\"\"%d \"\",val++);\n printf(\"\"%d\"\",val++);\n if(row>1)\n printf(\"\"\\n\"\");\n }\n}\"", "9": "\"#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col,val1,val;\r\nscanf(\"\"%d\"\",&num);\r\nfor(row=0;row<num;row+=2,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=0;col<num;col++)\r\n{\r\nval=(num*row)+col;\r\nif(col==0)\r\nprintf(\"\"%03d\"\",val+1);\r\nelse\r\nprintf(\"\"*%03d\"\",val+1);\r\n}\r\n}\r\nif(num%2)\r\nval1=num-2;\r\nelse\r\nval1=num-1;\r\nfor(row=val1;row>0;row-=2,printf(\"\"\\n\"\"))\r\n{\r\nfor(col=0;col<num;col++)\r\n{\r\nval=(num*row)+col;\r\nif(col==0)\r\nprintf(\"\"%03d\"\",val+1);\r\nelse\r\nprintf(\"\"*%03d\"\",val+1);\r\n}\r\n}\r\n}\"", "10": "\"#include<stdio.h>\r\nint main()\r\n{\r\nint num,row,col,space,val=1,temp,diff=0;\r\nscanf(\"\"%d\"\",&num);\r\ntemp=(num*num)+1;\r\ndiff=(num*2)-1;\r\nfor(row=1;row<=num;row++)\r\n{\r\nfor(space=1;space<row;space++)\r\nprintf(\"\"    \"\");\r\nfor(col=num;col>=row;col--)\r\nprintf(\"\"%03d \"\",val++);\r\nfor(col=num;col>=row;col--)\r\nprintf(\"\"%03d \"\",temp++);\r\ntemp=temp-diff;\r\ndiff-=2;\r\nif(row<num)\r\nprintf(\"\"\\n\"\");\r\n}\r\n}\"", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_Adv_1D_Array_L0": {"1": "#include<stdio.h>\r\nint CalculateValue(int *arr, int size,int t_val)\r\n{\r\n    int sum=0,ind;\r\n    for(ind=0; ind<size; ind++)\r\n    {\r\n        sum = sum + (arr[ind]/t_val) + (!(arr[ind]%t_val==0));\r\n    }\r\n    return sum;\r\n}\r\nint main()\r\n{\r\n    int size,ind,t_val;\r\n    scanf(\"%d %d\",&size,&t_val);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",CalculateValue(arr,size,t_val));\r\n    return 0;\r\n}", "2": "#include<stdio.h>\r\n#include<limits.h>\r\nint Check(int *arr, int size)\r\n{\r\n    int ind,max=INT_MIN;\r\n    int *hash;\r\n    for(ind=0;ind<size;ind++)\r\n        if(arr[ind] > max)\r\n            max = arr[ind];\r\n    hash = (int*)calloc((max+1) , sizeof(int));\r\n    for(ind=0;ind<=size-1;ind++)\r\n        hash[arr[ind]]++;\r\n    for(ind=0;ind<=max;ind++)\r\n        if(hash[ind]>1)\r\n            return 0;\r\n    return 1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    if(Check(arr,size))\r\n        printf(\"Unique\");\r\n    else\r\n        printf(\"Duplicate\");\r\n    return 0;\r\n}\r\n", "3": "#include<stdio.h>\r\nint FindUnique(int *arr,int size)\r\n{\r\n    int res=0,ind;\r\n    for(ind=0; ind<size; ind++)\r\n        res = res ^ arr[ind];\r\n    return res;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",FindUnique(arr,size));\r\n    return 0;\r\n}\r\n", "4": "#include<stdio.h>\r\nint FindMissing(int *arr,int size)\r\n{\r\n    int ind,sum=0,num=size+1;\r\n    for(ind=0; ind<size; ind++)\r\n        sum += arr[ind];\r\n    return  (num *(num+1)/2) - sum;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",FindMissing(arr,size));\r\n    return 0;\r\n}\r\n", "5": "#include<stdio.h>\r\n#include<limits.h>\r\n#include<math.h>\r\nint ClosestSum(int *arr, int size)\r\n{\r\n    int ind1,ind2,sum,min,pos1=0,pos2=1;\r\n    min = arr[0]+arr[1];\r\n    for(ind1=0;ind1<size-1;ind1++)\r\n    {\r\n        for(ind2=ind1+1;ind2<size;ind2++)\r\n        {\r\n            sum = arr[ind1]+arr[ind2];\r\n            if(abs(min) > abs(sum))\r\n            {\r\n                min = sum;\r\n                pos1=ind1;\r\n                pos2=ind2;\r\n            }\r\n        }\r\n    }\r\n    printf(\"(%d,%d)\",arr[pos1],arr[pos2]);\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    ClosestSum(arr,size);\r\n    return 0;\r\n}\r\n", "6": "#include<stdio.h>\r\nvoid Replace(int *arr, int size)\r\n{\r\n    int ind,safe;\r\n    int max = arr[size-1];\r\n    arr[size-1]=0;\r\n    for(ind=size-2; ind>=0; ind--)\r\n    {\r\n            safe = arr[ind];\r\n            arr[ind] = max;\r\n            if(max < safe)\r\n                max = safe;\r\n    }\r\n\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int *arr;\r\n    arr = (int*)malloc(size * sizeof(int));\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    Replace(arr,size);\r\n    for(ind=0; ind<size;printf(\"%d \",arr[ind++]));\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\nint MaxDifference(int *arr, int size)\r\n{\r\n    int ind,min,diff;\r\n    min = arr[0];\r\n    diff = arr[1] - arr[0];\r\n    for(ind=1;ind<size;ind++)\r\n    {\r\n        if((arr[ind]-min) > diff)\r\n            diff = arr[ind]-min;\r\n        if(arr[ind] < min)\r\n            min = arr[ind];\r\n    }\r\n    return diff;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",MaxDifference(arr,size));\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\n#include<limits.h>\r\nint MinimumNumber(int *arr, int size)\r\n{\r\n    int max=INT_MIN,index;\r\n    for(index=0;index<size;index++)\r\n    {\r\n        if(max<arr[index])\r\n        {\r\n            max=arr[index];\r\n        }\r\n    }\r\n    int cakes[max+1];\r\n     for(index=0;index<max+1;index++)\r\n    {\r\n     cakes[index]=0;\r\n    }\r\n     for(index=0;index<size;index++)\r\n    {\r\n       cakes[arr[index]]++;\r\n    }\r\n    int count=0;\r\n     for(index=0;index<max+1;index++)\r\n    {\r\n       if(cakes[index]!=0)\r\n       {\r\n           count++;\r\n       }\r\n    }\r\n    return count+1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",MinimumNumber(arr,size));\r\n    return 0;\r\n}\r\n", "9": "#include<stdio.h>\r\nint CheckSparse(int num)\r\n{\r\n    if((num&(num<<1))==0)\r\n        return 1;\r\n    else\r\n        return 0;\r\n}\r\nint FindSparse(int *arr,int size)\r\n{\r\n    int ind,ele;\r\n        for(ind=0; ind<size; ind++)\r\n        {\r\n            ele=arr[ind];\r\n            while(1)\r\n            {\r\n                if(CheckSparse(ele))\r\n                {\r\n                    arr[ind] = ele;\r\n                    break;\r\n                }\r\n                ele++;\r\n            }\r\n        }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    FindSparse(arr,size);\r\n    for(ind=0;ind<size;printf(\"%d \",arr[ind++]));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint CountChief(int *arr, int size)\r\n{\r\n    int ind,largest,count=0;\r\n    largest = arr[size-1];\r\n    for(ind = size-2; ind>=0; ind--)\r\n    {\r\n        if(arr[ind] > largest)\r\n        {\r\n            count++;\r\n            largest = arr[ind];\r\n        }\r\n    }\r\n    return  count;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",CountChief(arr,size));\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_Adv_1D_Array_L1": {"1": "#include<stdio.h>\r\nvoid FindNumber(int *arr,int size)\r\n{\r\n    int xor2 = arr[0];\r\n  int setbitno,ind;\r\n  int num1 = 0, num2 = 0;\r\n  for(ind = 1; ind <size; ind++)\r\n    xor2 = xor2 ^ arr[ind];\r\n  setbitno = xor2 & ~(xor2-1);\r\n  for(ind = 0; ind < size; ind++)\r\n  {\r\n    if(arr[ind] & setbitno)\r\n      num1 = num1 ^ arr[ind];\r\n    else\r\n      num2 = num2 ^ arr[ind];\r\n  }\r\n  printf(\"%d %d\", num1, num2);\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    FindNumber(arr,size);\r\n    return 0;\r\n}\r\n", "2": "#include<stdio.h>\r\n#include<limits.h>\r\nint MaximumSum(int *arr, int size)\r\n{\r\n   int res = INT_MIN, sum = 0,ind;\r\n    for (ind = 0; ind < size; ind++)\r\n    {\r\n        sum = sum + arr[ind];\r\n        if (res < sum)\r\n            res = sum;\r\n        if (sum < 0)\r\n            sum = 0;\r\n    }\r\n    return res;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",MaximumSum(arr,size));\r\n    return 0;\r\n}\r\n", "3": "#include <stdio.h>\r\nint FindPair(int *arr, int size, int diff)\r\n{\r\n    int ind1 = 0;\r\n    int ind2 = 1;\r\n    while (ind1<size && ind2<size)\r\n    {\r\n        if (ind1 != ind2 && arr[ind2]-arr[ind1] == diff)\r\n        {\r\n            printf(\"(%d,%d)\", arr[ind1], arr[ind2]);\r\n            return;\r\n        }\r\n        else if (arr[ind2]-arr[ind1] < diff)\r\n            ind2++;\r\n        else\r\n            ind1++;\r\n    }\r\n    printf(\"No Pair\");\r\n    return;\r\n}\r\n\r\nint main()\r\n{\r\n    int size,ind,diff;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    scanf(\"%d\",&diff);\r\n    FindPair(arr, size, diff);\r\n    return 0;\r\n}\r\n\r\n", "4": "#include <stdio.h>\r\n int CeilValue(int *arr, int low, int high, int ele)\r\n{\r\n     int ind;\r\n    if (ele <= arr[low])\r\n    return low;\r\n   for (ind = low; ind < high; ind++)\r\n   {\r\n       if (arr[ind] == ele)\r\n          return ind;\r\n\r\n       if (arr[ind] < ele && arr[ind + 1] >= ele)\r\n           return ind + 1;\r\n   }\r\n   return -1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    int ele;\r\n    scanf(\"%d\",&ele);\r\n    res = CeilValue(arr, 0, size-1, ele);\r\n    if (res == -1)\r\n        printf(\"%d\", ele);\r\n    else\r\n        printf(\"%d\", arr[res]);\r\n    return 0;\r\n}\r\n\r\n", "5": "#include <stdio.h>\r\nint CalcCeil(int *arr, int size, int ele)\r\n{\r\n    int low = 0, high = size - 1, mid;\r\n    int ceil = -1;\r\n    while (low <= high)\r\n    {\r\n        mid = (low + high) / 2;\r\n        if (arr[mid] == ele)\r\n            return arr[mid];\r\n        else if (ele < arr[mid])\r\n        {\r\n            ceil = arr[mid];\r\n            high = mid - 1;\r\n        }\r\n        else\r\n            low = mid + 1;\r\n    }\r\n    return ceil;\r\n}\r\n\r\nint CalcFloor(int *arr, int size, int ele)\r\n{\r\n    int low = 0, high = size - 1, mid;\r\n    int floor = -1;\r\n    while (low <= high)\r\n        {\r\n        mid = (low + high) / 2;\r\n        if (arr[mid] == ele)\r\n            return arr[mid];\r\n        else if (ele < arr[mid])\r\n            high = mid - 1;\r\n        else\r\n        {\r\n            floor = arr[mid];\r\n            low = mid + 1;\r\n        }\r\n    }\r\n    return floor;\r\n}\r\nvoid CalculateValue(int *arr,int size)\r\n{\r\n    int ind;\r\n    for (ind = 0; ind <= 10; ind++)\r\n    {\r\n        printf(\"Number : %d \", ind);\r\n        printf(\"Ceil : %d \", CalcCeil(arr, size, ind));\r\n        printf(\"Floor : %d\\n\", CalcFloor(arr, size, ind));\r\n    }\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    CalculateValue(arr,size);\r\n    return 0;\r\n}\r\n\r\n", "6": "#include<stdio.h>\r\nint PrintTrio(long long int *arr, long long int size,long long int sum)\r\n{\r\n   long long int ind1,ind2,ind3;\r\n   for(ind1=0;ind1<size-2;ind1++)\r\n   {\r\n       for(ind2=ind1+1; ind2<size-1;ind2++)\r\n       {\r\n           for(ind3=ind2+1;ind3<size;ind3++)\r\n           {\r\n               if(arr[ind1]+arr[ind2]+arr[ind3] == sum)\r\n               {\r\n                   printf(\"%lld %lld %lld\",arr[ind1],arr[ind2],arr[ind3]);\r\n                   return;\r\n               }\r\n           }\r\n       }\r\n   }\r\n   return 0;\r\n}\r\nint main()\r\n{\r\n    long long int size,ind;\r\n    scanf(\"%lld\",&size);\r\n    long long int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%lld\",&arr[ind++]));\r\n    int sum;\r\n    scanf(\"%lld\",&sum);\r\n    if(PrintTrio(arr,size,sum)==0)\r\n        printf(\"No Triplet Found\");\r\n    return 0;\r\n}\r\n", "7": "#include<stdio.h>\r\n#include<limits.h>\r\nint MinimumDistance(int *arr,int size,int ele1,int ele2)\r\n{\r\n    int ps1 = INT_MAX;\r\n    int ps2 = INT_MAX;\r\n    int d = size+1,dist;\r\n    ps1 = ps2 = d = size;\r\n\r\n    for (int ind = 0; ind < size; ind++)\r\n    {\r\n        if (arr[ind] == ele1)\r\n            ps1 = ind;\r\n        else if (arr[ind] == ele2)\r\n            ps2 = ind;\r\n\r\n        if (ps1 < size && ps2 < size)\r\n        {\r\n            dist = abs(ps1 - ps2);\r\n            if (d > dist)\r\n                d = dist;\r\n        }\r\n    }\r\n    return d == size+1 ? -1 : d;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    int ele1,ele2;\r\n    scanf(\"%d%d\",&ele1,&ele2);\r\n    printf(\"%d\",MinimumDistance(arr,size,ele1,ele2));\r\n    return 0;\r\n}\r\n", "8": "#include<stdio.h>\r\nint MinimumOperation(int *arr, int size)\r\n{\r\n        int count = size;\r\n        int ind;\r\n        for (ind=size-1; ind >= 0; ind--)\r\n        {\r\n                if (arr[ind] == count)\r\n                        count--;\r\n        }\r\n        return count;\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        printf(\"%d\", MinimumOperation(arr,size));\r\n        return 0;\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint FindPair(int *arr, int size)\r\n{\r\n    int ind1,ind2,ind3;\r\n    for(ind1=0;ind1<size;ind1++)\r\n    {\r\n        for(ind2=ind1+1;ind2<size;ind2++)\r\n        {\r\n            for(ind3=ind2+1;ind3<size;ind3++)\r\n            {\r\n                if(arr[ind1]+arr[ind2]==arr[ind3] || arr[ind1]+arr[ind3]==arr[ind2]\r\n                   || arr[ind2]+arr[ind3]==arr[ind1])\r\n                {\r\n                    printf(\"%d %d %d\",arr[ind1],arr[ind2],arr[ind3]);\r\n                    return ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    if(FindPair(arr,size) == 0)\r\n        printf(\"No Pair Exists\");\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nvoid UpdateElement(long long int *arr, long long int size)\r\n{\r\n    long long int prev,curr,ind;\r\n    prev = arr[0];\r\n    arr[0] = arr[0] * arr[1];\r\n    for(ind=1; ind<size-1;ind++)\r\n    {\r\n        curr = arr[ind];\r\n        arr[ind] = prev * arr[ind+1];\r\n        prev = curr;\r\n    }\r\n    arr[size-1] = prev * arr[size-1];\r\n}\r\nint main()\r\n{\r\n    long long int size,ind;\r\n    scanf(\"%lld\",&size);\r\n    long long int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%lld\",&arr[ind++]));\r\n    UpdateElement(arr,size);\r\n    for(ind=0;ind<size;printf(\"%lld \",arr[ind++]));\r\n    return 0;\r\n}\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}, "upd_Adv_1D_Array_L2": {"1": "#include <stdio.h>\r\n#define min(a,b) (a)<(b)?(a):(b)\r\n#define max(a,b) (a)>(b)?(a):(b)\r\nint CircularSum(int *arr, int size)\r\n{\r\n        int sum = 0,ind;\r\n        for ( ind = 0; ind < size; ind++) {\r\n                sum += arr[ind];\r\n        }\r\n        int curr_max = arr[0], max_so_far = arr[0],curr_min=arr[0],min_so_far=arr[0];\r\n        for (ind = 1; ind < size; ind++) {\r\n                curr_max = max(curr_max + arr[ind], arr[ind]);\r\n                max_so_far = max(max_so_far, curr_max);\r\n                curr_min = min(curr_min + arr[ind], arr[ind]);\r\n                min_so_far = min(min_so_far, curr_min);\r\n        }\r\n\r\n        if (min_so_far == sum)\r\n                return max_so_far;\r\n        return max(max_so_far, sum - min_so_far);\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        printf(\"%d\",CircularSum(arr,size));\r\n        return 0;\r\n}\r\n", "2": "#include <stdio.h>\r\nint CountTriangle(int *arr, int size)\r\n{\r\n        int count = 0,ind1,ind2,ind3;\r\n        for (ind1 = 0; ind1 < size; ind1++) {\r\n                for (ind2 = ind1 + 1; ind2 < size; ind2++) {\r\n                        for (ind3 = ind2 + 1; ind3 < size; ind3++)\r\n                                if (arr[ind1] + arr[ind2] > arr[ind3]\r\n                    && arr[ind1] + arr[ind3] > arr[ind2] && arr[ind3] + arr[ind2] > arr[ind1])\r\n                                        count++;\r\n                }\r\n        }\r\n        return count;\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        printf(\"%d\",CountTriangle(arr,size));\r\n        return 0;\r\n}\r\n\r\n", "3": "#include<stdio.h>\r\nint SubArray(int *arr1, int *arr2, int size1, int size2)\r\n{\r\n    int ind1,ind2;\r\n        for ( ind1 = 0; ind1 <= size1-size2; ind1++)\r\n        {\r\n                for (ind2 = 0; ind2< size2; ind2++)\r\n                {\r\n                if (arr1[ind1+ind2] != arr2[ind2])\r\n                                break;\r\n                }\r\n                if (ind2 == size2) {\r\n                        return 1;\r\n                }\r\n        }\r\n        return 0;\r\n}\r\nint main()\r\n{\r\n        int size1,size2,ind;\r\n        scanf(\"%d%d\",&size1,&size2);\r\n        int arr1[size1];\r\n        int arr2[size2];\r\n        for(ind=0;ind<size1;scanf(\"%d\",&arr1[ind++]));\r\n        for(ind=0;ind<size2;scanf(\"%d\",&arr2[ind++]));\r\n        if (SubArray(arr1,arr2,size1,size2))\r\n                printf(\"YES\");\r\n        else\r\n                printf(\"NO\");\r\n        return 0;\r\n}\r\n\r\n", "4": "#include <stdio.h>\r\nint CountPair(int *arr, int size, int ele)\r\n{\r\n        int count = 0,ind1,ind2;\r\n        for (ind1 = 0; ind1 < size; ind1++) {\r\n                for (ind2 = ind1 + 1; ind2 < size; ind2++)\r\n                        if (arr[ind1] - arr[ind2] == ele\r\n                                || arr[ind2] - arr[ind1] == ele)\r\n                                count++;\r\n        }\r\n        return count;\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        int ele;\r\n        scanf(\"%d\",&ele);\r\n        printf(\"%d\",CountPair(arr,size,ele));\r\n        return 0;\r\n}\r\n", "5": "#include <stdio.h>\r\nint CheckSubset(int *arr1, int *arr2, int size1, int size2)\r\n{\r\n        int ind1 = 0,ind2=0;\r\n        for (ind1 = 0; ind1 < size2; ind1++) {\r\n                for (ind2 = 0; ind2 < size1; ind2++) {\r\n                        if (arr2[ind1] == arr1[ind2])\r\n                                break;\r\n                }\r\n                if (ind2 == size1)\r\n                        return 0;\r\n        }\r\n        return 1;\r\n}\r\nint main()\r\n{\r\n    int size1,size2,ind;\r\n    scanf(\"%d%d\",&size1,&size2);\r\n    int arr1[size1],arr2[size2];\r\n    for(ind=0;ind<size1;scanf(\"%d\",&arr1[ind++]));\r\n    for(ind=0;ind<size2;scanf(\"%d\",&arr2[ind++]));\r\n    if(CheckSubset(arr1,arr2,size1,size2))\r\n        printf(\"Exist\");\r\n    else\r\n        printf(\"Does Not Exist\");\r\n    return 0;\r\n}\r\n\r\n", "6": "#include<stdio.h>\r\nint MinimumLength(int *arr, int size)\r\n{\r\n    int start = 0, end = size-1, ind, max, min;\r\n    for (start = 0; start < size-1; start++)\r\n    {\r\n        if (arr[start] > arr[start+1])\r\n        break;\r\n    }\r\n    if (start == size-1)\r\n    {\r\n        return 0;\r\n    }\r\n    for(end = size - 1; end > 0; end--)\r\n    {\r\n        if(arr[end] < arr[end-1])\r\n        break;\r\n    }\r\n    max = arr[start]; min = arr[start];\r\n    for(ind = start + 1; ind <= end; ind++)\r\n    {\r\n        if(arr[ind] > max)\r\n        max = arr[ind];\r\n        if(arr[ind] < min)\r\n        min = arr[ind];\r\n    }\r\n\r\n    for( ind = 0; ind < size; ind++)\r\n    {\r\n        if(arr[ind] > min)\r\n        {\r\n        start = ind;\r\n        break;\r\n        }\r\n    }\r\n    for( ind = size -1; ind >= end+1; ind--)\r\n    {\r\n        if(arr[ind] < max)\r\n        {\r\n        end = ind;\r\n        break;\r\n        }\r\n    }\r\n    return end-start+1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",MinimumLength(arr,size));\r\n    return 0;\r\n}\r\n\r\n", "7": "#include <stdio.h>\r\nvoid MaxElement(int *arr, int size, int k)\r\n{\r\n        int ind1,ind2, max;\r\n        for (ind1 = 0; ind1 <= size - k; ind1++) {\r\n                max = arr[ind1];\r\n                for (ind2 = 1; ind2 < k; ind2++) {\r\n                        if (arr[ind1 + ind2] > max)\r\n                                max = arr[ind1 + ind2];\r\n                }\r\n                printf(\"%d \", max);\r\n        }\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        int k;\r\n        scanf(\"%d\",&k);\r\n        MaxElement(arr, size, k);\r\n        return 0;\r\n}\r\n\r\n", "8": "#include<stdio.h>\r\n#include<limits.h>\r\nvoid Add_One(int *arr, int size)\r\n{\r\n    int ind,ind1;\r\n    int result[size];\r\n    for(ind=0;ind<size;ind++)\r\n        result[ind]=0;\r\n   ind=size-1;\r\n  while(arr[ind]==9&&ind>=0)\r\n  {\r\n   ind--;\r\n  }\r\n  if(ind==-1)\r\n  {\r\n       result[size+1];\r\n       result[0]=1;\r\n       for(ind=0;ind<=size;ind++)\r\n      {\r\n        printf(\"%d \",result[ind]);\r\n      }\r\n  }\r\n  else\r\n  {\r\n       result[ind]=arr[ind]+1;  //result[1]=9\r\n       for(ind1=0;ind1<ind;ind1++)\r\n       {\r\n        result[ind1]=arr[ind1];\r\n       }\r\n       for(ind=0;ind<=size-1;ind++)\r\n      {\r\n        printf(\"%d \",result[ind]);\r\n      }\r\n  }\r\n}\r\nint main()\r\n{\r\n  int size,ind;\r\n  scanf (\"%d\",&size);//n=6\r\n  int arr[size];\r\n  for (ind=0;ind<=size-1;ind++)\r\n       scanf(\"%d\",&arr[ind]);\r\n  Add_One(arr,size);\r\n  return 0;\r\n}\r\n\r\n", "9": "#include<stdio.h>\r\nint CheckSum(int *arr, int size)\r\n{\r\n    int left_arr[size],right_arr[size];\r\n    int ind;\r\n    left_arr[0] = arr[0];\r\n    for ( ind = 1; ind < size; ind++)\r\n        left_arr[ind] = left_arr[ind - 1] + arr[ind];\r\n    right_arr[size - 1] = arr[size - 1];\r\n    for (ind = size - 2; ind >= 0; ind--)\r\n        right_arr[ind] = right_arr[ind + 1] + arr[ind];\r\n\r\n    for (ind = 0; ind < size ; ind++)\r\n        if (left_arr[ind] == right_arr[ind])\r\n            return ind+1;\r\n\r\n    return -1;\r\n}\r\nint main()\r\n{\r\n    int size,ind;\r\n    scanf(\"%d\",&size);\r\n    int arr[size];\r\n    for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n    printf(\"%d\",CheckSum(arr,size));\r\n    return 0;\r\n}\r\n", "10": "#include<stdio.h>\r\nint CountHeight(int *arr, int size)\r\n{\r\n        int ind,count = 1,max = arr[0];\r\n        for (ind = 1; ind < size; ind++)\r\n    {\r\n                if (arr[ind] > max || arr[ind] == max)\r\n                {\r\n                        count++;\r\n                        max = arr[ind];\r\n                }\r\n        }\r\n        return count;\r\n}\r\nint main()\r\n{\r\n        int size,ind;\r\n        scanf(\"%d\",&size);\r\n        int arr[size];\r\n        for(ind=0;ind<size;scanf(\"%d\",&arr[ind++]));\r\n        printf(\"%d\",CountHeight(arr,size));\r\n        return 0;\r\n}\r\n\r\n", "11": "", "12": "", "13": "", "14": "", "15": ""}}